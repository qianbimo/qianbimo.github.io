<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java从入门到入坟</title>
      <link href="/2023/08/02/Java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
      <url>/2023/08/02/Java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/</url>
      
        <content type="html"><![CDATA[<p>d</p><p>Java的重要特点</p><p>1.Java语言是面向对象的 oop</p><p>2.Java语言是健壮的。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。</p><p>3.Java语言是解释型的。</p><p>4.Java是跨平台性的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法入门</title>
      <link href="/2023/08/01/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/01/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>推荐直接使用本函数，无后顾之忧，在使用之前，需要调用头文件<code>&lt;algorithm&gt;</code></p><p>它有三个参数<code>sort(begin, end, cmp)</code>，其中<code>begin</code>为指向待<code>sort()</code>的数组的<code>第一个元素的指针</code>，<code>end</code>为指向待<code>sort</code>()的数组的<code>最后一个元素的下一个位置的指针</code>，<code>cmp</code>参数为排序准则，<code>cmp</code>参数可以不写，如果不写的话，默认从小到大进行排序。如果我们想从大到小排序可以将<code>cmp</code>参数写为<code>greater&lt;int&gt;()</code>就是对<code>int</code>数组进行排序，当然<code>&lt;&gt;</code>中我们也可以写<code>double、long、float</code>等等。如果我们需要按照其他的排序准则，那么就需要我们自己定义一个<code>bool</code>类型的函数来传入。在对结构体排序时，经常会用到自己写一个排序规则。</p><p>写法如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a,a+n,cmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，工作室不乏有变态要求手写排序，接下来有几个排序的代码可以看一下。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge_sort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><p>很令人头疼的憨批东西，直接上模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> BigInteger</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10005</span></span><br><span class="line"><span class="keyword">using</span> std::sprintf;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::max;</span><br><span class="line"><span class="keyword">using</span> std::istream;</span><br><span class="line"><span class="keyword">using</span> std::ostream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Big_integer</span>&#123;  </span><br><span class="line">    <span class="type">int</span> d[maxn], len;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clean</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">while</span>(len &gt; <span class="number">1</span> &amp;&amp; !d[len<span class="number">-1</span>]) </span><br><span class="line">len--;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">Big_integer</span>()          &#123; <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d)); len = <span class="number">1</span>; &#125;  </span><br><span class="line">    <span class="built_in">Big_integer</span>(<span class="type">int</span> num)   &#123; *<span class="keyword">this</span> = num; &#125;   </span><br><span class="line">    <span class="built_in">Big_integer</span>(<span class="type">char</span>* num) &#123; *<span class="keyword">this</span> = num; &#125;  </span><br><span class="line">    Big_integer <span class="keyword">operator</span> = (<span class="type">const</span> <span class="type">char</span>* num)&#123;  </span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="built_in">sizeof</span>(d)); len = <span class="built_in">strlen</span>(num);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) d[i] = num[len<span class="number">-1</span>-i] - <span class="string">&#x27;0&#x27;</span>;  </span><br><span class="line">        <span class="built_in">clean</span>();  </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> = (<span class="type">int</span> num)&#123;  </span><br><span class="line">        <span class="type">char</span> s[<span class="number">10005</span>]; <span class="built_in">sprintf</span>(s, <span class="string">&quot;%d&quot;</span>, num);  </span><br><span class="line">        *<span class="keyword">this</span> = s;  </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Big_integer <span class="keyword">operator</span> + (<span class="type">const</span> Big_integer&amp; b)&#123;  </span><br><span class="line">        Big_integer c = *<span class="keyword">this</span>; <span class="type">int</span> i;  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; b.len; i++)&#123;  </span><br><span class="line">            c.d[i] += b.d[i];  </span><br><span class="line">            <span class="keyword">if</span> (c.d[i] &gt; <span class="number">9</span>) c.d[i]%=<span class="number">10</span>, c.d[i+<span class="number">1</span>]++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (c.d[i] &gt; <span class="number">9</span>) c.d[i++]%=<span class="number">10</span>, c.d[i]++;  </span><br><span class="line">        c.len = <span class="built_in">max</span>(len, b.len);  </span><br><span class="line">        <span class="keyword">if</span> (c.d[i] &amp;&amp; c.len &lt;= i) c.len = i+<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> - (<span class="type">const</span> Big_integer&amp; b)&#123;  </span><br><span class="line">        Big_integer c = *<span class="keyword">this</span>; <span class="type">int</span> i;  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; b.len; i++)&#123;  </span><br><span class="line">            c.d[i] -= b.d[i];  </span><br><span class="line">            <span class="keyword">if</span> (c.d[i] &lt; <span class="number">0</span>) c.d[i]+=<span class="number">10</span>, c.d[i+<span class="number">1</span>]--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (c.d[i] &lt; <span class="number">0</span>) c.d[i++]+=<span class="number">10</span>, c.d[i]--;  </span><br><span class="line">        c.<span class="built_in">clean</span>();  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> * (<span class="type">const</span> Big_integer&amp; b)<span class="type">const</span>&#123;  </span><br><span class="line">        <span class="type">int</span> i, j; Big_integer c; c.len = len + b.len;   </span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; b.len; j++) <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)   </span><br><span class="line">            c.d[i+j] += d[i] * b.d[j];  </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; c.len<span class="number">-1</span>; i++)  </span><br><span class="line">            c.d[i+<span class="number">1</span>] += c.d[i]/<span class="number">10</span>, c.d[i] %= <span class="number">10</span>;  </span><br><span class="line">        c.<span class="built_in">clean</span>();  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> / (<span class="type">const</span> Big_integer&amp; b)&#123;  </span><br><span class="line">        <span class="type">int</span> i, j;  </span><br><span class="line">        Big_integer c = *<span class="keyword">this</span>, a = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">        &#123;  </span><br><span class="line">            a = a*<span class="number">10</span> + d[i];  </span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) <span class="keyword">if</span> (a &lt; b*(j+<span class="number">1</span>)) <span class="keyword">break</span>;  </span><br><span class="line">            c.d[i] = j;  </span><br><span class="line">            a = a - b*j;  </span><br><span class="line">        &#125;  </span><br><span class="line">        c.<span class="built_in">clean</span>();  </span><br><span class="line">        <span class="keyword">return</span> c;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> % (<span class="type">const</span> Big_integer&amp; b)&#123;  </span><br><span class="line">        <span class="type">int</span> i, j;  </span><br><span class="line">        Big_integer a = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">        &#123;  </span><br><span class="line">            a = a*<span class="number">10</span> + d[i];  </span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) <span class="keyword">if</span> (a &lt; b*(j+<span class="number">1</span>)) <span class="keyword">break</span>;  </span><br><span class="line">            a = a - b*j;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> a;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    Big_integer <span class="keyword">operator</span> += (<span class="type">const</span> Big_integer&amp; b)&#123;  </span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> + b;  </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(len != b.len) <span class="keyword">return</span> len &lt; b.len;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)  </span><br><span class="line">            <span class="keyword">if</span>(d[i] != b.d[i]) <span class="keyword">return</span> d[i] &lt; b.d[i];  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span>;&#125;  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;<span class="keyword">return</span> !(b &lt; *<span class="keyword">this</span>);&#125;  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; b);&#125;  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;<span class="keyword">return</span> b &lt; *<span class="keyword">this</span> || *<span class="keyword">this</span> &lt; b;&#125;  </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Big_integer&amp; b) <span class="type">const</span>&#123;<span class="keyword">return</span> !(b &lt; *<span class="keyword">this</span>) &amp;&amp; !(b &gt; *<span class="keyword">this</span>);&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">()</span> <span class="type">const</span></span>&#123;  </span><br><span class="line">        <span class="type">char</span> s[maxn]=&#123;&#125;;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) s[len<span class="number">-1</span>-i] = d[i]+<span class="string">&#x27;0&#x27;</span>;  </span><br><span class="line">        <span class="keyword">return</span> s;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, Big_integer&amp; x)  </span><br><span class="line">&#123;  </span><br><span class="line">    string s;  </span><br><span class="line">    in &gt;&gt; s;  </span><br><span class="line">    x = s.<span class="built_in">c_str</span>();  </span><br><span class="line">    <span class="keyword">return</span> in;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, <span class="type">const</span> Big_integer&amp; x)  </span><br><span class="line">&#123;  </span><br><span class="line">    out &lt;&lt; x.<span class="built_in">str</span>();  </span><br><span class="line">    <span class="keyword">return</span> out;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BigInteger;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">use</span></span><br><span class="line">&#123;</span><br><span class="line">Big_integer a;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> use &amp;x)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; x.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">use data[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp; cnt);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">cin &gt;&gt; data[i - <span class="number">1</span>].a, data[i - <span class="number">1</span>].num = i;</span><br><span class="line"><span class="built_in">sort</span>(data, data + cnt);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, data[cnt - <span class="number">1</span>].num), cout &lt;&lt; data[cnt - <span class="number">1</span>].a;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分通常指的是二分查找，你还在为找不清数据范围而痛苦吗，快来试试下面的模板。温馨提示：使用二分之前，记得给数据排序哦。</p><p>模板一</p><p><strong>只要是往左找答案，就用第一个模板，mid不用加一，r=mid，l加一</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (q[mid] &gt;= x) r = mid;<span class="comment">//q[mid]&gt;=x 指的就是判断需要的条件</span></span><br><span class="line">           <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>模板二</p><p><strong>只要是往右找答案，就用第二个模板，mid要加一，l=mid，r要减一；</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="type">int</span> mid = l + r+<span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (q[mid] &gt;= x) l = mid;</span><br><span class="line">           <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="浮点二分"><a href="#浮点二分" class="headerlink" title="浮点二分"></a>浮点二分</h2><p>因为没有了整数相除会向下取整操作，因此浮点二分不需要考虑±1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(r-l&gt;<span class="number">1e-5</span>) <span class="comment">//需要一个精度保证</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid; <span class="comment">//或r=mid;</span></span><br><span class="line">    <span class="keyword">else</span> r=mid; <span class="comment">//或l=mid;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lower-bound-和upper-bound"><a href="#lower-bound-和upper-bound" class="headerlink" title="lower_bound( )和upper_bound( )"></a>lower_bound( )和upper_bound( )</h2><p>在从小到大的排序数组中，</p><p><code>lower_bound( begin,end,num)</code>：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p><code>upper_bound( begin,end,num)</code>：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>在从大到小的排序数组中，重载lower_bound()和upper_bound()</p><p><code>lower_bound( begin,end,num,greater&lt;type&gt;() )</code>:从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p><code>upper_bound( begin,end,num,greater&lt;type&gt;() )</code>:从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><h4 id="二分查找与二分答案有何区别"><a href="#二分查找与二分答案有何区别" class="headerlink" title="二分查找与二分答案有何区别?"></a>二分查找与二分答案有何区别?</h4><p>二分查找：在一个已知的有序数据集上进行二分地查找<br>二分答案：答案有一个区间，在这个区间中二分，直到找到最优答案</p><h4 id="如何判断一个题是不是用二分答案做的呢"><a href="#如何判断一个题是不是用二分答案做的呢" class="headerlink" title="如何判断一个题是不是用二分答案做的呢?"></a>如何判断一个题是不是用二分答案做的呢?</h4><blockquote><h6 id="1、答案在一个区间内（一般情况下，区间会很大，暴力超时）"><a href="#1、答案在一个区间内（一般情况下，区间会很大，暴力超时）" class="headerlink" title="1、答案在一个区间内（一般情况下，区间会很大，暴力超时）"></a>1、答案在一个区间内（一般情况下，区间会很大，暴力超时）</h6><h6 id="2、直接搜索不好搜，但是容易判断一个答案可行不可行"><a href="#2、直接搜索不好搜，但是容易判断一个答案可行不可行" class="headerlink" title="2、直接搜索不好搜，但是容易判断一个答案可行不可行"></a>2、直接搜索不好搜，但是容易判断一个答案可行不可行</h6><h6 id="3、该区间对题目具有单调性，即：在区间中的值越大或越小，题目中的某个量对应增加或减少。"><a href="#3、该区间对题目具有单调性，即：在区间中的值越大或越小，题目中的某个量对应增加或减少。" class="headerlink" title="3、该区间对题目具有单调性，即：在区间中的值越大或越小，题目中的某个量对应增加或减少。"></a>3、该区间对题目具有单调性，即：在区间中的值越大或越小，题目中的某个量对应增加或减少。</h6></blockquote><p><strong>此外，可能还会有一个典型的特征</strong>：<code>求...最大值的最小 、 求...最小值的最大。</code><br>1、<code>求...最大值的最小</code>，我们二分答案（即二分最大值）的时候，判断条件满足后，尽量让答案往前来（即：让r=mid），对应模板1；<br>2、同样，<code>求...最小值的最大</code>时，我们二分答案（即二分最小值）的时候，判断条件满足后，尽量让答案往后走（即：让l=mid），对应模板2；</p><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h2><script type="math/tex; mode=display">S_n=a_1+a_2+···+a_n</script><p>很显然如果我们要从左侧也就是<code>l</code>一直加到右侧也就是<code>r</code>，很显然需要从头到尾循环一遍，时间复杂度也就是<code>O(n)</code>。</p><p>而使用</p><script type="math/tex; mode=display">S_r-S_{l-1}</script><p>这样时间复杂度就是<code>O(1)</code></p><script type="math/tex; mode=display">一维前缀和\\S_i=a_1+a_2+···+a_i\\sum(L,R)=a_L+a_{L+1}+···+a_R=S_R-S_{R-1}</script><p>上模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">cout &lt;&lt; s[r] - s[l - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子矩阵的和（二维前缀和）"><a href="#子矩阵的和（二维前缀和）" class="headerlink" title="子矩阵的和（二维前缀和）"></a>子矩阵的和（二维前缀和）</h2><p><img src="https://img-blog.csdnimg.cn/20201214204543274.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p><a href="http://t.csdn.cn/PJJ2p看看这个人的博客，有详细解释">http://t.csdn.cn/PJJ2p看看这个人的博客，有详细解释</a></p><h1 id="DFS（深度优先搜索）"><a href="#DFS（深度优先搜索）" class="headerlink" title="DFS（深度优先搜索）"></a>DFS（深度优先搜索）</h1><p>简而言之，把每一个枝都走完，再走第二根。</p><p>注意回溯与恢复</p><p>下面是未剪枝（全排列也不涉及剪枝）的版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>, path[i]);</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//回溯</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i])</span><br><span class="line">&#123;</span><br><span class="line">path[u] = i;</span><br><span class="line">st[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">st[i] = <span class="literal">false</span>;<span class="comment">//恢复</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="next-permutation-全排列函数"><a href="#next-permutation-全排列函数" class="headerlink" title="next_permutation(全排列函数)"></a>next_permutation(全排列函数)</h2><p>引用头文件<code>&lt;algorithm&gt;</code></p><p>函数原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">next_permutation</span><span class="params">(iterator start,iterator end,cmp)</span><span class="comment">//cmp同样可以自定义</span></span></span><br></pre></td></tr></table></figure><p>当当前序列不存在下一个排列时，函数返回false，否则返回true</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> num[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        cout&lt;&lt;num[<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;num[<span class="number">1</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;num[<span class="number">2</span>]&lt;&lt;endl;  </span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(num,num+<span class="number">3</span>));  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="计算被2整除的次数"><a href="#计算被2整除的次数" class="headerlink" title="计算被2整除的次数"></a>计算被2整除的次数</h1><p>在二进制下，如果最靠右的一位为0，则这个数为偶数，因此，一个二进制数末尾0的个数即为这个数能被2整除的次数。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y&amp;-y;<span class="comment">//其结果就为被2整除的次数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>哈理工新生问题集锦</title>
      <link href="/2023/07/22/%E5%93%88%E7%90%86%E5%B7%A5%E6%96%B0%E7%94%9F%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
      <url>/2023/07/22/%E5%93%88%E7%90%86%E5%B7%A5%E6%96%B0%E7%94%9F%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-宿舍是上床下桌吗？"><a href="#Q-宿舍是上床下桌吗？" class="headerlink" title="Q: 宿舍是上床下桌吗？"></a>Q: 宿舍是上床下桌吗？</h2><ul><li>是</li></ul><h2 id="Q-宿舍人数如何？"><a href="#Q-宿舍人数如何？" class="headerlink" title="Q: 宿舍人数如何？"></a>Q: 宿舍人数如何？</h2><ul><li>阳面6人，阴面4人。实际体验下来（潮的时候都潮，但阴面夏天的时候会稍微凉快一点）</li></ul><h2 id="Q-教室和宿舍有没有空调？"><a href="#Q-教室和宿舍有没有空调？" class="headerlink" title="Q: 教室和宿舍有没有空调？"></a>Q: 教室和宿舍有没有空调？</h2><ul><li>没有</li></ul><h2 id="Q-有独立卫浴吗？没有独立浴室的话，澡堂离宿舍多远？"><a href="#Q-有独立卫浴吗？没有独立浴室的话，澡堂离宿舍多远？" class="headerlink" title="Q: 有独立卫浴吗？没有独立浴室的话，澡堂离宿舍多远？"></a>Q: 有独立卫浴吗？没有独立浴室的话，澡堂离宿舍多远？</h2><ul><li>没有，澡堂离宿舍不算太远，走路7、8分钟</li></ul><h2 id="Q-有早自习、晚自习吗？"><a href="#Q-有早自习、晚自习吗？" class="headerlink" title="Q: 有早自习、晚自习吗？"></a>Q: 有早自习、晚自习吗？</h2><ul><li>有晚自习晚六点到八点（大一），外语有早自习（大悲）</li></ul><h2 id="Q-有晨跑吗？"><a href="#Q-有晨跑吗？" class="headerlink" title="Q: 有晨跑吗？"></a>Q: 有晨跑吗？</h2><ul><li>有（大一）早6点半（早操和自习不要不去哦，可能会有一定的影响，建议问问自己的直系学长/姐）</li></ul><h2 id="Q-每学期跑步打卡的要求是多少公里，可以骑车吗？"><a href="#Q-每学期跑步打卡的要求是多少公里，可以骑车吗？" class="headerlink" title="Q: 每学期跑步打卡的要求是多少公里，可以骑车吗？"></a>Q: 每学期跑步打卡的要求是多少公里，可以骑车吗？</h2><ul><li>没有，可以骑车</li></ul><h2 id="Q-寒暑假放多久，每年小学期有多长？"><a href="#Q-寒暑假放多久，每年小学期有多长？" class="headerlink" title="Q: 寒暑假放多久，每年小学期有多长？"></a>Q: 寒暑假放多久，每年小学期有多长？</h2><ul><li>暑假一个半月，寒假时间长，没有小学期</li></ul><h2 id="Q-学校允许点外卖吗，取外卖的地方离宿舍楼多远？"><a href="#Q-学校允许点外卖吗，取外卖的地方离宿舍楼多远？" class="headerlink" title="Q: 学校允许点外卖吗，取外卖的地方离宿舍楼多远？"></a>Q: 学校允许点外卖吗，取外卖的地方离宿舍楼多远？</h2><ul><li>允许，就在宿舍楼旁边</li></ul><h2 id="Q-学校交通便利吗，有地铁吗，在市区吗，不在的话进城要多久？"><a href="#Q-学校交通便利吗，有地铁吗，在市区吗，不在的话进城要多久？" class="headerlink" title="Q: 学校交通便利吗，有地铁吗，在市区吗，不在的话进城要多久？"></a>Q: 学校交通便利吗，有地铁吗，在市区吗，不在的话进城要多久？</h2><ul><li>便利，没有地铁，出门有公交，离市区不远。</li></ul><h2 id="Q-宿舍楼有洗衣机吗？"><a href="#Q-宿舍楼有洗衣机吗？" class="headerlink" title="Q: 宿舍楼有洗衣机吗？"></a>Q: 宿舍楼有洗衣机吗？</h2><ul><li>有，一层一个，记得备好消毒液/粉。</li></ul><h2 id="Q-校园网怎么样？"><a href="#Q-校园网怎么样？" class="headerlink" title="Q: 校园网怎么样？"></a>Q: 校园网怎么样？</h2><ul><li>有校园卡（手机卡，与之后的实体卡不同），但就是一个流量包，速度还算凑活，校园网一般在机房、教室或者实验室里会用的到。</li></ul><h2 id="Q-每天断电断网吗，几点开始断？"><a href="#Q-每天断电断网吗，几点开始断？" class="headerlink" title="Q: 每天断电断网吗，几点开始断？"></a>Q: 每天断电断网吗，几点开始断？</h2><ul><li>断电，每天十点半到次日五点半</li></ul><h2 id="Q-食堂价格贵吗？"><a href="#Q-食堂价格贵吗？" class="headerlink" title="Q: 食堂价格贵吗？"></a>Q: 食堂价格贵吗？</h2><ul><li>还算正常</li></ul><h2 id="Q-洗澡热水供应时间？"><a href="#Q-洗澡热水供应时间？" class="headerlink" title="Q: 洗澡热水供应时间？"></a>Q: 洗澡热水供应时间？</h2><ul><li>澡堂子下午两点半到八点半开门，只要开门就有热水</li></ul><h2 id="Q-校园内可以骑电瓶车吗，电池在哪能充电？"><a href="#Q-校园内可以骑电瓶车吗，电池在哪能充电？" class="headerlink" title="Q: 校园内可以骑电瓶车吗，电池在哪能充电？"></a>Q: 校园内可以骑电瓶车吗，电池在哪能充电？</h2><ul><li>可以，只能在宿舍充电</li></ul><h2 id="Q-宿舍限电情况？"><a href="#Q-宿舍限电情况？" class="headerlink" title="Q: 宿舍限电情况？"></a>Q: 宿舍限电情况？</h2><ul><li>1000w，要看寝室运气，我（写这个文档的）跳过几次，基本就是全寝电脑开着，用个吹风机就跳</li></ul><h2 id="Q-通宵自习有去处吗？"><a href="#Q-通宵自习有去处吗？" class="headerlink" title="Q: 通宵自习有去处吗？"></a>Q: 通宵自习有去处吗？</h2><ul><li>有，每个寝室楼都有一个24小时不断电自习室</li></ul><h2 id="Q-大一能带电脑吗？"><a href="#Q-大一能带电脑吗？" class="headerlink" title="Q: 大一能带电脑吗？"></a>Q: 大一能带电脑吗？</h2><ul><li>能</li></ul><h2 id="Q-学校里面用什么卡，饭堂怎样消费？"><a href="#Q-学校里面用什么卡，饭堂怎样消费？" class="headerlink" title="Q: 学校里面用什么卡，饭堂怎样消费？"></a>Q: 学校里面用什么卡，饭堂怎样消费？</h2><ul><li>校园卡，饭堂也用校园卡</li></ul><h2 id="Q-学校会给学生发银行卡吗？"><a href="#Q-学校会给学生发银行卡吗？" class="headerlink" title="Q: 学校会给学生发银行卡吗？"></a>Q: 学校会给学生发银行卡吗？</h2><ul><li>会(在开学第一天，会在广场上统一办理)</li></ul><h2 id="Q-学校的超市怎么样？"><a href="#Q-学校的超市怎么样？" class="headerlink" title="Q: 学校的超市怎么样？"></a>Q: 学校的超市怎么样？</h2><ul><li>家家悦超市，与外面的价格一致</li></ul><h2 id="Q-学校的收发快递政策怎么样？"><a href="#Q-学校的收发快递政策怎么样？" class="headerlink" title="Q: 学校的收发快递政策怎么样？"></a>Q: 学校的收发快递政策怎么样？</h2><ul><li>挺方便的，顺丰有单独的点位，其他的快递（除极兔外）都会在丰巢或者学校的玻璃屋内，上述提到的几个都在一个位置，且离宿舍楼较近。极兔不建议使用，取快递会在校外挺远的位置。</li></ul><h2 id="Q-学校里面的共享单车数目与种类如何？"><a href="#Q-学校里面的共享单车数目与种类如何？" class="headerlink" title="Q: 学校里面的共享单车数目与种类如何？"></a>Q: 学校里面的共享单车数目与种类如何？</h2><ul><li>校内没有共享单车，但是学校南门有共享单车。</li></ul><h2 id="Q-现阶段学校的门禁情况如何？"><a href="#Q-现阶段学校的门禁情况如何？" class="headerlink" title="Q: 现阶段学校的门禁情况如何？"></a>Q: 现阶段学校的门禁情况如何？</h2><ul><li>早五点到十点可以随便进出</li></ul><h2 id="Q-宿舍晚上查寝吗，封寝吗，晚归能回去吗？"><a href="#Q-宿舍晚上查寝吗，封寝吗，晚归能回去吗？" class="headerlink" title="Q: 宿舍晚上查寝吗，封寝吗，晚归能回去吗？"></a>Q: 宿舍晚上查寝吗，封寝吗，晚归能回去吗？</h2><ul><li>大一学生会晚上查寝，宿管白天抽查，大二一般就只有宿管查寝（频率很低），十点封寝，晚归一般能回去，但是要看阿姨脸色</li></ul><h2 id="Q-能转专业嘛？"><a href="#Q-能转专业嘛？" class="headerlink" title="Q: 能转专业嘛？"></a>Q: 能转专业嘛？</h2><ul><li>可以的，一般专业前几名，可以找导员申请转专业，但是艺术与软工是不允许往外转的，别的系可以往转除了艺术系的专业转哦。</li></ul><h2 id="Q-军训几天啊？"><a href="#Q-军训几天啊？" class="headerlink" title="Q: 军训几天啊？"></a>Q: 军训几天啊？</h2><ul><li>10天</li></ul><h2 id="Q-消费高吗？"><a href="#Q-消费高吗？" class="headerlink" title="Q: 消费高吗？"></a>Q: 消费高吗？</h2><ul><li>其实不算很高，一般吃的话或者买东西都在九龙城，和万达差不多。</li></ul><h2 id="Q-网络有些不明白？"><a href="#Q-网络有些不明白？" class="headerlink" title="Q: 网络有些不明白？"></a>Q: 网络有些不明白？</h2><ul><li>网络的问题是这样，分学校自己的校园网，和运营商的校园卡。<br>校园网一般会在校园的机房，教室的多媒体，或者在实验楼里用自己的设备连wifi用的。会有页面弹窗，用自己的账号密码登录<br>校园卡是运营商自己的流量包，本质就是一张电话卡，之后办理校园卡后，开学可以免费去对应的运行商（校内站点）办理宽带，宽带不用担心蹭网，它是无限的，并且每个床位对应一个宽带口，一般可以给路由器，或者电脑使用，一般推荐用一个宽带连一个路由器，这样你们寝室就能有wifi了。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（四）图</title>
      <link href="/2023/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9B%BE/"/>
      <url>/2023/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="图-Graph"><a href="#图-Graph" class="headerlink" title="图(Graph)"></a>图(Graph)</h1><p>图也是由多个结点连接而成的，但是一个结点可以同时连接多个其他结点，多个结点也可以同时指向一个结点，跟我们之前讲解的树结构不同，它是一种多对多的关系：</p><p><img src="https://fast.itbaima.net/2022/08/21/zGfXODMAVc7aH34.png" alt=""></p><p>它比树形结构更加复杂，没有明确的层次关系，结点与结点之间的连接关系更加自由，图结构是<strong>任意两个数据对象之间都有可能存在某种特定关系</strong>的数据结构。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>在了解之前，最好优先学习一下离散数学。</strong></p><blockquote><p>如果离散数学已经有一定基础的话，本段可以跳过。</p></blockquote><p>图一般由两个集合共同构成，一个是非空但是有限的顶点集合<strong>V（Vertex）</strong>，另一个是描述顶点之间连接关系的边集合<strong>E</strong>（<strong>Edge</strong>，边集合可以为空集，比如只有一个顶点的），一个图实际上正是由这些结点（顶点）和对应的边组成的。因此，图可以表示为：$G=<V,E>$</p><p>学过离散数学的我们可以很清楚的知道。一个图我们可以表示为，集合$V={A,B,C,D,E}$，集合$E=\{(A,B),(B,C),(C,D),(D,A),(C,A)\}$，图有两种基本型式，<strong>有向图</strong>和<strong>无向图</strong>。</p><p>每个<strong>结点的度</strong>就是<strong>与其连接的边数</strong>，每条边是可以包含权值的，当前也可以不包含。</p><p> 当然我们也可以将其表示为有向图，集合$V={A,B,C,D,E}$，集合$E=\{(A,B),(B,C),(C,D),(D,A),(C,A)\}$注意有向图的边使用尖括号&lt;&gt;表示。比如上面这个有向图，那么就长这样：</p><p><img src="https://fast.itbaima.net/2022/08/22/V9BuJt72QH5SEb3.png" alt=""></p><p>如果是无向图的一条边(A,B)，那么就称A、B互为<strong>邻接点</strong>；如果是有向图的一条边<A,B>，那么就称起点A邻接到终点B。有向图的每个结点分为<strong>入度和出度</strong>，其中<strong>入度</strong>就是与顶点相连且指向该顶点的边的个数，<strong>出度</strong>就是从该顶点指向邻接顶点的边的个数。</p><p>只要我们的图中不出现<strong>自回路边</strong>或是<strong>重边</strong>，那么我们就可以称这个图为<strong>简单图</strong>，比如下面两张图都是简单图。而下面的则是典型的非简单图了，其中图一出现了自回路，而图二出现了重边：<img src="https://fast.itbaima.net/2022/08/22/JSr2lIKfZ7X9OeR.png" alt=""></p><p>如果在一个无向图中，任意两个顶点都有一条边相连，则称该图为<strong>无向完全图</strong>：</p><p><img src="https://fast.itbaima.net/2022/08/22/G6tJfjZpaNsx5gE.png" alt=""></p><p>同样的，在一个有向图中，如果任意两顶点之间都有由方向互为相反的两条边连接，则称该图为<strong>有向完全图</strong>：</p><p><img src="https://fast.itbaima.net/2022/08/22/obs24zGhCKmS6Fu.png" alt=""></p><p>图通过边将顶点相连，这样我们就可以从一个顶点经过某条路径到达其他顶点了，比如我们现在想要从下面的V5点到达V1点：</p><p><img src="https://fast.itbaima.net/2022/08/22/1hTPvxCscLg2SKy.png" alt=""></p><p>那么我们可以有很多种路线，比如经过V2到达，经过V3到达等：</p><p><img src="https://fast.itbaima.net/2022/08/22/dsMRoAJiBxVCTju.png" alt=""></p><p>在一个无向图中，如果从一个顶点到另一个顶点有路径，那么就称这两个顶点是连通的。可以看到，要从V5到达V1我们可以有很多种选择，从V5可以到达V1（当然也可以反着来），所以，我们称V5和V1连通的。特别的，如果图中任意两点都是连通的，那么我们就称这个图为<strong>连通图</strong>。对于有向图，如果图中任意顶点A和B，既有从A到B的路径，也有B到A的路径，则称该有向图是<strong>强连通图</strong>。</p><p>对于图$G=(V,E)$和$G’=(V’,E’)$，若满足$V’$是$V$的子集，并且$E’$是$E$的自己，则称$G’$是$G$的子图。</p><p><img src="https://fast.itbaima.net/2022/08/22/5hLlIVNf1o4BRuM.png" alt=""></p><p>其中右边的图就满足上述性质，所以说右边的图是左边图的子图。</p><p>无向图的极大连通子图称为<strong>连通分量</strong>，有向图的极大连通子图称为<strong>强连通分量</strong>。那么什么是极大连通子图呢？首先连通子图就是原图的子图，并且子图也是连通图，同时应该具有最大的顶点数，即再加入原图中的其他顶点会导致子图不连通，拥有极大顶点数的同时也要包含依附于这点顶点所有的边才行，比如：</p><p><img src="https://fast.itbaima.net/2022/08/22/jlUfrcTXNPYGvOR.png" alt=""></p><p>可以看到右侧图1、2、3都是左图的子图，但是它们并不都是原图的连通分量，首先我们来看图1，它也是一个连通图，并且包含极大顶点数和所有的边（也就是原图内部的这一块）所以说它是连通分量，我们接着来看图2，它虽然也是连通图，但是并没有包含极大顶点数（最多可以吧D也给加上，但是这里没加）所以说并不是。最后来看图3，它也是连通图，并且包含了极大顶点数和边，所以说是连通分量。</p><ul><li>原图为连通图，那么连通分量就是其本身，有且仅有一个。</li><li>原图为非连通图，那么连通分量会有多个。</li></ul><p>对于极小连通子图，我们会在后面的生成树部分进行讲解。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（三）-- 树</title>
      <link href="/2023/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E6%A0%91/"/>
      <url>/2023/05/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h1><h2 id="树与森林"><a href="#树与森林" class="headerlink" title="树与森林"></a>树与森林</h2><p>树时一种新的数据结构，像一颗树一样，有很多的分枝，并且会不一段延伸。<del>只要不断前进，道路就会不断延伸。</del></p><h3 id="树结构介绍-Tree"><a href="#树结构介绍-Tree" class="headerlink" title="树结构介绍(Tree)"></a>树结构介绍(Tree)</h3><p><img src="https://fast.itbaima.net/2022/08/01/aoBjrR5bPqWzCel.png" alt=""></p><p>可以看到，现在一个结点下面可能会连接多个节点，并不断延伸，就像树枝一样，每个结点都有可能是一个分支点，延伸出多个分支，从位于最上方的结点开始不断向下，而这种数据结构，我们就称为<strong>树</strong>（Tree）注意分支只能向后单独延伸，之后就分道扬镳了，<strong>不能与其他分支上的结点相交！</strong></p><ul><li><strong>根节点(Root)：</strong>位于最上方的结点，整棵树都是从这里开始延伸出去的</li><li><strong>度(Degree)：</strong>每个节点连接的子节点的数目（<strong>分支的数目</strong>）。而<strong>各个结点</strong>中度的<strong>最大值</strong>称为<strong>树</strong>的度。</li><li><strong>子树(SubTree)：</strong>每个结点所延伸的子结点，都可以称为是一个子树。比如结点<code>B</code>及其之后延伸的所有分支合在一起，就是一棵<code>A</code>的子树。</li><li><strong>层次(Level)：</strong>按照从上到下的顺序，树的根节点为<code>1</code>，每向下一层<code>+1</code>，因此<code>G</code>的层次就为<code>3</code>。</li><li><strong>深度(Depth)：</strong>整棵树中所有结点的最大层次，就是这棵树的深度。本棵树的深度就为<code>4</code>。</li></ul><p>因为树成长之后会显得错综复杂，所以要规定一下，结点与结点之间的称呼。</p><ul><li><strong>子结点(Child)：</strong>与当前节点直接向下相连的结点。</li><li><strong>父结点/双亲结点(Parent)：</strong>与当前节点直接向上相连的结点。</li><li><strong>叶子结点(Leaf)：</strong>当前节点没有任何子结点。</li><li><strong>兄弟节点(Sibing)：</strong>两个结点的父结点相同。</li><li><strong>祖先节点(Ancestor)：</strong>从根结点开始一直到当前结点，该路径上的所有结点，均为当前结点的祖先结点。</li></ul><h3 id="森林-Forest"><a href="#森林-Forest" class="headerlink" title="森林(Forest)"></a>森林(Forest)</h3><p>森林其实很好理解，一片森林肯定是是由很多棵树构成的，比如下面的三棵树：</p><p><img src="https://fast.itbaima.net/2022/08/01/VnblyMgQXkC6cBu.png" alt=""></p><p>它们共同组成了一片森林，因此，m（m≥0）棵树的集合我们称为<strong>森林</strong>。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树，顾名思义，只有两个叉的树。也就是它各个结点的度，最大只能为2。</p><p><img src="https://fast.itbaima.net/2022/08/01/QGLfnYWFby37deP.png" alt=""></p><p>并且二叉树任何结点的子树是有左右之分的，不能颠倒顺序，比如A结点左边的子树，称为左子树，右边的子树称为右子树。</p><p>二叉树有5种基本形态，分别是：</p><p><img src="https://fast.itbaima.net/2022/08/01/8ncvzo6aLem14ju.png" alt=""></p><p>当然，对于某些二叉树我们有特别的称呼，比如，在一棵二叉树中，所有分支结点都存在左子树和右子树，且叶子结点都在同一层：</p><p><img src="https://fast.itbaima.net/2022/08/01/btfjlJhDuWrSXYi.png" alt=""></p><p>这样的二叉树我们称为<strong>满二叉树</strong>，可以看到整棵树都是很饱满的，<strong>没有出现任何度为<code>1</code>的结点</strong>，当然，还有一种特殊情况：</p><p><img src="https://fast.itbaima.net/2022/08/01/QGLfnYWFby37deP.png" alt=""></p><p>可以看到<strong>只有最后一层有空缺</strong>，并且所有的叶子结点是按照从左往右的顺序排列的，这样的二叉树我们一般称其为<strong>完全二叉树</strong>，所以，一棵满二叉树，一定是一棵完全二叉树。</p><h3 id="树和森林的转换"><a href="#树和森林的转换" class="headerlink" title="树和森林的转换"></a>树和森林的转换</h3><p>二叉树和树以及森林之间是可以相互转换的。</p><h4 id="树转二叉树"><a href="#树转二叉树" class="headerlink" title="树转二叉树"></a>树转二叉树</h4><h5 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h5><ol><li>最左边的子结点 -&gt; 上级的左子树</li><li>该层剩下的兄弟结点-&gt;作为刚才左子树的右结点</li></ol><p>这里有点绕，直接看下面的详解吧。</p><p>我们以下面的这棵树为例：</p><p><img src="https://fast.itbaima.net/2022/08/06/y51pTzhrQV3GPCJ.png" alt=""></p><p>我们优先从左边开始看，B、F、G都是A的子结点，根据上面的规律，我们将B作为左子树：</p><p><img src="https://fast.itbaima.net/2022/08/06/g4XfmiQHaOy6JhG.png" alt=""></p><p>接着继续从左往右看，由于F是B的兄弟结点，那么根据规律，F作为B的右子树：</p><p><img src="https://fast.itbaima.net/2022/08/06/6wqO4iErjQpyKzP.png" alt=""></p><p>接着是G，G是F的兄弟结点，那么G继续作为F的右子树：</p><p><img src="https://fast.itbaima.net/2022/08/06/DfBsxVHlSotn6I3.png" alt=""></p><p>我们接着来看第三排，依然是从左往右，C是B的子节点，所以C作为B的左子树：</p><p><img src="https://fast.itbaima.net/2022/08/06/93zFJGyx2SBLHC4.png" alt=""></p><p>接着，D是C的兄弟节点，那么D就作为C的右子树了：</p><p><img src="https://fast.itbaima.net/2022/08/06/YO5zf2TVHqBdnX6.png" alt=""></p><p>此时还有一个H结点，它是G的子结点，所以直接作为G的左子树：</p><p><img src="https://fast.itbaima.net/2022/08/06/oHcAM6d2SFrveaE.png" alt=""></p><p>现在只剩下最后一排了，E是D的子结点，K是H的子结点，所以最后就像这样了：</p><p><img src="https://fast.itbaima.net/2022/08/06/6JxYP2CXSyZdGa4.png" alt=""></p><p>按照规律，我们就将一棵树转换为了二叉树。</p><h5 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h5><p>当然还有一种更简单的方法，我们可以直接将所有的兄弟结点连起来（橙色横线）：</p><p><img src="https://fast.itbaima.net/2022/08/07/OSZ71J6CVEzeNiW.png" alt=""></p><p>接着擦掉所有结点除了最左边结点以外的连线：</p><p><img src="https://fast.itbaima.net/2022/08/07/y62Z3UlaWdemI7v.png" alt=""></p><p>所有的黑色连线偏向左边，橙色连线偏向右边：</p><p><img src="https://fast.itbaima.net/2022/08/07/yzA2uLqhYDnbZcJ.png" alt=""></p><p>效果是一样的，这两种方式都可以，你觉得哪一种简单就使用哪一种就行了。我们会发现，无论一棵树长成啥样，转换为二叉树后，<strong>根节点一定没有右子树</strong>。</p><p><strong>思考：</strong>那二叉树咋变回普通的树呢？实际上我们只需要反推回去就行了。</p><h4 id="二叉树转森林"><a href="#二叉树转森林" class="headerlink" title="二叉树转森林"></a>二叉树转森林</h4><p>那么森林呢，森林如何转换为一棵二叉树呢？其实很简单：</p><p><img src="https://fast.itbaima.net/2022/08/08/QCIaYTcEv2NO47G.png" alt=""></p><p>首先我们还是按照二叉树转换为树的规则，将森林中所有树转换为二叉树，接着我们只需要依次连接即可：</p><p><img src="https://fast.itbaima.net/2022/08/08/O3xnhv85WLPzJpq.png" alt=""></p><p>注意连接每一棵树的时候，一律从根结点的右边开始，不断向右连接。</p><p>我们发现，相比树转换为二叉树，森林转换为二叉树之后，根节点就存在右子树了，<strong>右子树连接的都是森林</strong>中其他的树。</p><p><strong>思考：</strong>现在有一棵二叉树，我们想要转回去，我们怎么知道到底是将其转换为森林还是转换为树呢？</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>由于二叉树结构特殊，我们可以总结出以下的五个性质：</p><ul><li><p><strong>性质一：</strong>对于一棵二叉树，第<code>i</code>层的最大结点数量为 $2^{i-1}$个，比如二叉树的第一层只有一个根结点，也就是 $2^0=1$ ，而二叉树的第三层可以有 $2^2=4$个结点。</p></li><li><p><strong>性质二：</strong>对于一棵深度为<code>k</code>的二叉树，可以具有的最大结点数量为：</p><script type="math/tex; mode=display">n=2^0+2^1+2^2+...+2^{k-1}</script><p>我们发现，实际上每一层的结点数量，组成了一个等比数列，公比<code>q</code>为<code>2</code>，结合等比数列求和公式，我们可以将其简化为：</p><script type="math/tex; mode=display">S_{n}=\frac{a_{1} \times\left(1-q^{n}\right)}{1-q}=\frac{1 \times\left(1-2^{k}\right)}{1-2}=-\left(1-2^{k}\right)=2^{k}-1</script><p>所以一棵深度为<code>k</code>的二叉树最大结点数量为 $n=2^k-1$，顺便得出，结点的边数为 $E=n-1$。</p></li><li><p><strong>性质三：</strong>假设一棵二叉树中度为0、1、2的结点数量分别为$n_1$、$n_2$、$n_3$，由于一棵二叉树中只有这三种类型的结点，那么可以直接得到结点总数：</p><script type="math/tex; mode=display">n=n_0+n_1+n_2</script><p>我们不妨换一个思路，我们从二叉树的边数上考虑，因为每个结点有且仅有一条边与其父结点相连，那么边数之和就可以表示为：</p><script type="math/tex; mode=display">E=n_1+2n_2</script><p>度为1的结点有一条边，度为2的结点有两条边，度为0的结点没有，加在一起就是整棵二叉树的边数之和，结合我们在<strong>性质二</strong>中推导的结果，可以得到另一种计算结点总数的方式：</p><script type="math/tex; mode=display">E=n-1=n_1+2n_2</script><script type="math/tex; mode=display">n=n_1+2n_2+1</script><p>再结合我们第一个公式：</p><script type="math/tex; mode=display">n=n_0+n_1+n_2=n_1+2n_2+1</script></li></ul><p>  综上，对于任何一棵二叉树，如果其叶子结点个数为 $n_0$ ，度为2的结点个数为 $n_2$ ，那么两者满足以下公式：</p><script type="math/tex; mode=display">  n_0=n_2+1</script><p>  <em>（性质三的推导过程比较复杂，如果觉得麻烦推荐直接记忆）</em></p><ul><li><p><strong>性质四：</strong>完全二叉树除了最后一层有空缺外，其他层数都是饱满的，假设这棵二叉树为满二叉树，那么根据我们前面得到的性质，假设层数为<code>k</code>，那么结点数量为：$n=2^k-1$ ，根据完全二叉树的性质，最后一层可以满可以不满，那么一棵完全二叉树结点数<code>n</code>满足：</p><script type="math/tex; mode=display">2^{k-1}-1<n\le2^k-1</script><p>因为<code>n</code>肯定是一个整数，那么可以写为：</p><script type="math/tex; mode=display">2^{k-1}\le n\le2^k-1</script><p>现在我们只看左边的不等式，我们对不等式两边同时取对数，得到：</p><script type="math/tex; mode=display">k-1\le \log_{2}{n}</script><p>综上所述，一棵具有<code>n</code>个结点的完全二叉树深度为 $k=\left \lfloor \log_{2}{n} \right \rfloor+1$ 。</p><p><em>（性质四的推导过程比较复杂，如果觉得麻烦推荐直接记忆）</em></p></li><li><p><strong>性质五：</strong>一颗有<code>n</code>个结点的完全二叉树，由性质四得到深度为 $k=\left \lfloor \log_{2}{n} \right \rfloor+1$ 现在对于任意一个结点<code>i</code>，结点的顺序为从上往下，从左往右：</p><ul><li>对于一个拥有左右孩子的结点来说，其左孩子为<code>2i</code>，右孩子为<code>2i + 1</code>。</li><li>如果<code>i = 1</code>，那么此结点为二叉树的根结点，如果<code>i &gt; 1</code>，那么其父结点就是 $\left \lfloor i/2\right \rfloor$，比如第3个结点的父结点为第1个节点，也就是根结点。</li><li>如果<code>2i &gt; n</code>，则结点<code>i</code>没有左孩子，比如下面图中的二叉树，n为5，假设此时<code>i = 3</code>，那么<code>2i = 6 &gt; n = 5</code> 说明第三个结点没有左子树。</li><li>如果<code>2i + 1 &gt; n</code>，则结点<code>i</code>没有右孩子。</li></ul></li></ul><p><img src="https://fast.itbaima.net/2022/08/05/uan6A3ZRLykt289.png" alt=""></p><p>以上五条二叉树的性质一般是笔试重点内容，还请务必牢记，如果觉得推导过程比较麻烦，推荐直接记忆结论。</p><h3 id="二叉树的简单构建"><a href="#二叉树的简单构建" class="headerlink" title="二叉树的简单构建"></a>二叉树的简单构建</h3><p>前面我们介绍了二叉树的几个重要性质，那么现在我们就来尝试在程序中表示和使用一棵二叉树。</p><p>二叉树的存储形式也可以使用我们前面的两种方式，一种是使用数组进行存放，还有一种就是使用链式结构，只不过之前链式结构需要强化一下才可以表示为二叉树。</p><p>首先我们来看数组形式的表示方式，利用前面所推导的性质五，我们可以按照以下顺序进行存放：</p><p><img src="https://fast.itbaima.net/2022/08/05/uan6A3ZRLykt289.png" alt=""></p><p>这颗二叉树的顺序存储：</p><p><img src="https://fast.itbaima.net/2022/08/06/jTtvWahxI9VUKuG.png" alt=""></p><p>从左往右，编号<code>i</code>从1开始，比如现在我们需要获取A的右孩子，那么就需要根据性质五进行计算，因为右孩子为<code>2i + 1</code>，所以A的右边孩子的编号就是3，也就是结点C。</p><p>这种表示形式使用起来并不方便，而且存在大量的计算，所以说我们只做了解即可，我们的重点是下面的链式存储方式。</p><p>我们在前面使用链表的时候，每个结点不仅存放对应的数据，而且会存放一个指向下一个结点的指针：</p><p><img src="https://fast.itbaima.net/2022/07/23/ruemiRQplVy7q9s.png" alt="">而二叉树也可以使用这样的链式存储形式，只不过现在一个结点需要存放一个指向左子树的指针和一个指向右子树的指针了：</p><p><img src="https://fast.itbaima.net/2022/08/06/H9MqkghmAjFJnuO.png" alt=""></p><p>通过这种方式，我们就可以通过连接不同的结点形成一颗二叉树了，这样也更便于我们去理解它，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> element;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">char</span> value) : <span class="built_in">element</span>(value), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode* a = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    TreeNode* b = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    TreeNode* c = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    TreeNode* d = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">    TreeNode* e = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">    TreeNode* f = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    a-&gt;left = b;</span><br><span class="line">    a-&gt;right = c;</span><br><span class="line">    b-&gt;left = d;</span><br><span class="line">    b-&gt;right = e;</span><br><span class="line">    c-&gt;right = f;</span><br><span class="line">    c-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">    d-&gt;left = e-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">    e-&gt;left = e-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">    f-&gt;left = f-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里进行其他操作...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="keyword">delete</span> d;</span><br><span class="line">    <span class="keyword">delete</span> e;</span><br><span class="line">    <span class="keyword">delete</span> f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://fast.itbaima.net/2022/08/05/uan6A3ZRLykt289.png" alt=""></p><h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><p>前面我们通过使用链式结构，成功构建出了一棵二叉树，接着我们来看看如何遍历一棵二叉树，也就是说我们想要访问二叉树的每一个结点，由于树形结构特殊，遍历顺序并不唯一，所以一共有四种访问方式：<strong>前序遍历、中序遍历、后序遍历、层序遍历。</strong>不同的访问方式输出都结点顺序也不同。</p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>首先我们来看最简单的前序遍历：</p><p><img src="https://fast.itbaima.net/2022/08/06/G6ujstSVZ2XWJLE.png" alt=""></p><p>前序遍历是一种勇往直前的态度，走到哪就遍历到那里，先走左边再走右边，比如上面的这个图，首先会从根节点开始：</p><p><img src="https://fast.itbaima.net/2022/08/06/qCFMosHtujEZ3U6.png" alt=""></p><p>从A开始，先左后右，那么下一个就是B，然后继续走左边，是D，现在ABD走完之后，B的左边结束了，那么就要开始B的右边了，所以下一个是E，E结束之后，现在A的左子树已经全部遍历完成了，然后就是右边，接着就是C，C没有左子树了，那么只能走右边了，最后输出F，所以上面这个二叉树的前序遍历结果为：ABDECF</p><ol><li>打印根节点</li><li>前序遍历左子树</li><li>前序遍历右子树</li></ol><p>我们不难发现规律，整棵二叉树（包括子树）的根节点一定是出现在最前面的，比如A在最前面，A的左子树根结点B也是在最前面的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; element&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            left-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            right-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">    a-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgTree01</p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>中序遍历在顺序上与前序遍历不同，前序遍历是走到哪就打印到哪，而<strong>中序遍历需要先完成整个左子树的遍历后再打印，然后再遍历其右子树</strong>。</p><p>我们还是以上面的二叉树为例：</p><p><img src="https://fast.itbaima.net/2022/08/06/W6Yb5M92gQApNJa.png" alt=""></p><p>首先需要先不断遍历左子树，走到最底部，但是沿途并不进行打印，而是到底之后，再打印，所以第一个打印的是D，接着由于没有右子树，所以我们回到B，此时再打印B，然后再去看B的右结点E，由于没有左子树和右子树了，所以直接打印E，左边遍历完成，接着回到A，打印A，然后对A的右子树重复上述操作。所以说遍历的基本规则还是一样的，只是打印值的时机发生了改变。</p><ol><li>中序遍历左子树</li><li>打印结点</li><li>中序遍历右子树</li></ol><p>所以这棵二叉树的中序遍历结果为：DBEACF，我们可以发现一个规律，就是在某个结点的左子树中所有结点，其中序遍历结果也是按照这样的规律排列的，比如A的左子树中所有结点，中序遍历结果中全部都在A的左边，右子树中所有的结点，全部都在A的右边（这个规律很关键，后面在做一些算法题时会用到）</p><p>那么怎么才能将打印调整到左子树全部遍历结束之后呢？其实很简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">inOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            left-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            right-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    a-&gt;<span class="built_in">inOrder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgTree02</p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历继续将打印的时机延后，需要等待左右子树全部遍历完成，才会去进行打印。</p><p><img src="https://fast.itbaima.net/2022/08/06/YE2rODdqpCInUa9.png" alt=""></p><p>首先还是一路向左，到达结点D，此时结点D没有左子树了，接着看结点D还有没有右子树，发现也没有，左右子树全部遍历完成，那么此时再打印D，同样的，D完事之后就回到B了，此时接着看B的右子树，发现有结点E，重复上述操作，E也打印出来了，接着B的左右子树全部OK，那么再打印B，接着A的左子树就完事了，现在回到A，看到A的右子树，继续重复上述步骤，当A的右子树也遍历结束后，最后再打印A结点。</p><ol><li>后序遍历左子树</li><li>后序遍历右子树</li><li>打印结点</li></ol><p>所以最后的遍历顺序为：DEBFCA，不难发现，整棵二叉树（包括子树）<strong>根结点一定是在后面的</strong>，比如A在所有的结点的后面，B在其子节点D、E的后面，这一点恰恰和前序遍历相反（注意不是得到的结果相反，是规律相反）</p><p>所以，按照这个思路，我们来编写一下后序遍历：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            left-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            right-&gt;<span class="built_in">preOrder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a-&gt;<span class="built_in">postOrder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgTree03</p><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><p>最后我们来看层序遍历，实际上这种遍历方式是我们人脑最容易理解的，它是按照每一层在进行遍历：</p><p><img src="https://fast.itbaima.net/2022/08/07/ywF6r9MU1JSPIge.png" alt=""></p><p>层序遍历实际上就是按照从上往下每一层，从左到右的顺序打印每个结点，比如上面的这棵二叉树，那么层序遍历的结果就是：ABCDEF，像这样一层一层的挨个输出。</p><p>虽然理解起来比较简单，但是如果让你编程写出来，该咋搞？是不是感觉有点无从下手？</p><p>我们可以利用队列来实现层序遍历，首先将根结点存入队列中，接着循环执行以下步骤：</p><ul><li>进行出队操作，得到一个结点，并打印结点的值。</li><li>将此结点的左右孩子结点依次入队。</li></ul><p>不断重复以上步骤，直到队列为空。</p><p>我们来分析一下，首先肯定一开始A在里面：</p><p><img src="https://fast.itbaima.net/2022/08/07/ZsNpeVUivEjCymt.png" alt=""></p><p>接着开始不断重复上面的步骤，首先是将队首元素出队，打印A，然后将A的左右孩子依次入队：</p><p><img src="https://fast.itbaima.net/2022/08/07/v8yXWNato3sfeUn.png" alt=""></p><p>现在队列中有B、C两个结点，继续重复上述操作，B先出队，打印B，然后将B的左右孩子依次入队：</p><p><img src="https://fast.itbaima.net/2022/08/07/Qkprfi5RhAXP7Cd.png" alt=""></p><p>现在队列中有C、D、E这三个结点，继续重复，C出队并打印，然后将F入队：</p><p><img src="https://fast.itbaima.net/2022/08/07/MxQTArlWK2gDjqi.png" alt=""></p><p>我们发现，这个过程中，打印的顺序正好就是我们层序遍历的顺序，所以说队列还是非常有用的。</p><p>那么现在我们就来上代码吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        queue&lt;TreeNode*&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* curr = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            cout &lt;&lt; curr-&gt;element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(curr-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curr-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(curr-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    a-&gt;<span class="built_in">levelOrder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgTree04</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（二）—— 线性表</title>
      <link href="/2023/04/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%81%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
      <url>/2023/04/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%81%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表-Linear-List"><a href="#线性表-Linear-List" class="headerlink" title="线性表(Linear List)"></a>线性表(Linear List)</h1><p>在使用数组是，你是都有插入一个数据，或者删改一个数据的烦恼？那么来试试线性表吧</p><h2 id="拥有的功能"><a href="#拥有的功能" class="headerlink" title="拥有的功能"></a>拥有的功能</h2><ul><li>初始化线性表：将一个线性表进行初始化，得到一个全新的线性表</li><li>获取指定位置上的元素：直接获取线性表指定位置i上的元素</li><li>获取元素的位置：获取某个元素在线性表上的位置i</li><li>插入元素：在指定位置i上插入一个元素</li><li>删除元素：删除指定位置i上的元素</li><li>获取长度：返回线性表的长度</li></ul><p><img src="https://fast.itbaima.net/2022/07/23/Ve6dlqROzhumD5o.png" alt=""></p><p>那么怎么实现这些功能呢？</p><p>我们一般有两种解决方式：</p><ol><li>顺序存储实现（顺序表）</li><li>链式存储实现（链表）</li></ol><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>前面我们说到，既然数组无法实现这样的高级表结构，那么我就基于数组，对其进行强化，也就是说，我们存放数据还是使用数组，但是我们可以为其编写一些额外的操作来强化为线性表，像这样底层依然采用顺序存储实现的线性表，我们称为顺序表。</p><p><img src="https://fast.itbaima.net/2022/07/24/elBvx4Zo1AJ2WqT.png" alt="image-20220724150015044"></p><p>可以先定义一个新的类或结构体类型，将一些需要用到的数据保存在一起，这里我们以<code>int</code>类型的线性表为例：</p><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SIZE = <span class="number">100</span>; <span class="comment">// 最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE]; <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 当前长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行初始化操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">SeqList</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是我们发现一个问题，这样的话我们的顺序表长度不就是固定为<code>100</code>的了吗？而前面我们线性表要求的是长度是动态增长的，那么这个时候怎么办呢？我们可以直接使用一个指针来指向底层数组的内存区域，当装不下的时候，我们可以创建一个新的更大的内存空间来存放数据，这样就可以实现扩容了，所以我们来修改一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* data; <span class="comment">// 存储数据的指针</span></span><br><span class="line">    <span class="type">int</span> capacity; <span class="comment">// 当前容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 当前长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改一下构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">SeqList</span>() </span><br><span class="line">    &#123;</span><br><span class="line">        capacity = <span class="number">10</span>;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="type">int</span>[capacity];<span class="comment">//使用动态增长的话记得进行释放</span></span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">SeqList</span>() </span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>考虑因素：</p><ol><li>指定位置插入（后续内容要向后移动）</li><li>动态空间申请</li><li>判断插入位置是否合法（越界啊）（bool）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (length == capacity) &#123;</span><br><span class="line">            <span class="comment">// 重新分配更大的内存空间//直到内存不足才会停止扩容</span></span><br><span class="line">            capacity *= <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> *new_data = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                new_data[i] = data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span>[] data;</span><br><span class="line">            data = new_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length; i &gt; index; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i] = data[i - <span class="number">1</span>]; <span class="comment">// 数据后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = value; <span class="comment">// 插入数据</span></span><br><span class="line">        length++; <span class="comment">// 长度加1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="打印函数"><a href="#打印函数" class="headerlink" title="打印函数"></a>打印函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;顺序表: [&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; data[i];</span><br><span class="line">            <span class="keyword">if</span> (i != length - <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好，写到这里让我们来小小的测试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    SeqList list;</span><br><span class="line"></span><br><span class="line">    list.insert(0, 123);</span><br><span class="line">    list.print();</span><br><span class="line">    list.insert(1, 456);</span><br><span class="line">    list.print();</span><br><span class="line">    list.insert(0, 789);</span><br><span class="line">    list.print();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList01</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 超出范围</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        data[i] = data[i + <span class="number">1</span>]; <span class="comment">// 数据前移</span></span><br><span class="line">    &#125;</span><br><span class="line">    length--; <span class="comment">// 长度减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="获取数据以及获取线性表长度"><a href="#获取数据以及获取线性表长度" class="headerlink" title="获取数据以及获取线性表长度"></a>获取数据以及获取线性表长度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 超出范围</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>好，那么有关线性表的实现就完成了，完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeqList</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* data; <span class="comment">// 存储数据的指针</span></span><br><span class="line">    <span class="type">int</span> capacity; <span class="comment">// 当前容量</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 当前长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">SeqList</span>() &#123;</span><br><span class="line">        capacity = <span class="number">10</span>;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">SeqList</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; length) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length == capacity) &#123;</span><br><span class="line">            <span class="comment">// 重新分配更大的内存空间</span></span><br><span class="line">            capacity *= <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span>* new_data = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                new_data[i] = data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">delete</span>[] data;</span><br><span class="line">            data = new_data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = length; i &gt; index; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            data[i] = data[i - <span class="number">1</span>]; <span class="comment">// 数据后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        data[index] = value; <span class="comment">// 插入数据</span></span><br><span class="line">        length++; <span class="comment">// 长度加1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            data[i] = data[i + <span class="number">1</span>]; <span class="comment">// 数据前移</span></span><br><span class="line">        &#125;</span><br><span class="line">        length--; <span class="comment">// 长度减1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> index)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 超出范围</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取长度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印顺序表</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;顺序表: [&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; data[i];</span><br><span class="line">            <span class="keyword">if</span> (i != length - <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;]&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SeqList list;</span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">123</span>);</span><br><span class="line">    list.<span class="built_in">print</span>();</span><br><span class="line">    list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">456</span>);</span><br><span class="line">    list.<span class="built_in">print</span>();</span><br><span class="line">    list.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">789</span>);</span><br><span class="line">    list.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        list.<span class="built_in">insert</span>(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">    list.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList02</p><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p>1.请问顺序实现的线性表，插入、删除、获取元素操作的时间复杂度为？</p><ul><li><strong>插入：</strong>因为要将后续所有元素都向后移动，所以平均时间复杂度为<code>O(N)</code></li><li><strong>删除：</strong>同上，因为要将所有元素向前移动，所以平均时间复杂度为<code>O(N)</code></li><li><strong>获取元素：</strong>因为可以利用数组特性直接通过下标访问到对应元素，所以时间复杂度为<code>O(1)</code></li></ul><p>2.顺序表是一种（ ）的存储结构？</p><p>A. 随机存取 B. 顺序存取 C. 索引存取 D. 散列存取</p><p><em>首先顺序表底层是基于数组实现的，那么它肯定是支持随机访问的，因为我们可以直接使用下标想访问哪一个就访问哪一个，所以选择A，不要看到名字叫做顺序表就选择顺序存取，因为它并不需要按照顺序来进行存取，链表才是。这里也没有建立索引去访问元素，也更不可能是散列存取了，散列存取我们会在后面的哈希表中进行介绍</em></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>线性表的另外一种是实现方式，那么什么是链表呢？</p><p><img src="https://fast.itbaima.net/2022/07/23/ruemiRQplVy7q9s.png" alt=""></p><p>链表不同于顺序表，顺序表底层采用数组作为存储容器，需要分配一块连续且完整的内存空间进行使用，而链表则不需要，它通过一个指针来连接各个分散的结点，形成了一个链状的结构，每个结点存放一个元素，以及一个指向下一个结点的指针，通过这样一个一个相连，最后形成了链表。它不需要申请连续的空间，只需要按照顺序连接即可，虽然物理上可能不相邻，但是在逻辑上依然是每个元素相邻存放的，这样的结构叫做链表（单链表）。</p><p>说人话，就是，申请时就是一堆散点，之后通过链状，连接到一起。而不需要像顺序表一样，申请一大块的连续空间。</p><p>链表还分为带头节点的链表和不带头结点的链表。<strong>一般设计链表都会采用带头结点的结构，因为操作更加方便。在写算法题的时候，会选择使用，不带头结点的链表。</strong></p><h3 id="带头链表（单链表）"><a href="#带头链表（单链表）" class="headerlink" title="带头链表（单链表）"></a>带头链表（单链表）</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> <span class="comment">//使用结构体保证链表数据的封装性和安全性</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">LinkedList</span>()<span class="comment">//链表初始化</span></span><br><span class="line">&#123;</span><br><span class="line">head == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node* head;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印列表"><a href="#打印列表" class="headerlink" title="打印列表"></a>打印列表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;<span class="comment">//头结点，是没有值的，因此从它的下一个节点开始输出</span></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入元素-1"><a href="#插入元素-1" class="headerlink" title="插入元素"></a>插入元素</h4><p>我们可以先修改新插入的结点的后继结点（也就是下一个结点）指向，指向原本在这个位置的结点：</p><p><img src="https://fast.itbaima.net/2022/07/23/8MNURYiacWZqwu6.png" alt=""></p><p>接着我们可以将前驱结点（也就是上一个结点）的后继结点指向修改为我们新插入的结点：</p><p><img src="https://fast.itbaima.net/2022/07/23/ysETUJb6cgBz2Qx.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> data, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入位置小于1，直接报错</span></span><br><span class="line">ListNode* node = head;<span class="comment">//通过--index，从头节点依次向后进行寻找前驱节点</span></span><br><span class="line"><span class="keyword">while</span> (--index)</span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;next;<span class="comment">//总是指向下一个结点</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)<span class="comment">//超出范围</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* new_node = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">new_node-&gt;data = data;</span><br><span class="line">new_node-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next = new_node;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来简单测试一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList list;</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList03</p><h4 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h4><p>那么我们如何实现删除操作呢？实际上也会更简单一些，我们可以直接将待删除节点的前驱结点指向修改为待删除节点的下一个：</p><p><img src="https://fast.itbaima.net/2022/07/23/N5sZx9T2a8lOzoC.png" alt=""></p><p><img src="https://fast.itbaima.net/2022/07/23/tNYnBJe9pczUq1Z.png" alt=""></p><p>所以我们只需要释放掉待删除结点占用的内存空间就行了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入位置小于1，直接报错</span></span><br><span class="line">ListNode* node = head;<span class="comment">//通过--index，从头节点依次向后进行寻找前驱节点</span></span><br><span class="line"><span class="keyword">while</span> (--index)</span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;next;<span class="comment">//总是指向下一个结点</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)<span class="comment">//删除的位置超出范围//?</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果有5个数，但是想要删除第六个，就需要特殊考虑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">ListNode* temp = node-&gt;next;</span><br><span class="line">node-&gt;next = node-&gt;next-&gt;next;<span class="comment">//跨越到下一个的下一个，把删除的元素跳过去</span></span><br><span class="line"><span class="keyword">delete</span> temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来测试一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList list;</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">list.<span class="built_in">remove</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList04</p><h4 id="获取对应位置上的元素"><a href="#获取对应位置上的元素" class="headerlink" title="获取对应位置上的元素"></a>获取对应位置上的元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getlist</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//用指针的形式进行返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">head = head-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (--index);</span><br><span class="line"><span class="keyword">return</span> &amp;head-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来测试一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList list;</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">list.<span class="built_in">remove</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">cout &lt;&lt; *list.<span class="built_in">getlist</span>(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList05</p><h4 id="获取元素的对应位置（不重复）"><a href="#获取元素的对应位置（不重复）" class="headerlink" title="获取元素的对应位置（不重复）"></a>获取元素的对应位置（不重复）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findList</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;<span class="comment">//先走到第一个节点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;data == data) <span class="keyword">return</span> i;<span class="comment">//如果找到，就返回i;</span></span><br><span class="line">i++;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取列表长度"><a href="#获取列表长度" class="headerlink" title="获取列表长度"></a>获取列表长度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再来测试一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList list;</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">cout &lt;&lt; list.<span class="built_in">findList</span>(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout&lt;&lt;list.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList06</p><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> <span class="comment">//使用结构体保证链表数据的封装性和安全性</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">ListNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">LinkedList</span>()<span class="comment">//链表初始化</span></span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> ListNode;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">LinkedList</span>() <span class="comment">//释放内存</span></span><br><span class="line">&#123;</span><br><span class="line">ListNode* node = head;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) </span><br><span class="line">&#123;</span><br><span class="line">ListNode* temp = node;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> data, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入位置小于1，直接报错</span></span><br><span class="line">ListNode* node = head;<span class="comment">//通过--index，从头节点依次向后进行寻找前驱节点</span></span><br><span class="line"><span class="keyword">while</span> (--index)</span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;next;<span class="comment">//总是指向下一个结点</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)<span class="comment">//超出范围</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* new_node = <span class="keyword">new</span> ListNode;</span><br><span class="line"><span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">new_node-&gt;data = data;</span><br><span class="line">new_node-&gt;next = node-&gt;next;</span><br><span class="line">node-&gt;next = new_node;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//插入位置小于1，直接报错</span></span><br><span class="line">ListNode* node = head;<span class="comment">//通过--index，从头节点依次向后进行寻找前驱节点</span></span><br><span class="line"><span class="keyword">while</span> (--index)</span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;next;<span class="comment">//总是指向下一个结点</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)<span class="comment">//删除的位置超出范围//?</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//如果有5个数，但是想要删除第六个，就需要特殊考虑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">ListNode* temp = node-&gt;next;</span><br><span class="line">node-&gt;next = node-&gt;next-&gt;next;<span class="comment">//跨越到下一个的下一个，把删除的元素跳过去</span></span><br><span class="line"><span class="keyword">delete</span> temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">getlist</span><span class="params">(<span class="type">int</span> index)</span><span class="comment">//用指针的形式进行返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (--index);</span><br><span class="line"><span class="keyword">return</span> &amp;node-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findList</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;<span class="comment">//先走到第一个节点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;data == data) <span class="keyword">return</span> i;<span class="comment">//如果找到，就返回i;</span></span><br><span class="line">i++;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* node = head-&gt;next;<span class="comment">//头结点，是没有值的，因此从它的下一个节点开始输出</span></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; node-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ListNode* head;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList list;</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">insert</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">cout &lt;&lt; list.<span class="built_in">findList</span>(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">cout&lt;&lt;list.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">list.<span class="built_in">remove</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="built_in">printList</span>();</span><br><span class="line">cout &lt;&lt; *list.<span class="built_in">getlist</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一些问题-1"><a href="#一些问题-1" class="headerlink" title="一些问题"></a>一些问题</h4><p>1.请问链式实现的线性表，插入、删除、获取元素操作的时间复杂度为？</p><ul><li><strong>插入：</strong>因为要寻找对应位置的前驱结点，所以平均时间复杂度为<code>O(n)</code>，但是不需要做任何的移动操作，效率肯定是比顺序表要高的。</li><li><strong>删除：</strong>同上，所以平均时间复杂度为<code>O(n)</code></li><li><strong>获取元素：</strong>由于必须要挨个向后寻找，才能找到对应的结点，所以时间复杂度为<code>O(n)</code>，不支持随机访问，只能顺序访问，比顺序表慢。</li></ul><p>2.什么情况下使用顺序表，什么情况下使用链表呢？</p><ul><li>通过分析顺序表和链表的特性我们不难发现，链表在随机访问元素时，需要通过遍历来完成，而顺序表则利用数组的特性直接访问得到，所以，当我们<strong>读取数据多于插入或是删除数据的情况下时</strong>，使用<strong>顺序表</strong>会更好。</li><li>而顺序表在插入元素时就显得有些鸡肋了，因为需要移动后续元素，整个移动操作会浪费时间，而链表则不需要，只需要修改结点 指向即可完成插入，所以在<strong>频繁出现插入或删除的情况</strong>下，使用<strong>链表</strong>会更好。</li></ul><p>3.在一个长度为<code>n (n&gt;1)</code>的单链表上，设有头和尾两个指针，执行（ ）操作与链表的长度有关？</p><p>A．删除单链表中的第一个元素<br>B．删除单链表中的最后一个元素<br>C．在单链表第一个元素前插入一个新元素<br>D．在单链表最后一个元素后插入一个新元素</p><blockquote><p><em>注意题干，现在有指向链表头尾的两个指针，那么A、C肯定是可以直接通过头结点找到的，无论链表长度如何都不影响，D也可以直接通过尾指针进行拼接，只有B需要尾指针的前驱结点，此时只能从头开始遍历得到，所以选择B</em></p></blockquote><p>4.在一个单链表HL中（HL为头结点指针），若要向表头插入一个由指针p指向的结点，则执行？</p><p>A． HL＝p; p-&gt;next＝HL;<br>B． p-&gt;next＝HL; HL＝p;<br>C． p-&gt;next＝HL; p＝HL;<br>D． p-&gt;next＝HL-&gt;next; HL-&gt;next＝p;</p><blockquote><p><em>既然要在表头插入一个数据，也就是说要在第一个位置插入，那么根据我们之前讲解的链表的插入，只需要将头结点指向新的结点，再让新的结点指向原本的第一个结点即可，所以选择D</em></p></blockquote><p>5.链表不具备的特点是？</p><p>A．可随机访问任一结点 B．插入删除不需要移动元素<br>C．不必事先估计存储空间 D．所需空间与其长度成正比</p><blockquote><p><em>我们前面说了，链表由于是链式存储结构，无法直接访问到对应下标的元素，所以我们只能通过遍历去找到对应位置的元素，故选择A</em></p></blockquote><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>当我们学完单链表的时候会发现，我们想要操作某一个结点时，比如删除，插入等，都需要找到前驱节点，才能进行。</p><p>那么有没有一种方法可以让节点不仅保存指向后续节点的指针，也能保存前驱节点的指针呢？</p><p>答案是有，它就是<strong>双链表</strong></p><p><img src="https://fast.itbaima.net/2022/07/24/oeXm6nyW7I9lPMf.png" alt=""></p><h4 id="定义与初始化-1"><a href="#定义与初始化-1" class="headerlink" title="定义与初始化"></a>定义与初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">Node* prev;</span><br><span class="line">Node* next;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line">data = value;</span><br><span class="line">prev = <span class="literal">nullptr</span>;<span class="comment">//将指针都设定为空</span></span><br><span class="line">next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node* head;</span><br><span class="line">Node* tail;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DoubleLinkedList</span>()</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="literal">nullptr</span>;<span class="comment">//将指针都设定为空</span></span><br><span class="line">tail = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) </span><br><span class="line">&#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next = newNode;</span><br><span class="line">newNode-&gt;prev = tail;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h4><p>接着是双向链表的插入操作，这就比单链表要麻烦一些了，我们先来分析一下：</p><p><img src="https://fast.itbaima.net/2022/07/24/MYwlVZ2fXB6icPt.png" alt=""></p><p>首先我们需要考虑后继结点，当新的结点插入之后，新的结点的后继结点就是原本在此位置上的结点，所以我们可以先将待插入结点的后继指针指向此位置上的结点：</p><p><img src="https://fast.itbaima.net/2022/07/24/IDYwp5gdPcSyFQO.png" alt=""></p><p>由于是双向链表，所以我们需要将原本在此位置上的结点的前驱指针指向新的结点：</p><p><img src="https://fast.itbaima.net/2022/07/24/5CKQ6LnzxGm4pYd.png" alt=""></p><p>接着我们来处理一下前驱结点，首先将前驱结点的后继指针修改为新的结点：</p><p><img src="https://fast.itbaima.net/2022/07/24/vmEViApU36FonJz.png" alt=""></p><p>最后我们将新的结点的前驱指针指向前驱结点即可：</p><p><img src="https://fast.itbaima.net/2022/07/24/C65IuomOVdAaWZ8.png" alt=""></p><p>这样，我们就完成了双向链表中结点的插入操作，按照这个思路，我们来设计一下函数吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="type">int</span> currentIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span> &amp;&amp; currentIndex &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">currentIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">newNode-&gt;prev = current-&gt;prev;</span><br><span class="line">newNode-&gt;next = current;</span><br><span class="line">current-&gt;prev-&gt;next = newNode;</span><br><span class="line">current-&gt;prev = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印列表-1"><a href="#打印列表-1" class="headerlink" title="打印列表"></a>打印列表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printForward</span><span class="params">()</span><span class="comment">//正向输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printReverse</span><span class="params">()</span><span class="comment">//逆向输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = tail;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot;&lt;-&quot;</span>;</span><br><span class="line">current = current-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素-2"><a href="#删除元素-2" class="headerlink" title="删除元素"></a>删除元素</h4><p>我们只需将前驱结点和后继结点的指向修改即可：</p><p><img src="https://fast.itbaima.net/2022/07/24/3aU7zV1N5Mox2Qk.png" alt=""></p><p>接着直接删除对应的结点即可：</p><p><img src="https://fast.itbaima.net/2022/07/24/L1zCq26k5BaGOlm.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="type">int</span> currentIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span> &amp;&amp; currentIndex &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">currentIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next-&gt;prev = current-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;prev != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;prev-&gt;next = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> current;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好，基本的内容我们都已经实现了，那我们来测试一下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DoubleLinkedList List;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">List.<span class="built_in">add</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">List.<span class="built_in">printForward</span>();</span><br><span class="line">List.<span class="built_in">printReverse</span>();</span><br><span class="line">List.<span class="built_in">remove</span>(<span class="number">3</span>);</span><br><span class="line">List.<span class="built_in">printForward</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList07</p><h4 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">Node* prev;</span><br><span class="line">Node* next;</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line">data = value;</span><br><span class="line">prev = <span class="literal">nullptr</span>;</span><br><span class="line">next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node* head;</span><br><span class="line">Node* tail;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">DoubleLinkedList</span>()</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="literal">nullptr</span>;</span><br><span class="line">tail = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) </span><br><span class="line">&#123;</span><br><span class="line">head = newNode;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next = newNode;</span><br><span class="line">newNode-&gt;prev = tail;</span><br><span class="line">tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Node* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>(value);</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="type">int</span> currentIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span> &amp;&amp; currentIndex &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">currentIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">newNode-&gt;prev = current-&gt;prev;</span><br><span class="line">newNode-&gt;next = current;</span><br><span class="line">current-&gt;prev-&gt;next = newNode;</span><br><span class="line">current-&gt;prev = newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="type">int</span> currentIndex = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span> &amp;&amp; currentIndex &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">currentIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next-&gt;prev = current-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;prev != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;prev-&gt;next = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> current;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printForward</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = head;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printReverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node* current = tail;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">current = current-&gt;prev;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DoubleLinkedList List;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">List.<span class="built_in">add</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">List.<span class="built_in">printForward</span>();</span><br><span class="line">List.<span class="built_in">printReverse</span>();</span><br><span class="line">List.<span class="built_in">remove</span>(<span class="number">3</span>);</span><br><span class="line">List.<span class="built_in">printForward</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环链表，这种链表实际上和前面我们讲的链表是一样的，但是它的最后一个结点，是与头结点相连的，双向链表和单向链表都可以做成这样的环形结构，我们这里以单链表为例：</p><p><img src="https://fast.itbaima.net/2022/07/24/KZl4SJVYQ5cfv7b.png" alt=""></p><p>这种类型的链表实际上与普通链表的唯一区别就在于最后是否连接到头结点，因此循环链表支持从任意一个结点出发都可以到达任何的结点，而普通的链表则只能从头结点出发才能到达任意结点，同样也是为了更灵活而设计的。</p><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><ol><li><p>与单链表相比，双链表的优点之一是？</p><p>A．插入、删除操作更简单<br>B．可以进行随机访问<br>C．可以省略表头指针或表尾指针<br>D．顺序访问相邻结点更灵活</p><blockquote><p><em>首先插入删除操作并没有更简单，反而更复杂了，随机访问肯定也是不行的，省略表头表尾指针实际上单链表也可以，所以D</em></p></blockquote></li><li><p>非空的循环单链表head的尾结点（由p所指向）满足？</p><p>A．p-&gt;next == NULL B．p == NULL<br>C．p-&gt;next ==head D．p == head</p><blockquote><p><em>前面我们说了，循环链表实际上唯一区别就是尾部的下一个结点会指向头部，所以这里选择C</em></p></blockquote></li><li><p>若某表最常用的操作是在最后一个结点之后插入一个结点或删除最后一个结点，则采用什么存储方式最节省运算时间？</p><p>A．单链表 B．给出表头指针的单循环链表 C．双链表 D．带头结点的双循环链表</p><blockquote><p><em>题干说明了常用的是在尾结点插入或删除尾结点，那么此时不仅需要快速找到最后一个结点，也需要快速找到最后一个结点的前驱结点，所以肯定是使用双向链表，为了快速找到尾结点，使用循环双向链表从头结点直接向前就能找到，所以选择D</em></p></blockquote></li><li><p>如果对线性表的操作只有两种，即删除第一个元素，在最后一个元素的后面插入新元素，则最好使用？</p><p>A．只有表头指针没有表尾指针的循环单链表<br>B．只有表尾指针没有表头指针的循环单链表<br>C．非循环双链表<br>D．循环双链表</p><blockquote><p><em>首先这里需要操作两个内容，一个是删除第一个元素，另一个是在最后插入新元素，所以A的话只有表头指针虽然循环但是还是得往后遍历才行，而B正好符合，因为循环链表的尾指针可以快速到达头结点，C不可能，D的话，循环双链表也可以，但是没有单链表节省空间，故B是最优解</em></p></blockquote></li></ol><h1 id="特殊的线性表"><a href="#特殊的线性表" class="headerlink" title="特殊的线性表"></a>特殊的线性表</h1><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>栈是一种特殊的线性表，它只能在在表尾进行插入和删除操作，就像下面这样：</p><p><img src="https://fast.itbaima.net/2022/07/24/D3heysaM9EpAgS4.png" alt=""></p><p>也就是说，我们只能在一端进行插入和删除，当我们依次插入1、2、3、4这四个元素后，连续进行四次删除操作，删除的顺序刚好相反：4、3、2、1，我们一般将其竖着看：</p><p><img src="https://fast.itbaima.net/2022/07/24/2NxUpCIRLoZt9Ky.png" alt=""></p><p>底部称为栈底，顶部称为栈顶，所有的操作只能在栈顶进行，也就是说，被压在下方的元素，只能等待其上方的元素出栈之后才能取出，就像我们往箱子里里面放的书一样，因为只有一个口取出里面的物品，所以被压在下面的书只能等上面的书被拿出来之后才能取出，这就是栈的思想，它是一种<strong>先进后出</strong>的数据结构（FILO，First In, Last Out）</p><p>实现栈也是非常简单的，可以基于我们前面的顺序表或是链表，这里我们先使用顺序表来实现一下，这里我们需要实现两个新的操作：</p><ul><li>pop：出栈操作，从栈顶取出一个元素。</li><li>push：入栈操作，向栈中压入一个新的元素。</li></ul><p>首先还是按照我们的顺序表进行编写：</p><h3 id="定义与初始化-2"><a href="#定义与初始化-2" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* elements;</span><br><span class="line"><span class="type">int</span> capacity;<span class="comment">//栈的容量</span></span><br><span class="line"><span class="type">int</span> topIndex;<span class="comment">//当前占点元素下标</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Stack</span>(<span class="type">int</span> size)<span class="comment">//栈的初始化</span></span><br><span class="line">&#123;</span><br><span class="line">capacity = size;</span><br><span class="line">elements = <span class="keyword">new</span> T[capacity];</span><br><span class="line">topIndex = <span class="number">-1</span>;<span class="comment">//当前顶部指向-1，代表没有元素。</span></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] elements;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="入栈操作"><a href="#入栈操作" class="headerlink" title="入栈操作"></a>入栈操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; item)</span><span class="comment">//入栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == capacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">out_of_range</span>(<span class="string">&quot;满了满了，别塞了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">elements[++topIndex] = item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我想让他没有容量限制，那怎么办呢？很简单，价格扩容功能就好了。</p><h3 id="扩容功能"><a href="#扩容功能" class="headerlink" title="扩容功能"></a>扩容功能</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; item)</span><span class="comment">//入栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == capacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw out_of_range(&quot;满了满了，别塞了&quot;);</span></span><br><span class="line">            <span class="built_in">expendCapacity</span>();</span><br><span class="line">&#125;</span><br><span class="line">elements[++topIndex] = item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">expendCapacity</span><span class="params">()</span><span class="comment">//扩容操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> newCapacity = capacity * <span class="number">2</span>;</span><br><span class="line">T* newElements = <span class="keyword">new</span> T[newCapacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= topIndex; i++)</span><br><span class="line">&#123;</span><br><span class="line">newElements[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] elements[i];</span><br><span class="line">elements = newElements;</span><br><span class="line">capacity = newCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">pop</span><span class="params">()</span><span class="comment">//因为出栈，只能从最上方删除，所以不用任何参数 </span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == <span class="number">-1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">out_of_range</span>(<span class="string">&quot;Stack is empty&quot;</span>);<span class="comment">//出栈之前，判断下顶层的位置在哪</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elements[topIndex--];<span class="comment">//直接删除顶层数值即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全部代码与测试"><a href="#全部代码与测试" class="headerlink" title="全部代码与测试"></a>全部代码与测试</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* elements;</span><br><span class="line"><span class="type">int</span> capacity;<span class="comment">//栈的容量</span></span><br><span class="line"><span class="type">int</span> topIndex;<span class="comment">//当前占点元素下标</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Stack</span>(<span class="type">int</span> size)<span class="comment">//栈的初始化</span></span><br><span class="line">&#123;</span><br><span class="line">capacity = size;</span><br><span class="line">elements = <span class="keyword">new</span> T[capacity];</span><br><span class="line">topIndex = <span class="number">-1</span>;<span class="comment">//当前顶部指向-1，代表没有元素。</span></span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] elements;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; item)</span><span class="comment">//入栈操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == capacity - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//throw out_of_range(&quot;满了满了，别塞了&quot;);</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;阿巴阿巴，你别急，我扩容一下&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">expendCapacity</span>();</span><br><span class="line">&#125;</span><br><span class="line">elements[++topIndex] = item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">expendCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> newCapacity = capacity * <span class="number">2</span>;</span><br><span class="line">T* newElements = <span class="keyword">new</span> T[newCapacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= topIndex; i++)</span><br><span class="line">&#123;</span><br><span class="line">newElements[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] elements;</span><br><span class="line">elements = newElements;</span><br><span class="line">capacity = newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == <span class="number">-1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">out_of_range</span>(<span class="string">&quot;Stack is empty&quot;</span>);<span class="comment">//出栈之前，判断下顶层的位置在哪</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elements[topIndex--];<span class="comment">//直接删除顶层数值即可</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (topIndex == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;空的，啥也没有&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= topIndex; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; elements[i] &lt;&lt; <span class="string">&quot;|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Stack&lt;<span class="type">int</span>&gt; <span class="title">stack</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">stack.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">stack.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">stack.<span class="built_in">print</span>();</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stack.<span class="built_in">print</span>();</span><br><span class="line">cout &lt;&lt; stack.<span class="built_in">pop</span>() &lt;&lt; endl;</span><br><span class="line">stack.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>imgList08</p><p>栈的利用率可能会很低，这个时候我们可以将一个固定长度的数组共享给两个栈来使用：</p><p><img src="https://fast.itbaima.net/2022/07/24/HRveZ8Ed2TrtaC7.png" alt=""></p><p>数组的两头分别作为两个栈的栈底，当两个栈的栈顶指针相遇时（栈顶指针下标之差绝对值为1时），表示栈已满。通过这种方式，我们就可以将数组占用的空间更充分地使用，这样的栈我们称为<strong>共享栈</strong>。</p><h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><ol><li><p>若进栈序列为1，2，3，4，则不可能得到的出栈序列是？</p><p>A. 3，2，1，4 B. 3，2，4，1<br>C. 4，2，3，1 D. 2，3，4，1</p><blockquote><p><em>注意进栈并不一定会一次性全部进栈，可能会出现边进边出的情况，所以出栈的顺序可能有很多种情况，首先来看A，第一个出栈的是3，那么按照顺序，说明前面一定入栈了2、1，在出栈时4还没有入栈，然后是2、1最后是4，没有问题。接着是B，跟前面的A一样，不过这次是先出站3、2，而1留在栈中，接着4入栈，然后再让4、1出栈，也是正确的。然后是C，首先是4出栈，那么说明前三个一定都入栈了，而此时却紧接着的一定是3，而这里是2，错误。所以选择C</em></p></blockquote></li><li><p>假设有5个整数以1、2、3、4、5的顺序被压入堆栈，且出栈顺序为3、5、4、2、1，那么栈大小至少为？</p><p>A.2<br>B.3<br>C.4<br>D.5</p><blockquote><p><em>首先我们分析一下，第一个出栈的元素为3，那么也就是说前面的1、2都在栈内，所以大小至少为3，然后是5，那么说明此时栈内为1、2、4，算是出栈的5，那么至少需要的大小就是4了，所以选择C</em></p></blockquote></li></ol><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>前面我们学习了栈，栈中元素只能栈顶出入，它是一种特殊的线性表，同样的，队列（Queue）也是一种特殊的线性表。</p><p>就像我们在超市、食堂需要排队一样，我们总是排成一列，先到的人就排在前面，后来的人就排在后面，越前面的人越先完成任务，这就是队列，队列有队头和队尾：</p><p><img src="https://fast.itbaima.net/2022/07/25/xBuZckTNtR54AEq.png" alt=""></p><p>秉承先来后到的原则，队列中的元素只能从队尾进入，只能从队首出去，也就是说，入队顺序为1、2、3、4，那么出队顺序也一定是1、2、3、4，所以队列是一种先进先出（FIFO，First In, First Out）的数据结构。</p><p>想要实现队列也是很简单的，也可以通过两种线性表来实现，我们先来看看使用顺序表如何实现队列，假设一开始的时候队列中有0个元素，队首和队尾一般都初始都是-1这个位置：</p><p><img src="https://fast.itbaima.net/2022/07/25/OKVFSEfQIkDjzNu.png" alt="image-20220725110033373">image-20220725110033373</p><p>此时有新的元素入队了，队尾向后移动一格（+1），然后在所指向位置插入新的元素：</p><p><img src="https://fast.itbaima.net/2022/07/25/Pd6ZRUxKIhzVF9E.png" alt=""></p><p>之后都是同样的方式进行插入，队尾会一直向后移动：</p><p><img src="https://fast.itbaima.net/2022/07/25/8w3Mlroz25EeIcL.png" alt=""></p><p>现在我们想要执行出队操作了，那么需要将队首向后移动一格，然后删除队首指向的元素：</p><p><img src="https://fast.itbaima.net/2022/07/25/LaZsrtwi8AkW9gh.png" alt=""></p><p>看起来设计的还挺不错的，不过这样有一个问题，这个队列是一次性的，如果队列经过反复出队入队操作，那么最后指针会直接指向数组的最后，如果我们延长数组的话，也不是一个办法，不可能无限制的延伸下去吧？所以一般我们采用循环队列的形式，来实现重复使用一个数组（不过就没办法扩容了，大小是固定的）</p><p><img src="https://fast.itbaima.net/2022/07/25/MNaqpZRgkHcTlCU.png" alt=""></p><p>我们可以在移动队首队尾指针时，考虑循环的问题，也就是说如果到达了数组尽头，那么就直接从数组的前面重新开始计算，这样就相当于逻辑上都循环了，队首和队尾指针在一开始的时候都指向同一个位置，每入队一个新的元素，依然是先让队尾后移一位，在所指向位置插入元素，出队同理。</p><p>不过这样还是有问题，既然是循环的，那么怎么判断队列是否已满呢？</p><p><img src="https://fast.itbaima.net/2022/07/25/eptxXASywr3b4c9.png" alt=""></p><p>由于队首指针和队尾指针重合时表示队列为空，所以我们只能舍弃一个存储单元，当队尾距离队首一个单元的时候，表示队列已满。</p><h3 id="定义与初始化-3"><a href="#定义与初始化-3" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* array;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span> rear, front;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() :<span class="built_in">capacity</span>(<span class="number">10</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">front</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">//默认为 容量为10，队首与队尾在0起点</span></span><br><span class="line">&#123;</span><br><span class="line">array = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">offerQueue</span><span class="params">(<span class="type">int</span> element)</span> <span class="comment">//先位移，再插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)   <span class="comment">// 先判断队列是否已满，如果队尾下一个就是队首，那么说明已满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % capacity;   <span class="comment">// 队尾先向前移动一位，注意取余计算才能实现循环</span></span><br><span class="line">array[rear] = element;   <span class="comment">// 在新的位置插入元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">poolQueue</span><span class="params">()</span><span class="comment">//出队操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line"><span class="keyword">return</span> array[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt; &quot;</span>;</span><br><span class="line"><span class="type">int</span> i = front;   <span class="comment">// 遍历队列需要从队首开始</span></span><br><span class="line"><span class="keyword">while</span> (i != rear)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % capacity;   <span class="comment">// 先向后循环移动</span></span><br><span class="line">cout &lt;&lt; array[i] &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 然后打印当前位置上的元素</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全部代码并测试"><a href="#全部代码并测试" class="headerlink" title="全部代码并测试"></a>全部代码并测试</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* array;</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span> rear, front;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() :<span class="built_in">capacity</span>(<span class="number">10</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">front</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">//默认为 容量为10，队首与队尾在0起点</span></span><br><span class="line">&#123;</span><br><span class="line">array = <span class="keyword">new</span> <span class="type">int</span>[capacity];</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">offerQueue</span><span class="params">(<span class="type">int</span> element)</span> <span class="comment">//先位移，再插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((rear + <span class="number">1</span>) % capacity == front)   <span class="comment">// 先判断队列是否已满，如果队尾下一个就是队首，那么说明已满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % capacity;   <span class="comment">// 队尾先向前移动一位，注意取余计算才能实现循环</span></span><br><span class="line">array[rear] = element;   <span class="comment">// 在新的位置插入元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span><span class="comment">//判断是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">poolQueue</span><span class="params">()</span><span class="comment">//出队操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">front = (front + <span class="number">1</span>) % capacity;</span><br><span class="line"><span class="keyword">return</span> array[front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt; &quot;</span>;</span><br><span class="line"><span class="type">int</span> i = front;   <span class="comment">// 遍历队列需要从队首开始</span></span><br><span class="line"><span class="keyword">while</span> (i != rear)</span><br><span class="line">&#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % capacity;   <span class="comment">// 先向后循环移动</span></span><br><span class="line">cout &lt;&lt; array[i] &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 然后打印当前位置上的元素</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue queue;</span><br><span class="line">queue.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">queue.<span class="built_in">offerQueue</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">queue.<span class="built_in">print</span>();</span><br><span class="line"><span class="keyword">while</span> (!queue.<span class="built_in">isEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;queue.<span class="built_in">poolQueue</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList09</p><h3 id="链表实现队列"><a href="#链表实现队列" class="headerlink" title="链表实现队列"></a>链表实现队列</h3><p>刚才使用顺序表来实现的队列，接下来试试链表来实现，好处是可以忽略容量的限制。</p><p>这里就直接展示全部代码了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> element;</span><br><span class="line">    LNode* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    LNode* front;</span><br><span class="line">    LNode* rear;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedQueue</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        front = <span class="keyword">new</span> <span class="built_in">LNode</span>();</span><br><span class="line">        rear = front;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">LinkedQueue</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        LNode* current = front;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LNode* temp = current;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">offerQueue</span><span class="params">(<span class="type">int</span> element)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LNode* node = <span class="keyword">new</span> <span class="built_in">LNode</span>();</span><br><span class="line">        node-&gt;element = element;</span><br><span class="line">        node-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        rear-&gt;next = node;</span><br><span class="line">        rear = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pollQueue</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> e = front-&gt;next-&gt;element;</span><br><span class="line">        LNode* node = front-&gt;next;</span><br><span class="line">        front-&gt;next = front-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (rear == node)</span><br><span class="line">            rear = front;</span><br><span class="line">        <span class="keyword">delete</span> node;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printQueue</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt; &quot;</span>;</span><br><span class="line">        LNode* node = front-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            cout &lt;&lt; node-&gt;element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkedQueue queue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        queue.<span class="built_in">offerQueue</span>(i * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.<span class="built_in">printQueue</span>();</span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; queue.<span class="built_in">pollQueue</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>imgList10</p><h3 id="队列练习题："><a href="#队列练习题：" class="headerlink" title="队列练习题："></a><strong>队列练习题：</strong></h3><ol><li><p>使用链表方式存储的队列，在进行出队操作时需要？</p><p>A. 仅修改头结点指向 B. 仅修改尾指针 C. 头结点指向、尾指针都要修改 D. 头结点指向、尾指针可能都要修改</p><blockquote><p><em>首先出队肯定是要动头结点指向的，但是不一定需要动尾指针，因为只有当尾指针指向的是待出队的元素时才需要，因为执行后队列就为空了，所以需要将队尾指针移回头结点处，选择D</em></p></blockquote></li><li><p>引起循环队列队头位置发生变化的操作是？</p><p>A. 出队</p><p>B. 入队</p><p>C. 获取队头元素</p><p>D. 获取队尾元素</p><blockquote><p><em>这个题还是很简单的，因为只有出队操作才会使得队头位置后移，所以选择A</em></p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（一）—— 复杂度问题</title>
      <link href="/2023/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>在学习时间复杂度之前我们先了解一下常数操作。</p><h2 id="常数时间操作"><a href="#常数时间操作" class="headerlink" title="常数时间操作"></a>常数时间操作</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>一个操作如果和样本的数据库量没有关系，每次都是固定时间内完成的操作，叫做常数操作。</p><p>概念模糊难懂，拿来举一些🌰。</p><p>首先是数组的寻址，一个常数操作的时间复杂度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = arr[i];</span><br></pre></td></tr></table></figure><p>我们熟悉的四则运算<code>+ - * /</code>这些也都是常数操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a+b;</span><br><span class="line">a-b;</span><br></pre></td></tr></table></figure><p> 链表的寻址操作就不是一个常数操作的时间复杂度，因为寻址时会连续调用之前的内容。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b = list.get[i];</span><br></pre></td></tr></table></figure><h2 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>在常数操作的表达式中，<strong>忽略低阶项，只要最高阶，且忽略高阶系数</strong>。如果剩下的部分为<code>f(N)</code>则时间复杂度为：</p><script type="math/tex; mode=display">O(f(N))</script><p>直接看概念很恶心不如直接上例子</p><p>那这里举一个大家都知道的选择排序，选择排序的机制时，依次遍历从头开始的数字，找到最小的数，与之交换位置。来画一张图，假设数组中有N个元素。</p><p>img</p><p>可能会有疑问啊，<code>O</code>是什么意思呢？</p><p>在数学中<code>O</code>所指的是最大上限。</p><h3 id="平均时间复杂度和最好时间复杂度"><a href="#平均时间复杂度和最好时间复杂度" class="headerlink" title="平均时间复杂度和最好时间复杂度"></a>平均时间复杂度和最好时间复杂度</h3><p>在学习计算机时，以下两者，并不会经常使用，仅供参考。</p><p>平均时间复杂度<code>θ()</code></p><p>最好时间复杂度<code>Ω()</code></p><h3 id="时间复杂度的比较"><a href="#时间复杂度的比较" class="headerlink" title="时间复杂度的比较"></a>时间复杂度的比较</h3><p>第一种，也是很简单的一种，直接比较阶数。</p><script type="math/tex; mode=display">a=O(N^2)</script><script type="math/tex; mode=display">b=O(N)</script><p>这两者相比，显而易见的<code>b&lt;a</code>，在时间复杂度上，<code>b</code>优于<code>a</code>。</p><p>第二种，当阶数相同时，比较常数项。</p><script type="math/tex; mode=display">a=O(N)</script><script type="math/tex; mode=display">b=O(N)</script><p>那么怎么验证呢？上手跑一下（简单粗暴）。</p><p>来举个例子实操一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N=<span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="number">1</span>=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a=<span class="number">2</span>+<span class="number">5</span>;</span><br><span class="line">        a=<span class="number">4</span>*<span class="number">7</span>;</span><br><span class="line">        a=<span class="number">6</span>*<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N=<span class="number">1000</span>;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="number">1</span>=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a=<span class="number">3</span>|<span class="number">6</span>;</span><br><span class="line">        a=<span class="number">3</span>&amp;<span class="number">4</span>;</span><br><span class="line">        a=<span class="number">4</span>^<span class="number">786</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个例子都是时间复杂度为<code>O(N)</code>的算法，但是比较的话，只能通过实际运行来比较。</p><h3 id="估计时间复杂度"><a href="#估计时间复杂度" class="headerlink" title="估计时间复杂度"></a>估计时间复杂度</h3><p>在估计时间复杂度时，请按照<strong>最差的情况</strong>下去考虑。为什么这么说呢？还是以选择排序举例子。</p><p>当一个数组所有的数按照<strong>从大到小，有序排列</strong>，那么要用选择排序<strong>改成从小到大</strong>，那么很显然，他的<strong>时间复杂度</strong>是<code>O(N^2)</code>，那么给一个从<strong>小到大排列好的数组</strong>，用选择排序，改成<strong>从小到大排列</strong>，那么它的<strong>时间复杂度</strong>就是<code>O(N)</code>。这两者的时间复杂度可谓是天壤之别，因此在做题时，估计时间复杂度，<strong>请按照最差的情况估计</strong></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong>评价一个算法流程的好坏，优先看时间复杂度的指标，然后再根据不同数据样本下的实际运行时间，也就是“常数项时间”，进行对比。</strong></p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>1.在一个有序数组里找到指定的一个数</p><p>img</p><h2 id="Master公式"><a href="#Master公式" class="headerlink" title="Master公式"></a>Master公式</h2><script type="math/tex; mode=display">T(N)=a*T(\dfrac{N}{b})+O(N^d)</script><script type="math/tex; mode=display">1)log_b^a>d 复杂度为 O(N^{log_b^a})</script><script type="math/tex; mode=display">2)log_b^a=d 复杂度为 O(N^{d*log^N})</script><script type="math/tex; mode=display">3)log_b^a<d 复杂度为 O(N^d)</script><p>上图的二分法，就可以使用Master公式，这个公式需要具体问题具体分析。二分法的时间复杂度如下</p><script type="math/tex; mode=display">T(N)=2*T(\dfrac{N}{2})+O(1)</script><script type="math/tex; mode=display">a=2,b=2,d=0</script><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>还是拿选择排序来举例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span><span class="comment">//数组，以及数组元素个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="comment">//开辟了一个 i 的空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i;</span><br><span class="line">        <span class="comment">//每次使用完后释放</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)<span class="comment">// i~n-1上寻找最小值的下标</span></span><br><span class="line">            <span class="comment">//开辟了一个 j 的空间</span></span><br><span class="line">        &#123;</span><br><span class="line">            minIndex = arr[j] &lt; arr[minIndex] ? j : minIndex;<span class="comment">//确定下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(arr,j,minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[i]=a[i]^a[j];</span><br><span class="line">    a[j]=a[i]^a[j];</span><br><span class="line">    a[i]=a[i]^a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，这段代码中，都是使用有限个变量来维持代码的运行，分配的空间不会随着处理数据量的变化而变化，因此他的空间复杂度为<code>O(1)</code> </p><p>C++的就先记住这么多就即可。</p><h1 id="小技巧：异或运算"><a href="#小技巧：异或运算" class="headerlink" title="小技巧：异或运算"></a>小技巧：异或运算</h1><p>在这里给大家讲一个交换数值的<strong>小技巧</strong>（赘述的有些多，因为我觉得是非常好用的东西），但是会用到异或运算，那先来讲一下异或运算。</p><p>异或运算的原理是，相同为0，不同为1，并且也可以将异或运算理解为<strong>无进位相加</strong><code>1^1=0,1^0=1</code></p><p><strong>假设</strong>二进制数<code>a=10110,b=00111</code></p><p>则<code>a^b=10001</code>。</p><h2 id="异或运算的性质"><a href="#异或运算的性质" class="headerlink" title="异或运算的性质"></a>异或运算的性质</h2><ol><li>O^N=N N^N=0</li><li>满足交换律和结合律</li></ol><p>回到原代码中，为了直观一点我们假设<code>a=甲,b=乙</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a=甲 b=乙</span></span><br><span class="line">    a=a^b;<span class="comment">//a=甲^乙, b=乙</span></span><br><span class="line">    b=a^b;<span class="comment">//a=甲^乙, b=甲^(乙^乙)=&gt; b=甲^0=&gt; b=甲</span></span><br><span class="line">    a=a^b;<span class="comment">//a=甲^乙^甲=&gt; a=乙^(甲^甲)=&gt; a=0^乙=&gt; a=乙, b=甲</span></span><br><span class="line">    <span class="comment">//a=乙 b=甲</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样书写，有一个<strong>限制</strong>，那就是<code>a</code>和<code>b</code>所代表的<strong>值可以一样</strong>但是，<strong>内存必须</strong>为两块<strong>不一样</strong>的内存空间，因为内存空间相同的情况，是自己与自己进行异或运算，会把<strong>自己刷成</strong><code>0</code>。</p><p>好，既然已经学会了异或运算的骚操作，那么接下来，运用这些知识完成以下题目。</p><p>要求时间复杂度为<code>O(N)</code>，空间复杂度为<code>O(1)</code>。</p><p>1.在一个数组中，已知有<strong>一种数</strong>出现了<strong>奇数次</strong>，<strong>其余</strong>的数均出现<strong>偶数次</strong>，找到这一种数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> eor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        eor = eor ^ arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; eor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">test01</span>(a,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在一个数组中，已知有<strong>两种数</strong>出现了<strong>奇数次</strong>，其余的数均出现<strong>偶数次</strong>，找到这两种数。</p><p>该题的解题原理是，假设两个数为<code>a,b</code>,根据刚才的代码<strong>易证</strong><code>eor=a^b</code>，则<code>eor</code>中<strong>一定</strong>会有一个位数为1，假设这个，位数为8，将第8位为1的数放到一起，为0的放在一起，之后<strong>设定</strong>一个<code>eor&#39;</code>让其再依次异或<strong>任意一组数</strong>，则得出来的就是<code>a</code>或者<code>b</code>（可以自己动笔画一画，因为其他的数都是偶数，不会影响结果），再将<code>eor</code>与<code>eor&#39;</code>异或，则得出来的就是<code>b</code>或者<code>a</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> eor = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//结束之后 eor =a^b</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">eor^ a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为a b 为两个不一样的数</span></span><br><span class="line"><span class="comment">//eor 必然有一个位置是1</span></span><br><span class="line"><span class="comment">//因此只需要提取其中的一个1就行</span></span><br><span class="line"><span class="comment">//提取最右侧的1</span></span><br><span class="line"><span class="type">int</span> rightOne = eor &amp; (~eor + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//定义eor&#x27;</span></span><br><span class="line"><span class="type">int</span> eor2 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//eor&#x27;与某位为1的所有数异或</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((a[i] ^ rightOne) == <span class="number">1</span>)</span><br><span class="line"><span class="comment">//判断该位上是否为1，是则异或</span></span><br><span class="line">&#123;</span><br><span class="line">eor2 ^= a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a b 输出</span></span><br><span class="line">cout &lt;&lt; eor &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (eor2 ^ eor) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10001</span>];</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">test02</span>(a,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#核心-多态</title>
      <link href="/2023/04/09/CSharp-Day3/"/>
      <url>/2023/04/09/CSharp-Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="多态vob"><a href="#多态vob" class="headerlink" title="多态vob"></a>多态vob</h1><h2 id="多态的概念"><a href="#多态的概念" class="headerlink" title="多态的概念"></a>多态的概念</h2><p>说人话就是“多种状态”</p><p>让继承同一父类的子类们，在执行相同方法是有不同的表现（状态）</p><h2 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h2><p>同一父类的对象执行相同的方法，会有不同的表现。因此这样可以让同一的对象有唯一行为的特征</p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">vob</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Father</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpeakName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Father的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Son</span>:<span class="title">Father</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">SpeakName</span>()<span class="comment">//覆盖父类的方法</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Son的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            Father f = <span class="keyword">new</span> Son();</span><br><span class="line">            f.SpeakName();<span class="comment">//执行的是father的方法，</span></span><br><span class="line">            <span class="comment">//因为是father类的，需要转换成son类，才会是son的方法</span></span><br><span class="line">            (f <span class="keyword">as</span> Son).SpeakName();<span class="comment">//打印son的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h2><p>看到这里的小伙伴可能好奇，vob是什么意思呢？vob是三个名词的缩写即</p><ul><li>v(virtual)—-虚函数</li><li>o(override)—-重写</li><li>b(base)—-父类</li></ul><p>这三个是方便记忆而编写的，并不是官方术语</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">vob</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObject</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//虚函数 可以被子类重写 vob的第一个字</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Atk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;游戏对象进行攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Player</span>:<span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Player</span>(<span class="params"><span class="built_in">string</span> name</span>):<span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//虚函数的重写 vob的第二个字</span></span><br><span class="line">        <span class="comment">//重写父类的行为方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Atk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//base的作用 vob的第三个字</span></span><br><span class="line">            <span class="comment">//代表父类 可以通过base来保留父类的行为</span></span><br><span class="line">            <span class="keyword">base</span>.Atk();<span class="comment">//执行父类的行为方法</span></span><br><span class="line">            <span class="comment">//修改父类的行为方法</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;玩家的攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Monster</span> : <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Monster</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Atk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;怪物的攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            GameObject p = <span class="keyword">new</span> Player(<span class="string">&quot;铅笔沫&quot;</span>);</span><br><span class="line">            p.Atk();</span><br><span class="line">            (p <span class="keyword">as</span> Player).Atk();<span class="comment">//执行结果与上方一致</span></span><br><span class="line">            GameObject m = <span class="keyword">new</span> Monster(<span class="string">&quot;怪物&quot;</span>);</span><br><span class="line">            m.Atk();</span><br><span class="line">            (m <span class="keyword">as</span> Monster).Atk();<span class="comment">//结果执行与上方一致</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>Q1：</p><p>真的鸭子嘎嘎叫，木头鸭子吱吱叫，橡皮鸭子唧唧叫</p><p>Q2：</p><p>所有员工9点打卡，但是经理十一点，程序员不打卡</p><p>Q3：</p><p>创建一个图形类，有求面积和周长两个方法，创建矩形类，正方形类，圆形类，继承图形类，实例化矩形、正方形、圆形对象求面积和周长</p><p>A1：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Duck</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;真的鸭子嘎嘎叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Wood</span> : <span class="title">Duck</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;木头鸭子吱吱叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rubber</span> : <span class="title">Duck</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;橡胶鸭子唧唧叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Duck d = <span class="keyword">new</span> Duck();</span><br><span class="line">            d.Speak();</span><br><span class="line">            Duck d2 = <span class="keyword">new</span> Wood();</span><br><span class="line">            d2.Speak();</span><br><span class="line">            Duck d3 = <span class="keyword">new</span> Rubber();</span><br><span class="line">            d3.Speak();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A2：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Staff</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PunchTheClock</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;9点打卡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Manager</span> : <span class="title">Staff</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PunchTheClock</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;11点打卡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Programmer</span> : <span class="title">Staff</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PunchTheClock</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;老子不打卡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Staff staff = <span class="keyword">new</span> Staff();</span><br><span class="line">            staff.PunchTheClock();</span><br><span class="line">            Manager manager = <span class="keyword">new</span> Manager();</span><br><span class="line">            manager.PunchTheClock();</span><br><span class="line">            Programmer programmer = <span class="keyword">new</span> Programmer();</span><br><span class="line">            programmer.PunchTheClock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A3：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rect</span>:<span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> w;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> h;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rect</span>(<span class="params"><span class="built_in">float</span> w, <span class="built_in">float</span> h</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">            <span class="keyword">this</span>.h = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>*(w+h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> w * h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Square</span>:<span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> l;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span>(<span class="params"><span class="built_in">float</span> l</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.l = l;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>*l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l*l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Circular</span>:<span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> r;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circular</span>(<span class="params"><span class="built_in">float</span> r</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.r = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>*<span class="number">3.14f</span>*r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3.14f</span>*r*r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Rect rect = <span class="keyword">new</span> Rect(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(rect.GetLength());</span><br><span class="line">            Console.WriteLine(rect.GetArea());</span><br><span class="line">            Square square = <span class="keyword">new</span> Spuare(<span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(square.GetLength());</span><br><span class="line">            Console.WriteLine(square.GetArea());</span><br><span class="line">            Circular circular = <span class="keyword">new</span> Circular(<span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(circular.GetLength());</span><br><span class="line">            Console.WriteLine(circular.GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>就是被抽象关键字abstract修饰的类</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>不能被实例化的类</li><li>可以包含抽象方法</li><li>继承抽象类必须重写其抽象方法</li><li>抽象类的子类可以通过里氏替换原则，进行实现</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Thing</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//抽象类中，封装的所有知识点都可以在其中书写</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="comment">//还可以在抽象类中写抽象基函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Water</span> : <span class="title">Thing</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//抽象类不能实例化</span></span><br><span class="line">            <span class="comment">//Thing thing = new Thing();//无法实例化抽象类</span></span><br><span class="line">            <span class="comment">//但是可以遵循里氏替换原则，用父类容器承装子类</span></span><br><span class="line">            Thing w = <span class="keyword">new</span> Water();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象函数"><a href="#抽象函数" class="headerlink" title="抽象函数"></a>抽象函数</h2><p>基本概念</p><p>抽象函数，又称纯虚方法，用abstract关键字修饰的方法</p><p>特点</p><p>只能在抽象类中申明</p><p>没有函数(方法)体，只能定义(看不懂的话直接看下方代码)</p><p>不能是私有的</p><p>继承后必须使用<code>override</code>重写</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Fruits</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="comment">//抽象方法是一定不能有函数(方法)体的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Bad</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Apple</span>:<span class="title">Fruits</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在继承抽象类时，如果不重写其中的抽象函数，就会报错</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bad</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Banana</span>:<span class="title">Fruits</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//由此可以看到，虚方法和抽象方法，都可以被子类无限重写</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Bad</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里的小伙伴，可能会想，这两个给东西有什么用呢？</p><p>是这样的，当我们不希望被实例化的对象，<strong>相对比较抽象的类</strong>可以使用抽象类例如(人 事物 水果 …)，以及当<strong>父类中的行为，不太需要被是实现</strong>，只希望子类去定义具体规则的，可以选择使用抽象类，然后使用其中的方法来定义规则。</p><p>具体一点 当时设计整体框架时，就是它们大显身手的时候</p><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><p>写一个动物抽象类，写三个子类，分别为（人叫，狗叫，猫叫）</p><h3 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h3><p>创建一个图形类，有求面积和周长两个方法，创建矩形类、正方形类、圆形类，继承图形类，实例化矩形、正方形、圆形对象求面积和周长</p><h3 id="A1"><a href="#A1" class="headerlink" title="A1"></a>A1</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Animals</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Talk</span>()</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span>:<span class="title">Animals</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Talk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;人在叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cats</span> : <span class="title">Animals</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Talk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;猫在叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dogs</span> : <span class="title">Animals</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Talk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;狗在叫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Animals p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.Talk();</span><br><span class="line">            Animals d = <span class="keyword">new</span> Dogs();</span><br><span class="line">            d.Talk();</span><br><span class="line">            Animals c = <span class="keyword">new</span> Cats();</span><br><span class="line">            c.Talk();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A2"><a href="#A2" class="headerlink" title="A2"></a>A2</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rect</span> : <span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> w;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> h;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rect</span>(<span class="params"><span class="built_in">float</span> w, <span class="built_in">float</span> h</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">            <span class="keyword">this</span>.h = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * (w + h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> w * h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Square</span> : <span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> l;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Square</span>(<span class="params"><span class="built_in">float</span> l</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.l = l;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span> * l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l * l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Circular</span> : <span class="title">Graph</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> r;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circular</span>(<span class="params"><span class="built_in">float</span> r</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.r = r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetLength</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14f</span> * r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3.14f</span> * r * r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Graph rect = <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(rect.GetLength());</span><br><span class="line">            Console.WriteLine(rect.GetArea());</span><br><span class="line">            Graph square = <span class="keyword">new</span> Square(<span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(square.GetLength());</span><br><span class="line">            Console.WriteLine(square.GetArea());</span><br><span class="line">            Graph circular = <span class="keyword">new</span> Circular(<span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(circular.GetLength());</span><br><span class="line">            Console.WriteLine(circular.GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>你可以把接口理解为是一种DLC，在原有的抽象类的基础上，增加一些特定的行为。例如，人与鸟，都属于动物，但是人不会飞，因此飞这个行为们就不适合写在动物恶的这个抽象类当中，所以可以通过接口，来给鸟类，来添加一种拓展的行为方式。并且这么写的好处还有，飞机类也可以使用飞的行为方式。因为接口可以被任何一个类继承。</p><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>接口是行为的抽象规范，它也是一种自定义类型，关键字：<code>interface</code></p><h3 id="接口申明的规范"><a href="#接口申明的规范" class="headerlink" title="接口申明的规范"></a>接口申明的规范</h3><ol><li><strong>不</strong>包含成员变量</li><li><strong>只</strong>包含方法、属性、索引器、事件</li><li>成员<strong>不能</strong>被实现</li><li>成员可以不用写访问修饰符号(<strong>默认public</strong>)，但不<strong>能是私有</strong>的</li><li><strong>接口不能继承类，但是可以继承另一个接口</strong></li></ol><h3 id="接口的使用规范"><a href="#接口的使用规范" class="headerlink" title="接口的使用规范"></a>接口的使用规范</h3><ol><li>类可以继承多个接口</li><li>类继承接口后，必须实现接口中所有成员</li></ol><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>和类的申明类似</li><li>接口时用来继承的</li><li>接口不能被实例化，但是可以作为容器的存储对象(遵循里氏替换原则)</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        xxx f = <span class="keyword">new</span> xxx();<span class="comment">//报错，因为接口不能被实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="申明方法"><a href="#申明方法" class="headerlink" title="申明方法"></a>申明方法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 接口名</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>帮助记忆：接口时抽象行为的“基类”</p><p><strong>命名规范：帕斯卡命名前加<code>I</code>!!!!!!!</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//方法不能有语句块</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">        <span class="comment">//属性只能用自动属性去写</span></span><br><span class="line">        <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引器里没有语句</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//事件后续再提到</span></span><br><span class="line">        <span class="keyword">event</span> Action dosomthing;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>接口可以用来继承</p><h3 id="1-一个类可以继承n个接口"><a href="#1-一个类可以继承n个接口" class="headerlink" title="1.一个类可以继承n个接口"></a>1.一个类可以继承n个接口</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>,<span class="title">xxx</span>,<span class="title">xxxx</span><span class="comment">//xxx,xxxx为接口名称</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-继承了接口后就必须实现其中的内容，并且必须是public的"><a href="#2-继承了接口后就必须实现其中的内容，并且必须是public的" class="headerlink" title="2.继承了接口后就必须实现其中的内容，并且必须是public的"></a>2.继承了接口后就必须实现其中的内容，并且必须是public的</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同时继承一个类，再继承一个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span>:<span class="title">Animal</span>,<span class="title">IFly</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action dosomthing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-实现的接口函数可以加v-virtual-再向子类中重写"><a href="#3-实现的接口函数可以加v-virtual-再向子类中重写" class="headerlink" title="3.实现的接口函数可以加v(virtual)再向子类中重写"></a>3.实现的接口函数可以加<code>v(virtual)</code>再向子类中重写</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>:<span class="title">Animal</span>,<span class="title">IFly</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//利用虚函数重写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action dosomthing;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-接口也遵循里氏替换原则"><a href="#4-接口也遵循里氏替换原则" class="headerlink" title="4.接口也遵循里氏替换原则"></a>4.接口也遵循里氏替换原则</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        IFly f = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p>接口是可以继承接口的</p><p>并且当接口继承接口时，<strong>不需要实现</strong>，而是通过<strong>后续</strong>的类继承时，再去实现<strong>所有接口的内容</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//方法不能有语句块</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">        <span class="comment">//属性只能用自动属性去写</span></span><br><span class="line">        <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引器里没有语句</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//事件后续再提到</span></span><br><span class="line">        <span class="keyword">event</span> Action dosomthing;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IWalk</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Walk</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IMove</span>:<span class="title">IFly</span>,<span class="title">IWalk</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Move</span>()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Tset</span> : <span class="title">IMove</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//暂时不要在意这里面的东西，只要知道是用来给实现占坑的就可以了</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); <span class="keyword">set</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); <span class="keyword">set</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> Action dosomthing;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IMove im = <span class="keyword">new</span> Tset();</span><br><span class="line">            IFly ifly = <span class="keyword">new</span> Tset();</span><br><span class="line">            IWalk iw = <span class="keyword">new</span> Tset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有的小伙伴可能会疑问<code>throw new NotImplementedException()</code><strong>是什么意思呢</strong>？这是VS中给类快速重构所有元素的一个方式，因为当一个子类的父类是抽象类，或者含有虚函数，抽象函数等，需要在类中重新书写的元素，再不定义之前，会进行报错。因此可以使用快速重构的方式，通过使用<code>throw new NotImplementedException()</code>来进行占位，意思是<strong>提醒你在这个位置，你还没有进行重写。</strong></p><h2 id="显式实现接口"><a href="#显式实现接口" class="headerlink" title="显式实现接口"></a>显式实现接口</h2><p>这是一个使用性并不是很强的东西，但面试的时候可能会需要。</p><p>当一个类继承两个接口时，接口中有同名重复的时候，所使用的一个方法。</p><p><strong>值得注意的是：显示实现接口时，不能写访问修饰符</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IAtk</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Atk</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ISuperAtk</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Atk</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">IAtk</span>, <span class="title">ISuperAtk</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//失去原本的两种不同行为方式的意义</span></span><br><span class="line">        <span class="comment">//后面的调用都只会使用的是同一种行为表示</span></span><br><span class="line">        <span class="comment">//public void Atk()</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">void</span> IAtk.Atk()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> ISuperAtk.Atk()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IAtk ia = <span class="keyword">new</span> Player();</span><br><span class="line">            ia.Atk();</span><br><span class="line">            ISuperAtk isa = <span class="keyword">new</span> Player();</span><br><span class="line">            isa.Atk();</span><br><span class="line">            <span class="comment">//调用方法</span></span><br><span class="line">            Player p =<span class="keyword">new</span> Player();</span><br><span class="line">            (p <span class="keyword">as</span> IAtk).Atk();</span><br><span class="line">            (p <span class="keyword">as</span> ISuperAtk).Atk();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h3><p>人、汽车、房子都需要登记，人需要到派出所登记，汽车需要去车管所登记，房子需要去房管局登记<br>使用接口实现登记方法</p><h3 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h3><p>麻雀、鸵鸟、企鹅、鹦鹉、直升机、天鹅。直升机和部分鸟能飞<br>鸵鸟和企鹅不能飞企鹅和天鹅能游泳<br>除直升机，其它都能走<br>请用面向对象相关知识实现</p><h3 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h3><p>多态来模拟移动硬盘、U盘、MP3查到电脑上读取数据移动硬盘与U盘都属于存储设备<br>MP3属于播放设备<br>但他们都能插在电脑上传输数据电脑提供了一个USB接口<br>请实现电脑的传输数据的功能</p><h3 id="A1-1"><a href="#A1-1" class="headerlink" title="A1"></a>A1</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IRegister</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Register</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span>:<span class="title">IRegister</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;在派出所登记&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span>:<span class="title">IRegister</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;在车管所登记&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">House</span>:<span class="title">IRegister</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;在房管局登记&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">IRegister[] arr = <span class="keyword">new</span> IRegister[] &#123; <span class="keyword">new</span> Person(), <span class="keyword">new</span> Home(), <span class="keyword">new</span> Car() &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i].Register();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A2-1"><a href="#A2-1" class="headerlink" title="A2"></a>A2</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Bird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Fly</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ISwimming</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Swimming</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Sparrow</span> : <span class="title">Bird</span>, <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Ostrich</span> : <span class="title">Bird</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Penguin</span> : <span class="title">Bird</span>, <span class="title">ISwimming</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swimming</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Parrot</span> : <span class="title">Bird</span>, <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Swan</span> : <span class="title">Bird</span>, <span class="title">IFly</span>, <span class="title">ISwimming</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Swimming</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Helicopter</span> : <span class="title">IFly</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fly</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A3"><a href="#A3" class="headerlink" title="A3"></a>A3</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IUSB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ReadData</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">StorageDevice</span> : <span class="title">IUSB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StorageDevice</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;正在传输数据&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MP3</span> : <span class="title">IUSB</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadData</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MP3传输数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> IUSB usb1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StorageDevice hd = <span class="keyword">new</span> StorageDevice(<span class="string">&quot;移动硬盘&quot;</span>);</span><br><span class="line">            StorageDevice ud = <span class="keyword">new</span> StorageDevice(<span class="string">&quot;U盘&quot;</span>);</span><br><span class="line">            MP3 mp3 = <span class="keyword">new</span> MP3();</span><br><span class="line"></span><br><span class="line">            Computer c = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">            c.usb1 = hd;</span><br><span class="line">            c.usb1.ReadData();</span><br><span class="line"></span><br><span class="line">            c.usb1 = ud;</span><br><span class="line">            c.usb1.ReadData();</span><br><span class="line"></span><br><span class="line">            c.usb1 = mp3;</span><br><span class="line">            c.usb1.ReadData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C#语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习入门（一）猫狗识别</title>
      <link href="/2023/04/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/"/>
      <url>/2023/04/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E7%8C%AB%E7%8B%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>本次猫狗识别参考的是<a href="https://blog.csdn.net/qq_51712037">余～意</a>大佬写的<a href="https://blog.csdn.net/qq_51712037/article/details/118855276">详解pytorch实现猫狗识别</a>来实现的，主要是通过代码去学习损失函数、数据加载等知识点的实际应用，和权重，学习率等对最后准确率的影响。</p><h1 id="期望实现的目标"><a href="#期望实现的目标" class="headerlink" title="期望实现的目标"></a>期望实现的目标</h1><ul><li><del>实现随机抽取9张测试集中的图片，通过模型来预测出结果</del> (已实现)</li></ul><h1 id="使用的数据集"><a href="#使用的数据集" class="headerlink" title="使用的数据集"></a>使用的数据集</h1><p>数据集采用两万五千张图片（未经筛选前），来源于<a href="https://www.kaggle.com">kaggle</a>官网，下载来源<a href="https://www.kaggle.com/datasets/salader/dogsvscats">dogsVScats | Kaggle</a></p><h1 id="代码的主要流程"><a href="#代码的主要流程" class="headerlink" title="代码的主要流程"></a>代码的主要流程</h1><ol><li>定义数据预处理的方法（包括图像增强、缩放、裁剪、翻转、标准化等）。</li><li>构建数据集（包括训练集和测试集）。</li><li>定义模型（使用预训练的 <code>ResNet-50</code> 网络结构，并替换最后一层的全连接层）。</li><li>定义损失函数和优化器。</li><li>进行模型训练，设置训练轮数和训练阶段（训练或测试），计算每个阶段的损失率和正确率。</li><li>保存模型参数。</li><li>从测试集中随机抽取9张图片，并用训练好的模型对这9张图片进行预测。</li><li>在 <code>Matplotlib</code> 中显示这9张图片和它们的预测结果。</li></ol><h2 id="定义数据处理方式："><a href="#定义数据处理方式：" class="headerlink" title="定义数据处理方式："></a>定义数据处理方式：</h2><p> 通过<code>transforms</code>定义了针对训练集和测试集的数据处理方式，包括随机裁剪、缩放、随机水平翻转、标准化等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data_trainsforms = &#123;</span><br><span class="line">    <span class="string">&quot;train&quot;</span>: transforms.Compose([</span><br><span class="line">        transforms.RandomResizedCrop(<span class="number">300</span>),</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.RandomCrop((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]),</span><br><span class="line">    ]),</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: transforms.Compose([</span><br><span class="line">        transforms.RandomResizedCrop(<span class="number">300</span>),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]),</span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载数据："><a href="#加载数据：" class="headerlink" title="加载数据："></a>加载数据：</h2><p>通过<code>datasets</code>模块中的<code>ImageFolder</code>方法加载数据集，并使用<code>DataLoader</code>进行批量处理和加载内存中，并且每次迭代返回一批样本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_loader = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=<span class="number">20</span>, shuffle=<span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><h2 id="定义模型："><a href="#定义模型：" class="headerlink" title="定义模型："></a>定义模型：</h2><p>使用<code>models</code>模块中的<code>resnet50</code>方法加载预训练好的ResNet-50模型，并修改最后一层全连接层的输出节点数为2，以适应猫狗二分类任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = models.resnet50(pretrained=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="训练模型："><a href="#训练模型：" class="headerlink" title="训练模型："></a>训练模型：</h2><p>采用交叉熵损失函数和Adam优化器进行模型训练，并在训练过程中计算损失率和正确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">epoch_n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch_n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>, epoch_n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> phase == <span class="string">&quot;train&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练中。。。&quot;</span>)</span><br><span class="line">            model.train(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试中。。。&quot;</span>)</span><br><span class="line">            model.train(<span class="literal">False</span>)</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader[phase], <span class="number">1</span>):</span><br><span class="line">            X, y = data</span><br><span class="line">            <span class="keyword">if</span> Use_gpu:</span><br><span class="line">                X, y = Variable(X.cuda()), Variable(y.cuda())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                X</span><br></pre></td></tr></table></figure><h2 id="测试模型："><a href="#测试模型：" class="headerlink" title="测试模型："></a>测试模型：</h2><p>在模型训练完成后，使用随机采样的方式从测试集中选取9张图片进行测试，并将预测结果可视化显示在Matplotlib中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pth&#x27;</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">test_images = image_datasets[<span class="string">&#x27;test&#x27;</span>].imgs</span><br><span class="line">random.shuffle(test_images)</span><br><span class="line">test_images = test_images[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, ncols=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Model Predictions&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (image_path, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_images):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    image = image.resize((<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    image = data_trainsforms[<span class="string">&#x27;test&#x27;</span>](image)</span><br><span class="line">    image = image.unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Use_gpu:</span><br><span class="line">        image = image.cuda()</span><br><span class="line">    output = model(image)</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(output.data, <span class="number">1</span>)</span><br><span class="line">    predicted_label = example_classees[predicted.item()]</span><br><span class="line"></span><br><span class="line">    image = image.cpu().numpy()</span><br><span class="line"></span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].imshow(np.transpose(image.squeeze(), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].set_title(predicted_label)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, models, transforms</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data_dir = <span class="string">&quot;E:/trains/CatsVSDogs&quot;</span></span><br><span class="line"><span class="comment"># 图片处理</span></span><br><span class="line">data_trainsforms = &#123;</span><br><span class="line">    <span class="string">&quot;train&quot;</span>: transforms.Compose([</span><br><span class="line">        transforms.RandomResizedCrop(<span class="number">300</span>),</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.RandomCrop((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]),</span><br><span class="line">    ]),</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: transforms.Compose([</span><br><span class="line">        transforms.RandomResizedCrop(<span class="number">300</span>),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>], [<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>]),</span><br><span class="line">    ]), &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接路径</span></span><br><span class="line">image_datasets = &#123;</span><br><span class="line">    x: datasets.ImageFolder(root=os.path.join(data_dir, x),</span><br><span class="line">                            transform=data_trainsforms[x])</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 数据加载器</span></span><br><span class="line">data_loader = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=<span class="number">20</span>, shuffle=<span class="literal">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span></span><br><span class="line">               [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">X_example, y_example = <span class="built_in">next</span>(<span class="built_in">iter</span>(data_loader[<span class="string">&quot;train&quot;</span>]))</span><br><span class="line">example_classees = image_datasets[<span class="string">&quot;train&quot;</span>].classes</span><br><span class="line">index_classes = image_datasets[<span class="string">&quot;train&quot;</span>].class_to_idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移学习模型</span></span><br><span class="line">model = models.resnet50(pretrained=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">Use_gpu = torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> parma <span class="keyword">in</span> model.parameters():</span><br><span class="line">    parma.requires_grad = <span class="literal">False</span>  <span class="comment"># 屏蔽预训练模型的权重，只训练最后一层的全连接的权重</span></span><br><span class="line">model.fc = torch.nn.Linear(<span class="number">2048</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Use_gpu:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数和优化器</span></span><br><span class="line">loss_f = torch.nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.Adam(model.fc.parameters(), lr=<span class="number">0.00001</span>)</span><br><span class="line"></span><br><span class="line">epoch_n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epoch_n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch &#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>, epoch_n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> phase == <span class="string">&quot;train&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练中。。。&quot;</span>)</span><br><span class="line">            model.train(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试中。。。&quot;</span>)</span><br><span class="line">            model.train(<span class="literal">False</span>)</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader[phase], <span class="number">1</span>):</span><br><span class="line">            X, y = data</span><br><span class="line">            <span class="keyword">if</span> Use_gpu:</span><br><span class="line">                X, y = Variable(X.cuda()), Variable(y.cuda())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                X, y = Variable(X), Variable(y)</span><br><span class="line"></span><br><span class="line">            y_pred = model(X)</span><br><span class="line"></span><br><span class="line">            _, pred = torch.<span class="built_in">max</span>(y_pred.data, <span class="number">1</span>)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss = loss_f(y_pred, y)</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">&quot;train&quot;</span>:</span><br><span class="line">                loss.backward()  <span class="comment"># 反向传播计算当前梯度# 误差反向传播，采用求导的方式，计算网络中每个节点参数的梯度，显然梯度越大说明参数设置不合理，需要调整</span></span><br><span class="line">                optimizer.step()  <span class="comment"># 优化采用设定的优化方法对网络中的各个参数进行调整</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            running_corrects += torch.<span class="built_in">sum</span>(pred == y.data)</span><br><span class="line">            <span class="keyword">if</span> batch % <span class="number">500</span> == <span class="number">0</span> <span class="keyword">and</span> phase == <span class="string">&quot;train&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Batch&#123;&#125;,训练损失率:&#123;:.4f&#125;,训练正确率:&#123;:.4f&#125;&quot;</span>.<span class="built_in">format</span>(batch, running_loss / batch,</span><br><span class="line">                                                                          <span class="number">100</span> * running_corrects / (<span class="number">20</span> * batch)))</span><br><span class="line">        epoch_loss = running_loss * <span class="number">20</span> / <span class="built_in">len</span>(image_datasets[phase])</span><br><span class="line">        epoch_acc = <span class="number">100</span> * running_corrects / <span class="built_in">len</span>(image_datasets[phase])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; 当前损失率:&#123;:.4f&#125; 当前正确率:&#123;:.4f&#125;%&quot;</span>.<span class="built_in">format</span>(phase, epoch_loss, epoch_acc))</span><br><span class="line">torch.save(model.state_dict(),<span class="string">&#x27;model.ckpt1&#x27;</span>)</span><br><span class="line">torch.save(model.state_dict(),<span class="string">&#x27;model.pth&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"></span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pth&#x27;</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">test_images = image_datasets[<span class="string">&#x27;test&#x27;</span>].imgs</span><br><span class="line">random.shuffle(test_images)</span><br><span class="line">test_images = test_images[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">3</span>, ncols=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;Model Predictions&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (image_path, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_images):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    image = image.resize((<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">    image = data_trainsforms[<span class="string">&#x27;test&#x27;</span>](image)</span><br><span class="line">    image = image.unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Use_gpu:</span><br><span class="line">        image = image.cuda()</span><br><span class="line">    output = model(image)</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(output.data, <span class="number">1</span>)</span><br><span class="line">    predicted_label = example_classees[predicted.item()]</span><br><span class="line"></span><br><span class="line">    image = image.cpu().numpy()</span><br><span class="line"></span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].imshow(np.transpose(image.squeeze(), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    axs[i//<span class="number">3</span>, i%<span class="number">3</span>].set_title(predicted_label)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><h2 id="可视化展示"><a href="#可视化展示" class="headerlink" title="可视化展示"></a>可视化展示</h2><p><img src="https://img-bed-b7y.pages.dev/img/code/CatsVsDogs/CastVsDogs_picture.jpg" alt=""></p><h2 id="测试损失率和成功率展示"><a href="#测试损失率和成功率展示" class="headerlink" title="测试损失率和成功率展示"></a>测试损失率和成功率展示</h2><p><img src="https://img-bed-b7y.pages.dev/img/code/CatsVsDogs/CatsVSDogs_test.png" alt=""></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本次实现的猫狗识别有以下不足：</p><ul><li>正确率并没有预期一样高，需要在原有清理过的训练集上，再次筛选。</li></ul><p>但是在本次的学习中，学会了如何使用可视化进行图片展示，和训练结果输出。同时再次巩固了深度学习神经网络的基本实现方式。以及上次在手写数字识别中没能实现的可视化展示、和模型的保存与迭代测试，在本次也得以解决。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猫狗识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#核心-继承</title>
      <link href="/2023/04/04/CSharp-Day2/"/>
      <url>/2023/04/04/CSharp-Day2/</url>
      
        <content type="html"><![CDATA[<h1 id="继承的基本规则"><a href="#继承的基本规则" class="headerlink" title="继承的基本规则"></a>继承的基本规则</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="继承的基本概念"><a href="#继承的基本概念" class="headerlink" title="继承的基本概念"></a>继承的基本概念</h3><p>就是，<strong>一个类A继承一个类B，类A将会继承类B的所有成员和所有的特征和行为</strong></p><p>被继承的类：<strong>父类，基类</strong></p><p>继承的类：<strong>子类，派生类</strong></p><p>子类<strong>可以有自己的</strong>特征和行为</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p><strong>1.单根性 子类只能有一个父类</strong></p><p><strong>注意：C#中没有C++的多继承！！！</strong></p><p><strong>2.传递性 子类可以简介继承父类的父类</strong></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>C#的继承和C++的类似，都是通过使用<code>:</code>来实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 : 被继承的类名</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="comment">//职工号</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> number;</span><br><span class="line">        <span class="comment">//介绍名字</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpeakName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TeachingTeacher</span> : <span class="title">Teacher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//科目</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> subject;</span><br><span class="line">        <span class="comment">//介绍科目</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpeakSubject</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(subject+<span class="string">&quot;老师&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ChineseTeacher</span> : <span class="title">TeachingTeacher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Skill</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是语文老师&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TeachingTeacher tt = <span class="keyword">new</span> TeachingTeacher();</span><br><span class="line">            tt.name = <span class="string">&quot;铅笔沫&quot;</span>;</span><br><span class="line">            tt.number = <span class="number">114514</span>;</span><br><span class="line">            tt.SpeakName();</span><br><span class="line">            tt.subject = <span class="string">&quot;Csharp&quot;</span>;</span><br><span class="line">            tt.SpeakSubject();</span><br><span class="line">            <span class="comment">//间接使用父类的父类</span></span><br><span class="line">            ChineseTeacher ct = <span class="keyword">new</span> ChineseTeacher();</span><br><span class="line">            ct.name = <span class="string">&quot;云笙繁华&quot;</span>;</span><br><span class="line">            ct.number = <span class="number">191981</span>;</span><br><span class="line">            ct.subject = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">            ct.SpeakName();</span><br><span class="line">            ct.SpeakSubject();</span><br><span class="line">            ct.Skill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问修饰符的影响"><a href="#访问修饰符的影响" class="headerlink" title="访问修饰符的影响"></a>访问修饰符的影响</h2><div class="table-container"><table><thead><tr><th></th><th>类型</th><th>可访问对象</th></tr></thead><tbody><tr><td>public</td><td>公共</td><td>内外部都可访问</td></tr><tr><td>private</td><td>私有</td><td>内部访问</td></tr><tr><td>protected</td><td>保护</td><td>内部和子类访问</td></tr><tr><td>internal（暂时了解）</td><td>内部的</td><td>在同一程序集的内部和成员</td></tr></tbody></table></div><h2 id="子类和父类的同名成员"><a href="#子类和父类的同名成员" class="headerlink" title="子类和父类的同名成员"></a>子类和父类的同名成员</h2><p>C#中允许子类存在和父类同名的成员（默认使用子类）</p><p>但是 及其不建议这么做，因此也不在这里过多叙述。</p><p>解决方式</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">public</span> <span class="built_in">string</span> name;（默认覆盖）</span><br><span class="line">+ <span class="keyword">public</span> <span class="keyword">new</span> <span class="built_in">string</span> name;（手写覆盖）</span><br><span class="line">    <span class="comment">//本质上都没什么用，总之非常不建议这么写</span></span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h3><p>写一个人类，人类中有姓名，年龄属性，有说话行为，战士类继承人类，有攻击行为</p><h3 id="A1"><a href="#A1" class="headerlink" title="A1"></a>A1</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我是&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Soldier</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attack</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;冲啊&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Soldier s = <span class="keyword">new</span> Soldier();</span><br><span class="line">            s.name = <span class="string">&quot;铅笔沫&quot;</span>;</span><br><span class="line">            s.Speak();</span><br><span class="line">            s.Attack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>面向对象七大原则之一，最容易理解且最重要的原则</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>任何父类出现的地方，子类都可以替代</p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>语法表现——父类容器装子类对象，因为子类对象中包含了父类的<strong>所有内容</strong></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>方便进行对象存储和管理</p><h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerAtk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;玩家攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Monster</span> : <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MonsterAtk</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;怪物攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boss</span> : <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BossAtk</span>()</span> </span><br><span class="line">        &#123; </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Boss攻击&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//里氏替换原则 用父类容器 装载子类对象</span></span><br><span class="line">            GameObject player = <span class="keyword">new</span> Player();</span><br><span class="line">            GameObject monster = <span class="keyword">new</span> Monster();</span><br><span class="line">            GameObject boss = <span class="keyword">new</span> Boss();</span><br><span class="line"></span><br><span class="line">            GameObject[] objects=<span class="keyword">new</span> GameObject[] &#123;<span class="keyword">new</span> Player(), <span class="keyword">new</span> Monster(), <span class="keyword">new</span> Boss()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="is-和-as"><a href="#is-和-as" class="headerlink" title="is 和 as"></a>is 和 as</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><div class="table-container"><table><thead><tr><th></th><th>基本概念</th><th>返回值</th><th>结果</th></tr></thead><tbody><tr><td>is</td><td>判断一个对象是否为执行对象</td><td>布尔类型</td><td>是为真，不是为假</td></tr><tr><td>as</td><td>将一个对象转换为指定类对象</td><td>指定类型对象</td><td>成功，返回指定类型对象，失败返回Null</td></tr></tbody></table></div><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><code>类对象 is 类名</code></li><li><code>类对象 as 类名</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(player <span class="keyword">is</span> Player)</span><br><span class="line">&#123;</span><br><span class="line">    Player p = player <span class="keyword">as</span> Player;</span><br><span class="line">    p.PlayerAtk();</span><br><span class="line">    </span><br><span class="line">    (player <span class="keyword">as</span> Player).PlayerAtk();<span class="comment">//完全等价于前两项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当父类数组里的内容不知道顺序是，可以使用for来遍历</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;objects.Lenth;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (objects[i] <span class="keyword">is</span> Player)</span><br><span class="line">    &#123;</span><br><span class="line">        (objects[i] <span class="keyword">as</span> Player).PlayerAtk();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (objects[i] <span class="keyword">is</span> Monster)</span><br><span class="line">    &#123;</span><br><span class="line">        (objects[i] <span class="keyword">as</span> Monster).MonsterAtk();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (objects[i] <span class="keyword">is</span> Boss)</span><br><span class="line">    &#123;</span><br><span class="line">        (objects[i] <span class="keyword">as</span> Boss).BossAtk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-is-和-as-的区别是什么"><a href="#Q1-is-和-as-的区别是什么" class="headerlink" title="Q1:is 和 as 的区别是什么"></a>Q1:is 和 as 的区别是什么</h3><p>写一个Monster类，它派生出Boss和Goblin两个类，Boss有技能; 小有攻击;随机生成10个怪，装载到数组中，遍历这个数组，调用他们的攻击方法，如果是boss就释放技能</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Boss</span> : <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BossSkill</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Boss发动技能&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Goblin</span> : <span class="title">Monster</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GoblinAtk</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;哥布林攻击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="built_in">int</span> randomNum;</span><br><span class="line">            Monster[] monsters = <span class="keyword">new</span> Monster[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i= <span class="number">0</span>; i &lt; monsters.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                randomNum = r.Next(<span class="number">1</span>,<span class="number">101</span>);</span><br><span class="line">                <span class="keyword">if</span>(randomNum &lt; <span class="number">50</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    monsters[i] = <span class="keyword">new</span> Boss();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    monsters[i] = <span class="keyword">new</span> Goblin();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;monsters.Length;i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (monsters[i] <span class="keyword">is</span> Boss)</span><br><span class="line">                &#123;</span><br><span class="line">                    (monsters[i] <span class="keyword">as</span> Boss).BossSkill();</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;发动技能成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (monsters[i] <span class="keyword">is</span> Goblin)</span><br><span class="line">                &#123;</span><br><span class="line">                    (monsters[i] <span class="keyword">as</span> Goblin).GoblinAtk();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Q2-Fps游戏模拟"><a href="#Q2-Fps游戏模拟" class="headerlink" title="Q2:Fps游戏模拟"></a>Q2:Fps游戏模拟</h3><p>写一个玩家类，玩家可以拥有各种武器现在有四种武器，冲锋枪，散弹枪，手枪，匕首玩家默认拥有匕首<br>请在玩家类中写一个方法，可以拾取不同的武器替换自己拥有的枪械</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Gamer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Weapon nowHaveWeapon;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Gamer</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            nowHaveWeapon = <span class="keyword">new</span> Dagger();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PickUp</span>(<span class="params">Weapon weapon</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            nowHaveWeapon = weapon;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Weapon</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SubmachineGun</span> : <span class="title">Weapon</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ShotGun</span> : <span class="title">Weapon</span> </span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Pistol</span> :<span class="title">Weapon</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dagger</span> : <span class="title">Weapon</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Gamer p = <span class="keyword">new</span> Gamer();</span><br><span class="line">            SubmachineGun s = <span class="keyword">new</span> SubmachineGun();</span><br><span class="line">            p.PickUp(s);</span><br><span class="line">            ShotGun sg = <span class="keyword">new</span> ShotGun();</span><br><span class="line">            p.PickUp(sg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="继承中的构造函数"><a href="#继承中的构造函数" class="headerlink" title="继承中的构造函数"></a>继承中的构造函数</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p>当申明一个子类对象时，先执行父类的构造函数，再执行子类的构造函数</p><p><strong>注意</strong></p><ol><li>父类的无参构造，<strong>很重要</strong></li><li>子类可以通过<code>base</code>关键字调用父类构造。</li></ol><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p><strong>父类的父类构造-&gt;父类构造-&gt;子类构造</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObject</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GameObject的构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">GameObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Player</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Player的构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MainPlayer</span>:<span class="title">Player</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainPlayer</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MainPlayer的构造函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MainPlayer player = <span class="keyword">new</span> MainPlayer();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="父类的无参构造函数重要"><a href="#父类的无参构造函数重要" class="headerlink" title="父类的无参构造函数重要"></a>父类的无参构造函数重要</h2><p>由于子类默认调用的是父类的无参构造函数，因此当父类有参构造函数，并且没有将无参构造空实现时，将无法正常构建子类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span>()<span class="comment">//如果注释掉该段代码，Son子类将无法继承</span></span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span>(<span class="params"><span class="built_in">int</span> i</span>)</span> </span><br><span class="line">    &#123; </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Father构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> : <span class="title">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Son的构造&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过base调用指定父类函数"><a href="#通过base调用指定父类函数" class="headerlink" title="通过base调用指定父类函数"></a>通过base调用指定父类函数</h2><p>要是想要子类调用一个指定的构造函数（无参或者有参）该怎么办呢？</p><p>那我们可以选择通过base来进行调用，并且<strong>也可以解决</strong>刚才由于父类中没有无参构造，导致子类无法继承的问题</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Father</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//public Father()</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Father</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Father构造&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Son</span> : <span class="title">Father</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第一种解决方式，通过调用base</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Son</span>(<span class="params"><span class="built_in">int</span> i</span>) : <span class="title">base</span>(<span class="params">i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Son的第一个构造&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种解决方式，通过this，</span></span><br><span class="line">        <span class="comment">//但是this(i)调用的是 Son(int i) 这个有参构造，</span></span><br><span class="line">        <span class="comment">//再间接调用base(i)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Son</span>(<span class="params"><span class="built_in">int</span> i, <span class="built_in">string</span> str</span>) : <span class="title">this</span>(<span class="params">i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Son的第二个构造&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Son son = <span class="keyword">new</span> Son(<span class="number">1</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>换而言之，base调用的是父类中的构造函数，而this只能调用属于自己的构造函数。</p><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1："><a href="#Q1：" class="headerlink" title="Q1："></a>Q1：</h3><p>有一个打工人基类，有工种，工作内容两个特征，一个工作方法。程序员、策划、美术，分别继承打工人，请用继承中的构造函数这个知识点，实例化3个上述对象。</p><h3 id="A1："><a href="#A1：" class="headerlink" title="A1："></a>A1：</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> type;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> content;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span>(<span class="params"><span class="built_in">string</span> type, <span class="built_in">string</span> content</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>,type ,content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Programmer</span>:<span class="title">Worker</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Programmer</span>() : <span class="title">base</span>(<span class="params"><span class="string">&quot;程序员&quot;</span>, <span class="string">&quot;编程&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Plan</span>:<span class="title">Worker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Plan</span>():<span class="title">base</span>(<span class="params"><span class="string">&quot;策划&quot;</span>,<span class="string">&quot;设计游戏&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Art</span> : <span class="title">Worker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Art</span>() : <span class="title">base</span>(<span class="params"><span class="string">&quot;美术&quot;</span>, <span class="string">&quot;画画&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Programmer programmer = <span class="keyword">new</span> Programmer();</span><br><span class="line">            programmer.Work();</span><br><span class="line">            Plan plan= <span class="keyword">new</span> Plan();</span><br><span class="line">            plan.Work();</span><br><span class="line">            Art art= <span class="keyword">new</span> Art();</span><br><span class="line">            art .Work();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="万物之父和装箱拆箱"><a href="#万物之父和装箱拆箱" class="headerlink" title="万物之父和装箱拆箱"></a>万物之父和装箱拆箱</h1><h2 id="万物之父"><a href="#万物之父" class="headerlink" title="万物之父"></a>万物之父</h2><p>关键字：<code>object</code>或<code>Object</code></p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><strong>object是所有类型的基类</strong>，它是一个类（引用类型）</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ol><li>可以利用里氏替换原则，用object容器装所有对象</li><li>可以用来表示不确定类型，作为函数参数类型</li></ol><h2 id="万物之父的使用"><a href="#万物之父的使用" class="headerlink" title="万物之父的使用"></a>万物之父的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> : <span class="title">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;万物之父和装箱拆箱&quot;</span>);</span><br><span class="line">            Father f = <span class="keyword">new</span> Son();<span class="comment">//父类容器装载子类容器</span></span><br><span class="line">            <span class="keyword">if</span>( f <span class="keyword">is</span> Son )</span><br><span class="line">            &#123;</span><br><span class="line">                (f <span class="keyword">as</span> Son).Speak();</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//引用类型 </span></span><br><span class="line">            <span class="built_in">object</span> o = <span class="keyword">new</span> Son();<span class="comment">//用object 装载</span></span><br><span class="line">            <span class="comment">//用is as 来判断和转换即可</span></span><br><span class="line">            <span class="keyword">if</span>( o <span class="keyword">is</span> Son )</span><br><span class="line">            &#123;</span><br><span class="line">                (o <span class="keyword">as</span> Son).Speak();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//值类型 </span></span><br><span class="line">            <span class="built_in">object</span> o2 = <span class="number">1f</span>;<span class="comment">//float类型</span></span><br><span class="line">            <span class="comment">//用强转</span></span><br><span class="line">            <span class="built_in">float</span> fl = (<span class="built_in">float</span>)o2;<span class="comment">//希望使用值类型，来进行计算</span></span><br><span class="line">o = Son(o) <span class="comment">//引用类型，也可以进行强转</span></span><br><span class="line">            <span class="comment">//特殊的string类型</span></span><br><span class="line">            <span class="built_in">object</span> str = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> str2 = str <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="comment">// string str2 = str.Tostring(); 这种做法也是等价于上一行代码的</span></span><br><span class="line">            <span class="comment">//数组类型</span></span><br><span class="line">            <span class="built_in">object</span> arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="built_in">int</span>[] ar = arr <span class="keyword">as</span> <span class="built_in">int</span>[];<span class="comment">//引用类型更推荐使用 引用类型</span></span><br><span class="line">            <span class="comment">//int [] ar = (int[])arr; 这种做法等价于上一行代码</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h2><p>装箱和拆箱，大可以理解为一种<strong>行为</strong>。</p><h3 id="发生条件"><a href="#发生条件" class="headerlink" title="发生条件"></a>发生条件</h3><p>用object<strong>存储</strong>值类型时，称为<strong>装箱</strong>。再将object<strong>转为</strong>值类型时，称为<strong>拆箱</strong></p><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>把值类型用引用类型存储，栈内存会迁移到堆内存中。因为有内存的迁移，就会带来性能的消耗。</p><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>把引用类型存储的值类型取出来，堆内存会迁移到栈内存中。</p><p>因此，要尽量少用装箱和拆箱，这两个功能。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>不确定类型时可以方便参数的存储和传递</p><h3 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h3><p>存在内存迁移，增加性能消耗</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//装箱</span></span><br><span class="line">            <span class="built_in">object</span> v = <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">int</span> intV = (<span class="built_in">int</span>)v;</span><br><span class="line">            TestFun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">            TestFun_2(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3f</span>,<span class="string">&quot;456&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//只能传int 类型的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TsetFun</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] array</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//传什么类型的参数都可以</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TsetFun_2</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">object</span>[] array</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里就可以去遍历，用里氏替换原则一个一个去判断，做对应的处理</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h1><h2 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h2><p>是一个使用 sealed密封关键字修饰类，使该类无法再被继承</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Son</span>:<span class="title">Father</span><span class="comment">//让儿子结扎，让儿子没有儿子，父类没有孙子</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">报错，因为儿子被断后了</span></span><br><span class="line"><span class="comment">class T:son</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><p>在面向对象程序的设计中，密封类的主要作用就是不允许最底层子类被继承，可以保证程序的规范性、安全性。</p><h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1:"></a>Q1:</h3><p>定义一个载具类，速度，最大速度，可乘人数，司机和乘客等，有上车，下车，行驶，车祸等方法，用载具声明一个对象，并将若干人装载上车。</p><h3 id="A1-1"><a href="#A1-1" class="headerlink" title="A1:"></a>A1:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.ConstrainedExecution;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography.X509Certificates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Driver</span>:<span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Passenger</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> speed;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> maxspeed;</span><br><span class="line">        <span class="comment">//当前装载的人数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> num;</span><br><span class="line">        <span class="keyword">public</span> Person[] persons;</span><br><span class="line">        <span class="comment">//Car的初始化</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"><span class="built_in">int</span> speed, <span class="built_in">int</span> maxspeed, <span class="built_in">int</span> num</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.speed = speed;</span><br><span class="line">            <span class="keyword">this</span>.maxspeed = maxspeed;</span><br><span class="line">            <span class="keyword">this</span>.num = <span class="number">0</span>;</span><br><span class="line">            persons= <span class="keyword">new</span> Person[num];<span class="comment">//最多能装多少人</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetIn</span>(<span class="params">Person p </span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num&gt;=persons.Length)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;满载&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            persons[num] = p;</span><br><span class="line">            ++num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetOff</span>(<span class="params">Person p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;persons.Length;i++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (persons[i] == <span class="literal">null</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (persons[i]==p)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//移动人的位置</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="built_in">int</span> j=i;j&lt;num<span class="number">-1</span>;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        persons[j] = persons[j+<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//其管控最后一个位置</span></span><br><span class="line">                    persons[num - <span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">                    --num;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;我下车了&quot;</span>); </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Move</span>()</span> </span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Boom</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Car c = <span class="keyword">new</span> Car(<span class="number">10</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            Driver d = <span class="keyword">new</span> Driver();</span><br><span class="line">            c.GetIn(d);</span><br><span class="line"></span><br><span class="line">            Passenger p =<span class="keyword">new</span> Passenger();</span><br><span class="line">            c.GetIn(p);</span><br><span class="line">            Passenger p2 =<span class="keyword">new</span> Passenger();</span><br><span class="line">            c.GetIn(p2);</span><br><span class="line">            Passenger p3 = <span class="keyword">new</span> Passenger();</span><br><span class="line">            c.GetIn(p3);</span><br><span class="line"></span><br><span class="line">            c.GetOff(p2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C#语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习入门（一）手写数字识别</title>
      <link href="/2023/03/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2023/03/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>本次手写数字识别参考的是<a href="https://michaelnielsen.org/">Michael Nielsen</a>大佬写的 <a href="http://neuralnetworksanddeeplearning.com">Neural Networks and Deep Learning</a> 来实现的，由于本书的代码都是由 Python 2.0 编写而成，因此这次我打算使用 Python 3.9 来进行源代码的修改，之后再去实现手写数字识别</p><h1 id="期望实现的目标"><a href="#期望实现的目标" class="headerlink" title="期望实现的目标"></a>期望实现的目标</h1><ul><li><del>通过Python3.9实现手写数字识别的基本代码</del></li><li><del>基于以上代码实现出一个较为精确的模型并产生可视化函数</del></li><li>实现在每次返回后随机抽取9个图片显示，并在上方显示出识别出的数字结果</li><li>基于模型的基础上，做出一套可以通过识别自己笔迹，实时输出的手写数字识别系统</li></ul><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="MNIST数据库"><a href="#MNIST数据库" class="headerlink" title="MNIST数据库"></a>MNIST数据库</h2><p>MNIST 数据集可在 <a href="http://yann.lecun.com/exdb/mnist/">获取</a>, 它包含了四个部分:</p><ul><li><strong>Training set images</strong>: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li><li><strong>Training set labels</strong>: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li><li><strong>Test set images</strong>: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li><li><strong>Test set labels</strong>: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li></ul><p>和其他的手写数字识别一样，都是用 Training 中的 60000 个样本进行训练，再用 Test 中的 10000 个样本进行验证</p><h2 id="Numpy-的-Python-库"><a href="#Numpy-的-Python-库" class="headerlink" title="Numpy 的 Python 库"></a>Numpy 的 Python 库</h2><p>如果你没有安装过 Anaconda ，那我强烈建议你去安装，因为真的是太方便了。</p><p>如果没有的话也可以在这里<a href="https://scipy.org/install/">下载</a></p><h1 id="神经网络搭建"><a href="#神经网络搭建" class="headerlink" title="神经网络搭建"></a>神经网络搭建</h1><h2 id="神经网络代码的核心特征"><a href="#神经网络代码的核心特征" class="headerlink" title="神经网络代码的核心特征"></a>神经网络代码的核心特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sizes</span>):</span><br><span class="line">        self.num_layers = <span class="built_in">len</span>(sizes)</span><br><span class="line">        self.sizes = sizes</span><br><span class="line">        <span class="comment"># 偏置的随机初始化</span></span><br><span class="line">        self.biases = [np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> sizes[<span class="number">1</span>:]]</span><br><span class="line">        <span class="comment"># 权重的随机初始化</span></span><br><span class="line">        self.weights = [np.random.randn(y, x)</span><br><span class="line">                        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(sizes[:-<span class="number">1</span>], sizes[<span class="number">1</span>:])]</span><br></pre></td></tr></table></figure><h3 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h3><h4 id="size列表"><a href="#size列表" class="headerlink" title="size列表"></a>size列表</h4><p>包含各层神经元。假如想要创建一个3层的神经网络，每层分别有2,3,1个神经元，则使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net = Network([<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="np-random-randn"><a href="#np-random-randn" class="headerlink" title="np.random.randn()"></a>np.random.randn()</h4><p>是Numpy中的一员来⽣成均值为 0，标准差为 1 的高斯分布。这样就可以将我们所设置的神经网络对象，进行 w （权重），b (偏置) 进行随机初始化。</p><h4 id="值得注意的是"><a href="#值得注意的是" class="headerlink" title="值得注意的是"></a>值得注意的是</h4><ol><li>这个核心代码，默认情况为，第一层神经元均为输入层，并且不对这些神经元进行任何的偏置处理。</li><li><code>net.weight[1]</code>是一个存储着链接二、三层神经元的权重。</li></ol><h2 id="定义S型函数"><a href="#定义S型函数" class="headerlink" title="定义S型函数"></a>定义S型函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">z</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span>+np.exp(-z))</span><br></pre></td></tr></table></figure><p>PS:注意，当输入z 是⼀个向量或者 Numpy 数组时，Numpy 自动地按元素应用<code>sigmoid()</code> 函数。</p><p><code>np.exp()</code>执行e^x^运算。</p><h2 id="添加向前传播的行为方式"><a href="#添加向前传播的行为方式" class="headerlink" title="添加向前传播的行为方式"></a>添加向前传播的行为方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feedforward</span>(<span class="params">self,a</span>):</span><br><span class="line">    <span class="keyword">for</span> b,w <span class="keyword">in</span> <span class="built_in">zip</span>(self.biases,self.weights):</span><br><span class="line">        a = sigmoid(np.dot(w,a)+b)</span><br></pre></td></tr></table></figure><p>目的：为每一层都应用 </p><script type="math/tex; mode=display">a^′ = σ(wa + b)</script><p> 这个公式</p><p><code>np.dot()</code>函数是为了执行，线性代数中的矩阵乘法。</p><h2 id="实现梯度下降学习的SGD方法"><a href="#实现梯度下降学习的SGD方法" class="headerlink" title="实现梯度下降学习的SGD方法"></a>实现梯度下降学习的SGD方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">self, training_data, epochs, mini_batch_size, eta, test_data=<span class="literal">None</span></span>):</span><br><span class="line">    accuracy_list = []</span><br><span class="line">    <span class="keyword">if</span> test_data:</span><br><span class="line">        n_test = <span class="built_in">len</span>(test_data)</span><br><span class="line">    n = <span class="built_in">len</span>(training_data)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">        random.shuffle(training_data)</span><br><span class="line">        mini_batches = [</span><br><span class="line">            training_data[k:k+mini_batch_size]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n, mini_batch_size)]</span><br><span class="line">        <span class="keyword">for</span> mini_batch <span class="keyword">in</span> mini_batches:</span><br><span class="line">            <span class="comment"># 实现一次梯度下降</span></span><br><span class="line">            self.update_mini_batch(mini_batch, eta)</span><br><span class="line">        <span class="keyword">if</span> test_data:</span><br><span class="line">            <span class="comment"># 计算正确率</span></span><br><span class="line">            accuracy = self.evaluate(test_data) / n_test</span><br><span class="line">            accuracy_list.append(accuracy)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;j&#125;</span>: <span class="subst">&#123;self.evaluate(test_data)&#125;</span> / <span class="subst">&#123;n_test&#125;</span>;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;j&#125;</span> complete&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="定义参数："><a href="#定义参数：" class="headerlink" title="定义参数："></a>定义参数：</h3><ul><li>self：指代类实例本身。</li><li>training_data：包含了训练数据及其对应标签的列表。</li><li>epochs：表示要遍历整个训练数据集的次数。</li><li>mini_batch_size：表示每次迭代中使用的小批量样本的大小。</li><li>eta：学习效率，用于控制梯度下降的步长。</li><li>test_data：可选参数，包含了测试数据及其对应标签的列表。</li></ul><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol><li>如果提供了测试数据，则计算测试数据的数量<code>n_test</code>。</li><li>对于每个<code>epoch</code>，将训练数据随机打乱。</li><li>将打乱后的训练数据分割成小批量样本。</li><li>对于每个小批量样本，使用<code>self.update_mini_batch</code>方法更新神经网络的权重和偏置。</li><li>如果提供了测试数据，则在每个epoch结束时，使用<code>self.evaluate</code>方法计算神经网络在测试数据上的准确率，并打印输出。</li><li>如果没有提供测试数据，则在每个epoch结束时，输出”Epoch {j} complete”。</li></ol><h2 id="实现小批量样本的更新"><a href="#实现小批量样本的更新" class="headerlink" title="实现小批量样本的更新"></a>实现小批量样本的更新</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_mini_batch</span>(<span class="params">self, mini_batch, eta</span>):</span><br><span class="line">    <span class="comment"># 存储偏置和权重的梯度</span></span><br><span class="line">nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> self.biases]</span><br><span class="line">nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> self.weights]</span><br><span class="line"><span class="comment"># 分别计算每个样本的偏导数</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> mini_batch:</span><br><span class="line">delta_nabla_b, delta_nabla_w = self.backprop(x, y)</span><br><span class="line">nabla_b = [nb+dnb <span class="keyword">for</span> nb, dnb <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_b, delta_nabla_b)]</span><br><span class="line">nabla_w = [nw+dnw <span class="keyword">for</span> nw, dnw <span class="keyword">in</span> <span class="built_in">zip</span>(nabla_w, delta_nabla_w)]</span><br><span class="line">    <span class="comment"># 函数实现</span></span><br><span class="line">self.weights = [w-(eta/<span class="built_in">len</span>(mini_batch))*nw <span class="keyword">for</span> w, nw <span class="keyword">in</span> <span class="built_in">zip</span>(self.weights, nabla_w)]</span><br><span class="line">self.biases = [b-(eta/<span class="built_in">len</span>(mini_batch))*nb <span class="keyword">for</span> b, nb <span class="keyword">in</span> <span class="built_in">zip</span>(self.biases, nabla_b)]</span><br></pre></td></tr></table></figure><p>具体来说，该函数接收一个<code>mini_batch</code>（一个由训练样本和对应的标签组成的元组列表）、一个学习率eta作为输入，然后计算出该小批次样本的梯度并更新权重和偏置。</p><p>该函数首先初始化了两个空列表<code>nabla_b</code>和<code>nabla_w</code>，用于存储偏置和权重的梯度。然后使用<code>backprop</code>方法计算每个样本的偏导数，并将它们累加到<code>nabla_b</code>和<code>nabla_w</code>中。</p><p>接下来，该函数使用更新后的权重和偏置的公式，具体来说，对于每个权重和偏置，函数将其减去一个学习率（eta）乘以其对应的梯度（nabla_w和nabla_b），并除以<code>mini_batch</code>的大小</p><script type="math/tex; mode=display">w_k → w^′_k = w_k − η\frac{∂C}{∂w_k}</script><script type="math/tex; mode=display">b_l → b^′_l = b_l − η\frac{∂C}{∂b_l}</script><h2 id="反向传播-定义backprop"><a href="#反向传播-定义backprop" class="headerlink" title="反向传播 定义backprop()"></a>反向传播 定义backprop()</h2><p>是一种<strong>反向传播</strong>的算法，一种快速计算代价函数梯度的方法。在本函数中具体用来计算每个样本的偏置与权重的偏导数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backprop</span>(<span class="params">self, x, y</span>):</span><br><span class="line">nabla_b = [np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> self.biases]</span><br><span class="line">nabla_w = [np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> self.weights]</span><br><span class="line"><span class="comment"># 前向传播</span></span><br><span class="line">activation = x</span><br><span class="line">activations = [x]</span><br><span class="line">zs = []</span><br><span class="line"><span class="keyword">for</span> b, w <span class="keyword">in</span> <span class="built_in">zip</span>(self.biases, self.weights):</span><br><span class="line">z = np.dot(w, activation)+b</span><br><span class="line">zs.append(z)</span><br><span class="line">activation = sigmoid(z)</span><br><span class="line">activations.append(activation)</span><br><span class="line"><span class="comment"># 反向传播</span></span><br><span class="line">delta = self.cost_derivative(activations[-<span class="number">1</span>], y) * \sigmoid_prime(zs[-<span class="number">1</span>])</span><br><span class="line">    nabla_b[-<span class="number">1</span>] = delta</span><br><span class="line">    nabla_w[-<span class="number">1</span>] = np.dot(delta, activations[-<span class="number">2</span>].transpose())</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, self.num_layers):</span><br><span class="line">        z = zs[-l]</span><br><span class="line">        sp = sigmoid_prime(z)</span><br><span class="line">        delta = np.dot(self.weights[-l+<span class="number">1</span>].transpose(), delta) * sp</span><br><span class="line">        nabla_b[-l] = delta</span><br><span class="line">        nabla_w[-l] = np.dot(delta, activations[-l-<span class="number">1</span>].transpose())</span><br><span class="line">        <span class="keyword">return</span> (nabla_b, nabla_w)</span><br></pre></td></tr></table></figure><p>输入$x$ 和 $y$，并返回一个元组 <code>(nabla_b, nabla_w)</code>，表示代价函数 <code>C_x</code> 的梯度。其中 <code>nabla_b</code> 和 <code>nabla_w</code> 是逐层存储的 Numpy 数组列表，与 <code>self.biases</code> 和 <code>self.weights</code> 类似。</p><script type="math/tex; mode=display">a^l_j = σ(\sum _k w^l_{jk}a^{l−1}_k + b^l_j)</script><script type="math/tex; mode=display">δ^l_j ≡\frac{∂C}{∂z^l_j}</script><p>首先，该函数进行前向传播计算，计算出每层的激活值<code>(activations[])</code>和加权输入值<code>(zs[])</code>，然后，函数计算输出层的误差（即 $\delta$），并使用误差反向传播算法来计算每层的误差。应用如上公式</p><p>对于每一层，误差计算需要使用前一层的误差来计算，并且在计算时还需要使用该层的加权输入值和激活函数的导数。最后，函数返回 <code>nabla_b</code> 和 <code>nabla_w</code>，表示代价函数相对于每个偏置和权重的梯度。</p><h2 id="神经网络评估"><a href="#神经网络评估" class="headerlink" title="神经网络评估"></a>神经网络评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate</span>(<span class="params">self, test_data</span>):</span><br><span class="line">    <span class="comment">#函数获取预测值中最大值所对应的类别标签，并将其与真实标签 y 组成元组</span></span><br><span class="line">    test_results = [(np.argmax(self.feedforward(x)), y) </span><br><span class="line">                    <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data]</span><br><span class="line">    <span class="comment">#将相同的标签存入列表中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">int</span>(x == y) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_results)</span><br></pre></td></tr></table></figure><h4 id="np-argmax"><a href="#np-argmax" class="headerlink" title="np.argmax()"></a>np.argmax()</h4><p><code>numpy.argmax(a, axis=None, out=None)</code></p><p>函数功能，返回最大值的索引。</p><p>若axis=1，表明按行比较，输出每行中最大值的索引，若axis=0，则输出每列中最大值的索引。</p><p><code>test_results = [(np.argmax(self.feedforward(x)), y) for (x, y) in test_data]</code>：将测试数据中的每个样本 <code>x</code> 通过神经网络前向传播得到预测值，使用 <code>np.argmax()</code> 函数获取预测值中最大值所对应的类别标签，并将其与真实标签 <code>y</code> 组成元组，存入列表 <code>test_results</code> 中。</p><p><code>return sum(int(x == y) for (x, y) in test_results)</code>：遍历 <code>test_results</code> 列表，如果预测值 <code>x</code> 与真实标签 <code>y</code> 相同，则将其转换为整数 <code>1</code>，否则为整数 <code>0</code>，最后将所有转换后的整数相加，得到正确分类的样本数，作为模型在测试数据上的准确率进行返回。</p><h2 id="计算输出激活的偏导数向量"><a href="#计算输出激活的偏导数向量" class="headerlink" title="计算输出激活的偏导数向量"></a>计算输出激活的偏导数向量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cost_derivative</span>(<span class="params">self, output_activations, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (output_activations-y)</span><br></pre></td></tr></table></figure><h2 id="实现可视化函数"><a href="#实现可视化函数" class="headerlink" title="实现可视化函数"></a>实现可视化函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_accuracy</span>(<span class="params">self, accuracy_list</span>):</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(accuracy_list) + <span class="number">1</span>), accuracy_list)</span><br><span class="line">plt.title(<span class="string">&#x27;Accuracy during Training&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="导入MNIST数据库"><a href="#导入MNIST数据库" class="headerlink" title="导入MNIST数据库"></a>导入MNIST数据库</h1><p>将下列代码单独存放在一个.py文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="comment"># 下方修改文件路径</span></span><br><span class="line">    f = gzip.<span class="built_in">open</span>(<span class="string">&#x27;./data/mnist.pkl.gz&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    training_data, validation_data, test_data = pickle.load(f, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> training_data, validation_data, test_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出文件各部分信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_wrapper</span>():</span><br><span class="line">    tr_d, va_d, te_d = load_data()</span><br><span class="line">    training_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> tr_d[<span class="number">0</span>]]</span><br><span class="line">    training_results = [vectorized_result(y) <span class="keyword">for</span> y <span class="keyword">in</span> tr_d[<span class="number">1</span>]]</span><br><span class="line">    training_data = <span class="built_in">list</span>(<span class="built_in">zip</span>(training_inputs, training_results))</span><br><span class="line">    validation_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> va_d[<span class="number">0</span>]]</span><br><span class="line">    validation_data = <span class="built_in">list</span>(<span class="built_in">zip</span>(validation_inputs, va_d[<span class="number">1</span>]))</span><br><span class="line">    test_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> te_d[<span class="number">0</span>]]</span><br><span class="line">    test_data = <span class="built_in">list</span>(<span class="built_in">zip</span>(test_inputs, te_d[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> training_data, validation_data, test_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vectorized_result</span>(<span class="params">j</span>):</span><br><span class="line">    e = np.zeros((<span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">    e[j] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h1><p><img src="..\data_img\mnist\result_1.1.png" alt="result_1.1"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本次实现的手写识别有几点不足：</p><ol><li>没能实现显示特征图和预测结果将其输出。（这点会在之后的学习中，进行增加）</li><li>没能实现手写及时输出。（是未来可以学习去实现的一个目标，会在之后的学习当中去完善）</li></ol><p>出现以上几点问题的原因主要还是，学习的东西知之甚少，不能将一些功能写出，并为自己所用。</p><p>个人感觉现在的已有代码身上，对增加测试数据和保存有些麻烦，之后会在空闲时间，通过使用pytorch，重新再写一份手写数字识别，并争取能够实现本次没能实现的两个目标。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写数字识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icpc-Day1</title>
      <link href="/2023/02/06/icpc-Day1/"/>
      <url>/2023/02/06/icpc-Day1/</url>
      
        <content type="html"><![CDATA[<p>c</p><p>哈希表的查找</p><p>基本思想：记录的存贮位置与关键字之间存在对应关系，<code>Loc(i)</code></p><p>Hash(key)=key mod p(p是一个整数)</p><p>有一个关键字 key=962148，规定哈希表m=25，取质数23</p><p>t雪花题目的思路</p><p>取一个自定义素数利用哈希查找的方式，与质数取模。写的时候可以选择顺时针比较和逆时针比较</p><p>1.先定义一个结构体，来存储每片雪花的六个角。</p><p>2.Bool 函数，用for循环进行比较（双for嵌套设k=(i+j)%6将x[k]与y[j]比较，不相等则跳出第二层循环，当j==5时return true）</p><p>星空矩阵的思路</p><p>1.采用欧矢距离和 sum</p><p>2.获取当前连通块，赋予字母</p><p>3.dfs(sx,sy)</p><p>4.get_id(sum)，以当前sum取hash找，找到dfs()没有返回id</p><p>5.get_sum()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++核心_4</title>
      <link href="/2023/01/30/C++-Day4/"/>
      <url>/2023/01/30/C++-Day4/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的模板"><a href="#C-的模板" class="headerlink" title="C++的模板"></a>C++的模板</h1><h2 id="模板的概念"><a href="#模板的概念" class="headerlink" title="模板的概念"></a>模板的概念</h2><p>模板就是建立通用的摸具，提高复用性</p><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>C++提供两种模板机制：<strong>函数模板</strong>和<strong>类模板</strong></p><h3 id="函数模板语法"><a href="#函数模板语法" class="headerlink" title="函数模板语法"></a>函数模板语法</h3><p>函数语法作用：</p><p>建立一个通用的函数，其函数返回值和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p>template：声明函数模板</p><p>typename：表面其后面的富豪是一种数据类型，可以用class代替</p><p>T：通用的数据类型，名称可以替换，通常为大写字母</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//声明一个模板 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sawp</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T tmp = a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b =<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//自动类型推导</span></span><br><span class="line">    <span class="built_in">sawp</span>(a,b);</span><br><span class="line">    <span class="comment">//显示指定类型</span></span><br><span class="line">    <span class="built_in">swap</span>&lt;<span class="type">int</span>&gt;(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.自动类型推导，必须推导出一致的数据类型T，才可以使用</p><p>2.模板必须要确定出T的数据类型，才可以使用</p>]]></content>
      
      
      <categories>
          
          <category> C++语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心_3</title>
      <link href="/2023/01/29/C++-Day3/"/>
      <url>/2023/01/29/C++-Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的文件操作"><a href="#C-的文件操作" class="headerlink" title="C++的文件操作"></a>C++的文件操作</h1><p>程序运行时产生的数据都属于临时数据，程序一旦运行解释都会被释放</p><p>通过文件可以将<strong>数据持久化</strong></p><p>c++中文件操作需要报刊头文件<code>&lt;fstream&gt;</code></p><p>文件类型分为两种：</p><p>1.文本文件     —<strong>ASCII码存储</strong></p><p>2.二进制文件 —<strong>二进制形式存储</strong></p><p>操作文件的三大类：</p><p>1.写操作：ofstream</p><p>2.读操作：ifstream</p><p>3.读写操作：fstream</p><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>步骤：</p><p>1.包含头文件</p><p><code>#include &lt;fstream&gt;</code></p><p>2.创造流对象</p><p><code>ofstream ofs;</code></p><p>3.打开文件</p><p><code>ofs.open(&quot;文件路径&quot;,打开方式);</code></p><p>4.写数据</p><p><code>ofs&lt;&lt;&quot;写入的数据&quot;;</code></p><p>5.关闭文件</p><p><code>ofs.close()</code></p><p>文件打开方式</p><div class="table-container"><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios:: binary</td><td>二进制方式</td></tr></tbody></table></div><p><strong>注意：</strong>文件打开方式可以配合使用，利用<code>|</code>操作符</p><p><strong>例如：</strong>用二进制方式写文件<code>iOS::binary | ios::out</code></p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p><strong>步骤：</strong></p><p>1.包含头文件</p><p><code>#include &lt;fstream&gt;</code></p><p>2.创建流对象</p><p><code>ifstream ifs;</code></p><p>3.打开文件并判断文件是否打开成功</p><p><code>ifs.open(&quot;文件路径&quot;,打开方式)</code></p><p>4.读数据</p><p>四种读取方式</p><p>5.关闭文件</p><p><code>ifs,close()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>,ios::in);</span><br><span class="line">    <span class="keyword">if</span>(!ifs.<span class="built_in">is_open</span>())<span class="comment">//判断文件是否存在，路径是否错误</span></span><br><span class="line">    &#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;文件打开失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//结束后续读数据的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读数据</span></span><br><span class="line">    <span class="comment">//第一种 利用数组</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(ifs&gt;&gt;buf)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种 利用数组</span></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(ifs.<span class="built_in">getline</span>(buf,<span class="built_in">sizeof</span>(buf)))</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种 string</span></span><br><span class="line">    string buf;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(ifs,buf))</span><br><span class="line">    &#123;</span><br><span class="line">cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第四种 (不推荐)字符</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(c=ifs.<span class="built_in">get</span>()!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;c;</span><br><span class="line">    &#125;</span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>打开方式要指定为<code>ios::binary</code></p><h3 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h3><p>二进制写文件主要利用流对象调用成员函数write</p><p>基本语法：<code>ofstream&amp; whrite((const char*)&amp;buffer,int len)</code></p><h3 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h3><p>而简直顿文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char*buffer,int len)</code></p>]]></content>
      
      
      <categories>
          
          <category> C++语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Day1</title>
      <link href="/2023/01/19/Python-Day1/"/>
      <url>/2023/01/19/Python-Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出： Hello,World!</span></span><br></pre></td></tr></table></figure><h2 id="打印文本"><a href="#打印文本" class="headerlink" title="打印文本"></a>打印文本</h2><p>print 函数也可以用来输出多行文本。</p><p>可以使用<strong>\n（换行符）</strong>给文本换行，也可以使用多个 <strong>print</strong> 函数输出多行</p><p><strong>print()</strong> 函数是会自带<code>\n</code>的</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;good\nbeauty ...&#x27;</span>) </span><br></pre></td></tr></table></figure><p>而如果我们想要<strong>没有换行</strong>的话，可以使用<code>end=&#39;&#39;</code>来解决这一问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello world!&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>PS:会发现python的语法要求中并没有要求使用<code>;</code>来强制作为语句的结尾</strong></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在Python中的变量会根据赋予的值，来进行自动判断数据类型。</p><p>PS:字符串类型的变量可以通过<code>*</code>运算来输出打印的个数</p><p><strong>变量可以随意多次重新赋值。</strong></p><p>在Python中，变量没有特定的类型，因此你可以将一个字符串分配给一个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">123.456</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x)</span><br><span class="line"><span class="number">123.456</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&quot;This is a string&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x)</span><br><span class="line">This <span class="keyword">is</span> a string</span><br></pre></td></tr></table></figure><h2 id="变量名称"><a href="#变量名称" class="headerlink" title="变量名称"></a>变量名称</h2><p>Python变量名的命名有一些限制。</p><p><strong>变量名称允许使用的字符是字母，数字和下划线。并且变量不能以数字开头。</strong></p><p>如果不遵守这些规则命名会导致错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>this_is_a_normal_name = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>123abc = <span class="number">7</span></span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>并且Python作为一种高级语言，是会区分大小写的，因此设置变量是<code>A,a</code>就是两种变量</p><p><strong>尝试引用尚未赋值的变量会导致错误</strong>。</p><h2 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h2><p>可以使用 <strong>del</strong> 语句来删除一个变量，这意味着从名称到值的引用被删除，并且尝试使用该变量会导致错误。</p><p>删除的变量可以像以前一样重新分配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = <span class="string">&quot;a string&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo</span><br><span class="line"><span class="string">&#x27;a string&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bar</span><br><span class="line">NameError: name <span class="string">&#x27;bar&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> foo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo</span><br><span class="line">NameError: name <span class="string">&#x27;foo&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h2 id="向变量中输入任意值"><a href="#向变量中输入任意值" class="headerlink" title="向变量中输入任意值"></a>向变量中输入任意值</h2><p>也可以从用户输入中获取变量的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo = <span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>)</span><br><span class="line">Enter a number: <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(foo)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><ul><li><strong>变量与常量</strong>：命名规则 区分大小写</li><li><strong>赋值运算符</strong>：<code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>%=</code> <code>/=</code> <code>//=</code></li><li><strong>中文编码</strong>：<code>#-*- coding:UTF-8 -*-</code> <code>#coding=UTF-8</code></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>主要的数据类型有：整型 浮点型 字符串</p><h3 id="type-查看数据类型"><a href="#type-查看数据类型" class="headerlink" title="type()查看数据类型"></a>type()查看数据类型</h3><p>基本语法：<code>type(查看类型的数据)</code></p><p>type()返回的值<strong>既可以</strong>直接输出<strong>也可以</strong>存储到变量中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">114514</span>))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt;int_type = <span class="built_in">type</span>(<span class="number">114514</span>)</span><br><span class="line">&gt;&gt;<span class="built_in">print</span>(int_type)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="值得注意的是：变量无类型，但是存储的数据是有的"><a href="#值得注意的是：变量无类型，但是存储的数据是有的" class="headerlink" title="值得注意的是：变量无类型，但是存储的数据是有的"></a>值得注意的是：<strong>变量无类型，但是存储的数据是有的</strong></h4><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>基本语法：<code>基本类型(x)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_str = <span class="built_in">str</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num_str),num_str)</span><br><span class="line">num = <span class="built_in">int</span>(<span class="string">&quot;114514&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(num),num)</span><br><span class="line">float_num = <span class="built_in">float</span>(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_num),float_num)</span><br><span class="line">int_num = <span class="built_in">int</span>(<span class="number">11.514</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(int_num),int_num)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">str</span>&gt; <span class="number">11</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">int</span>&gt; <span class="number">114514</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">float</span>&gt; <span class="number">11.0</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">int</span>&gt; <span class="number">11</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h3><p>字符串就是一系列字符，在python中，用引号引起来的都是字符串，无论是单引号亦或是双引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure><p>因此这种灵活性，完全可以使字符串包含单引号或者双引号。</p><p>还有一种特殊的定义方式<strong>三引号定义法</strong></p><p>这种定义方式支持换行操作 ，这种方式与python的注释并不冲突。</p><p>在变量接收时，它就是字符串，没有变量接收时，就作为多行引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;&quot;&quot;铅笔沫&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>第一种方式 使用<code>%</code>占位</p><ul><li>优点：可以进行精度控制</li><li>缺点：书写起来速度较慢，且固定数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;name = <span class="string">&quot;铅笔沫&quot;</span></span><br><span class="line">&gt;&gt;&gt;message = <span class="string">&quot;我是 %s&quot;</span> % (name)</span><br><span class="line"><span class="comment">#其中 %表示： 占位</span></span><br><span class="line"><span class="comment"># s表示：将变量转化成字符串放入占位的地方</span></span><br><span class="line"><span class="comment">#注意 有多个占位时括号中的变量 要按照顺序输入</span></span><br><span class="line">我是铅笔沫</span><br></pre></td></tr></table></figure><p>第二种方式 <code>f&quot;内容&#123;变量&#125;&quot;</code></p><ul><li>优点：快速，不限数据类型</li><li>缺点：不做任何精度处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = 铅笔沫</span><br><span class="line">school = 哈尔滨理工大学</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我是<span class="subst">&#123;name&#125;</span>,我就读于<span class="subst">&#123;school&#125;</span>&quot;</span>)</span><br><span class="line">我是铅笔沫，我就读于哈尔滨理工大学</span><br></pre></td></tr></table></figure><h3 id="字符串控制精度"><a href="#字符串控制精度" class="headerlink" title="字符串控制精度"></a>字符串控制精度</h3><p>与C/C++一致</p><p>除了</p><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><h4 id="title"><a href="#title" class="headerlink" title="title()"></a>title()</h4><p>将首字母大写的方式显示每个单词。</p><p>因此由title()修改过后的值会将，<code>ADA,ADa,AdA,ada,Ada</code>是为同一个名字<code>Ada</code></p><h4 id="upper-amp-lower"><a href="#upper-amp-lower" class="headerlink" title="upper() &amp; lower()"></a>upper() &amp; lower()</h4><p>upper()：将所有字母改写为大写</p><p>lower()：将所有字母改写为小写</p><h3 id="合并拼接字符串"><a href="#合并拼接字符串" class="headerlink" title="合并拼接字符串"></a>合并拼接字符串</h3><p>可以使用 <strong>+</strong> 号连接任意两个<strong>字符串</strong>，连接字符串时，无论是使用单引号还是双引号创建的都可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;Spam&quot;</span> + <span class="string">&#x27;eggs&#x27;</span></span><br><span class="line"><span class="string">&#x27;Spameggs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;First string&quot;</span> + <span class="string">&quot;, &quot;</span> + <span class="string">&quot;second string&quot;</span>)</span><br><span class="line">First string, second string</span><br></pre></td></tr></table></figure><p>即使字符串包含数字，它们仍然被添加为字符串而不是整数。<strong>将一个字符串加上数字中会产生一个错误</strong>，即使它们看起来相似，但它们是两个不同的实体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> + <span class="string">&#x27;2&#x27;</span> + <span class="number">3</span> + <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;..\Playground\&quot;, line 3, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(1 + &#x27;2&#x27; + 3 + &#x27;4&#x27;)</span></span><br><span class="line"><span class="string">TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><p>因此我们可以通过使用<code>str()</code><strong>来强制转换其类型</strong>，来避免这种错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;age = <span class="number">23</span> </span><br><span class="line">&gt;&gt;&gt;message = <span class="string">&quot;Happy &quot;</span> + <span class="built_in">str</span>(age) + <span class="string">&quot;rd Birthday!&quot;</span> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(message)</span><br><span class="line">Happy 23rd Birthday! </span><br></pre></td></tr></table></figure><p>字符串也可以<strong>乘以整数</strong>。这会产生原始字符串的重复版本。字符串和整数的顺序无关紧要，但字符串通常是放在前面的。</p><p><strong>字符串不能与其他字符串相乘</strong>。即使浮点数是整数，字符串也不能乘以浮点数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;spam&quot;</span> * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> * <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;17&#x27;</span> * <span class="string">&#x27;87&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pythonisfun&#x27;</span> * <span class="number">7.0</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spamspamspam</span><br><span class="line"><span class="number">2222</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;..\Playground\&quot;, line 5, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(&#x27;17&#x27; * &#x27;87&#x27;)</span></span><br><span class="line"><span class="string">TypeError: can&#x27;t multiply sequence by non-int of type &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><h4 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip()"></a>rstrip()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language = <span class="string">&#x27;python &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language </span><br><span class="line"><span class="string">&#x27;python &#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.rstrip()</span><br><span class="line"><span class="string">&#x27;python&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language</span><br><span class="line"><span class="string">&#x27;python &#x27;</span></span><br></pre></td></tr></table></figure><p>要永久删除这个空白，需要将操作后的值返还到变量当中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language = <span class="string">&#x27;python &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language = favorite_language.rstrip()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language</span><br><span class="line"><span class="string">&#x27;python&#x27;</span> </span><br></pre></td></tr></table></figure><h4 id="lstrip-amp-strip"><a href="#lstrip-amp-strip" class="headerlink" title="lstrip() &amp; strip()"></a>lstrip() &amp; strip()</h4><p>lstrip()：删除开头空白</p><p>strrp()：删除末尾空白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language = <span class="string">&#x27; python &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.rstrip()</span><br><span class="line"><span class="string">&#x27; python&#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.lstrip()</span><br><span class="line"><span class="string">&#x27;python &#x27;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>favorite_language.strip() </span><br><span class="line"><span class="string">&#x27;python&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>整数可执行<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>//</code> <code>%</code> <code>**</code>运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> + <span class="number">3</span></span><br><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> - <span class="number">2</span></span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> / <span class="number">2</span></span><br><span class="line"><span class="number">1.5</span> </span><br><span class="line">&gt;&gt;&gt;<span class="number">9</span>//<span class="number">2</span> <span class="comment">#取整除</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>%<span class="number">2</span><span class="comment">#取余</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>**<span class="number">2</span><span class="comment">#指数</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>在终端会话中，Python直接返回运算结果。Python使用<strong>两个乘号</strong>表示乘方运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> ** <span class="number">6</span></span><br><span class="line"><span class="number">1000000</span> </span><br></pre></td></tr></table></figure><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>通常上，使用浮点数时无需考虑其行为，python通常都会按照期望的样子处理，但是，<strong>结果所包含的小数位数可能使不确定的。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.1</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.2</span> + <span class="number">0.2</span></span><br><span class="line"><span class="number">0.4</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">0.1</span></span><br><span class="line"><span class="number">0.2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> * <span class="number">0.2</span></span><br><span class="line"><span class="number">0.4</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0.2</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><h1 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h1><h2 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>变量 = input()</code></p><p><code>input()</code>的有趣之处在于，他的括号内部就相当于一个<code>print()</code>语句，但是这个自带的功能，会将输入的值视为<strong>字符串</strong>，需要自行进行<strong>强制转换</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入你的名字&quot;</span>)<span class="comment">#基本用法</span></span><br><span class="line">Name = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">ID = <span class="built_in">input</span>(<span class="string">&quot;请输入你的账号&quot;</span>)</span><br><span class="line">Password = <span class="built_in">input</span>(<span class="string">&quot;请输入你的密码&quot;</span>)</span><br><span class="line">Password = <span class="built_in">int</span>(Password)<span class="comment">#强制转换</span></span><br><span class="line"></span><br><span class="line">ID_Again = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请再次确认你的密码&quot;</span>)) <span class="comment">#一条龙服务</span></span><br></pre></td></tr></table></figure><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h2><p>和C/C++不同的是，python的<code>if语句</code>返回值为<code>True/False</code>，而并非<code>1/0</code></p><h3 id="检查是否相等"><a href="#检查是否相等" class="headerlink" title="检查是否相等"></a>检查是否相等</h3><p>在Python中也是需要考虑大小写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;car = <span class="string">&#x27;bwm&#x27;</span></span><br><span class="line">&gt;&gt;&gt;car == <span class="string">&#x27;bwm&#x27;</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;car = <span class="string">&#x27;Bwm&#x27;</span></span><br><span class="line">&gt;&gt;&gt;car == <span class="string">&#x27;bwm&#x27;</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;car = <span class="string">&#x27;Bwm&#x27;</span></span><br><span class="line">&gt;&gt;&gt;car != <span class="string">&#x27;Audi&#x27;</span> <span class="comment"># != 不等于</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>当大小写无关紧要时，就可以搭配<code>lower()</code>或者<code>upper()</code>使用，来统一格式</p><h3 id="比较数字"><a href="#比较数字" class="headerlink" title="比较数字"></a>比较数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age == <span class="number">18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age &lt; <span class="number">21</span></span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age &lt;= <span class="number">21</span></span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age &gt; <span class="number">21</span></span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age &gt;= <span class="number">21</span></span><br><span class="line"><span class="literal">False</span> </span><br></pre></td></tr></table></figure><h3 id="检查多个条件"><a href="#检查多个条件" class="headerlink" title="检查多个条件"></a>检查多个条件</h3><p>可以使用<code>and</code>或者<code>or</code>来进行使用</p><p>二者逻辑为：</p><blockquote><p>and 全真为真，一假全假</p><p>or    一真为真，全假为假</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_1 = <span class="number">18</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="literal">False</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_1 = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;(age_0 &gt;= <span class="number">21</span>) <span class="keyword">and</span> (age_1 &gt;= <span class="number">21</span>) <span class="comment">#改善可读性</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 = <span class="number">22</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_1 = <span class="number">18</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 = <span class="number">18</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age_0 &gt;= <span class="number">21</span> <span class="keyword">or</span> age_1 &gt;= <span class="number">21</span> </span><br><span class="line"><span class="literal">False</span> </span><br></pre></td></tr></table></figure><h3 id="检查特定值"><a href="#检查特定值" class="headerlink" title="检查特定值"></a>检查特定值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;onions&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;mushrooms&#x27;</span> <span class="keyword">in</span> requested_toppings </span><br><span class="line"><span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;pepperoni&#x27;</span> <span class="keyword">in</span> requested_toppings </span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="检查特定值不在列表中"><a href="#检查特定值不在列表中" class="headerlink" title="检查特定值不在列表中"></a>检查特定值不在列表中</h3><p>可以使用关键字<code>not in</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">banned_users = [<span class="string">&#x27;andrew&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>, <span class="string">&#x27;david&#x27;</span>] </span><br><span class="line">user = <span class="string">&#x27;marie&#x27;</span> </span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> banned_users: </span><br><span class="line">    <span class="built_in">print</span>(user.title() + <span class="string">&quot;, you can post a response if you wish.&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Marie, you can post a response <span class="keyword">if</span> you wish. </span><br></pre></td></tr></table></figure><h2 id="具体语法"><a href="#具体语法" class="headerlink" title="具体语法"></a>具体语法</h2><h4 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditional_test: </span><br><span class="line">    do something</span><br><span class="line">    <span class="comment">#需要注意的是记得添加冒号与缩进</span></span><br><span class="line">    <span class="comment">#do something 可以是任意数量的代码</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">19</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>) </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span> </span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You are old enough to vote!&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Have you registered to vote yet?&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry, you are too young to vote.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Please register to vote as soon as you turn 18!&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sorry, you are too young to vote. </span><br><span class="line">Please register to vote <span class="keyword">as</span> soon <span class="keyword">as</span> you turn <span class="number">18</span>! </span><br></pre></td></tr></table></figure><h4 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if-elif-else语句"></a>if-elif-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $0.&quot;</span>) </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $5.&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $10.&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost <span class="keyword">is</span> $<span class="number">5.</span></span><br></pre></td></tr></table></figure><h4 id="多个elif代码块"><a href="#多个elif代码块" class="headerlink" title="多个elif代码块"></a>多个elif代码块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span> </span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>: </span><br><span class="line">   price = <span class="number">0</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">   price = <span class="number">5</span> </span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>: </span><br><span class="line">   price = <span class="number">10</span> </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">   price = <span class="number">5</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your admission cost is $&quot;</span> + <span class="built_in">str</span>(price) + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><h4 id="省略else代码块"><a href="#省略else代码块" class="headerlink" title="省略else代码块"></a>省略else代码块</h4><p>在python中 即使使用了<code>if-elif</code>仍然可以<strong>不使用</strong><code>else语句</code></p><h2 id="not的使用"><a href="#not的使用" class="headerlink" title="not的使用"></a>not的使用</h2><p>当<code>if语句</code>想要结果取反时也可以加入<code>not</code>关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bool</span></span><br><span class="line">函数体</span><br></pre></td></tr></table></figure><p><code>not False == True</code></p><p><code>not True == False</code></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>在使用<code>if语句</code>时，当其中一行满足条件时，完成其对应的代码块后，都会自动忽略，if语句中剩下的所有代码块。因此在只想执行一个代码块时，使用<code>if-elif-else</code>，而当要测试或运行多个代码块时，就是用多个<code>if语句</code></strong></p><h2 id="检查特殊元素"><a href="#检查特殊元素" class="headerlink" title="检查特殊元素"></a>检查特殊元素</h2><p>使用for循环来检查列表的特殊值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line"><span class="keyword">if</span> requested_topping == <span class="string">&#x27;green peppers&#x27;</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Sorry, we are out of green peppers right now.&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms. </span><br><span class="line">Sorry, we are out of green peppers right now. </span><br><span class="line">Adding extra cheese. </span><br><span class="line"></span><br><span class="line">Finished making your pizza! </span><br></pre></td></tr></table></figure><h2 id="确定列表不是空的"><a href="#确定列表不是空的" class="headerlink" title="确定列表不是空的"></a>确定列表不是空的</h2><p> 在使用<code>for循环</code>前确定列表不为空时及其重要的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requested_toppings = [] </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requested_toppings: </span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Are you sure you want a plain pizza?&quot;</span>) </span><br></pre></td></tr></table></figure><p>需要记住的是：在if语句中将列表名在条件表达式中时，元素在<code>&gt;=1</code>时返回<code>True</code>，而为空时，返回<code>False</code></p><h2 id="使用多个列表"><a href="#使用多个列表" class="headerlink" title="使用多个列表"></a>使用多个列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">available_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;olives&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;pepperoni&#x27;</span>, <span class="string">&#x27;pineapple&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>] </span><br><span class="line"></span><br><span class="line">requested_toppings = [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;french fries&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings: </span><br><span class="line">    <span class="keyword">if</span> requested_topping <span class="keyword">in</span> available_toppings: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Adding &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Sorry, we don&#x27;t have &quot;</span> + requested_topping + <span class="string">&quot;.&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nFinished making your pizza!&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Adding mushrooms. </span><br><span class="line">Sorry, we don<span class="string">&#x27;t have french fries. </span></span><br><span class="line"><span class="string">Adding extra cheese. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finished making your pizza!</span></span><br></pre></td></tr></table></figure><h1 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h1><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>  条件:(<span class="built_in">bool</span>类型)</span><br><span class="line">满足时，实现时间<span class="number">1</span></span><br><span class="line">    满足时，实现时间<span class="number">2</span></span><br><span class="line">    满足时，实现时间<span class="number">3</span> </span><br></pre></td></tr></table></figure><p><strong>PS：注意控制终止条件，避免出现死循环</strong></p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><h2 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">    循环满足时执行的事件</span><br></pre></td></tr></table></figure><p>PS：与C/C++种不同的是，<strong>for循环处理的是数据集</strong>，而不是一段表达式，当数据集遍历结束后，for循环才会停止。</p><h1 id="while与for循环的区别"><a href="#while与for循环的区别" class="headerlink" title="while与for循环的区别"></a>while与for循环的区别</h1><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"><strong>循环控制(自定义循环)</strong></th><th style="text-align:center"><strong>无限循环</strong></th><th style="text-align:center"><strong>适用场景</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>while循环</strong></td><td style="text-align:center">:heavy_check_mark:</td><td style="text-align:center">:heavy_check_mark:</td><td style="text-align:center">任意循环场景</td></tr><tr><td style="text-align:left"><strong>for循环</strong></td><td style="text-align:center">:heavy_multiplication_x:</td><td style="text-align:center">:heavy_multiplication_x:(理论不可以)</td><td style="text-align:center">遍历数据容器等简单固定次数循环</td></tr></tbody></table></div><h1 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h1><p>使用方式与对象与C/C++完全一致，分别表示为<strong>跳出循环</strong>和<strong>忽略本循环以下语句</strong></p><h1 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h1><p>为了方便查找，这次并没有把几个数据容器放在该标题之下</p><p>Python的数据容器是自由的，可以<strong>存储任何元素</strong>，无论是<strong>字符串，数字亦或是布尔类型，甚至可以是自己本身</strong>，而这个容器<strong>容纳的每一份数据称之为1个元素</strong></p><p>根据各个容器的特点不同，可以分为大致5类</p><div class="table-container"><table><thead><tr><th></th><th style="text-align:center">是否支持重复元素</th><th style="text-align:center">是否可以进行修改</th><th style="text-align:center">是否有序</th></tr></thead><tbody><tr><td><strong>列表(list)</strong></td><td style="text-align:center">:heavy_check_mark:</td><td style="text-align:center">:heavy_check_mark:</td><td style="text-align:center">:heavy_check_mark:</td></tr><tr><td><strong>元组(tuple)</strong></td><td style="text-align:center"></td><td style="text-align:center">:heavy_multiplication_x:</td><td style="text-align:center"></td></tr><tr><td><strong>字符串(str)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>集合(set)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td><strong>字典(dict)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>Python的列表由<code>[]</code>来表示，用<code>,</code>来分隔其中的元素。这与C/C++的数组类似，并且列表的性质也与数组类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(bicycles)</span><br><span class="line">[<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] </span><br></pre></td></tr></table></figure><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><p>与数组一致，<code>[0]</code>表示<strong>首元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line">trek</span><br></pre></td></tr></table></figure><p>而列表与众不同的是，其支持<strong>负数索引</strong>，通过索引为<code>-1</code>可以返回列表中的最后一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(bicycles[-<span class="number">1</span>]) </span><br><span class="line">specialized</span><br></pre></td></tr></table></figure><p>接下来把学过的知识<strong>remix</strong>一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;message = <span class="string">&quot;My first bicycle was a &quot;</span> + bicycles[<span class="number">0</span>].title() + <span class="string">&quot;.&quot;</span> </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(message)</span><br><span class="line">My first bicycle was a T  rek.</span><br></pre></td></tr></table></figure><h2 id="列表嵌套列表"><a href="#列表嵌套列表" class="headerlink" title="列表嵌套列表"></a>列表嵌套列表</h2><p>列表也是可以进行<strong>嵌套</strong>的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">My_list = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(My_list[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 2]</span></span><br><span class="line"><span class="string">[3, 4]</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>当进行列表嵌套列表时，<code>[x]</code>是代表着第x个列表，而<code>[x][y]</code>代表着第x列表的第y个元素。而这第y个元素也可以是第</p><h2 id="修改与删除元素"><a href="#修改与删除元素" class="headerlink" title="修改与删除元素"></a>修改与删除元素</h2><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><p>可以通过赋值来直接永久性修改列表的某个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br></pre></td></tr></table></figure><h3 id="列表添加元素"><a href="#列表添加元素" class="headerlink" title="列表添加元素"></a>列表添加元素</h3><h4 id="在列表末尾添加元素append"><a href="#在列表末尾添加元素append" class="headerlink" title="在列表末尾添加元素append()"></a>在列表末尾添加元素append()</h4><p>基本用法</p><p><code>append(元素)</code></p><p><strong>将指定的元素追加到列表的尾部</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br></pre></td></tr></table></figure><h4 id="列表插入元素insert"><a href="#列表插入元素insert" class="headerlink" title="列表插入元素insert()"></a>列表插入元素insert()</h4><p>基本用法</p><p><code>列表.insert(下标，元素)</code></p><p><strong>在指定的下标位置，插入指定的元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br></pre></td></tr></table></figure><h4 id="列表追加多个元素extend"><a href="#列表追加多个元素extend" class="headerlink" title="列表追加多个元素extend()"></a>列表追加多个元素extend()</h4><p>基本用法</p><p><code>列表.extend(其它数据容器)</code></p><p>将其它的数据容器的内容取出，依次追加到列表尾部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;my_list.extend([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(my_list)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h3><h4 id="del语句-1"><a href="#del语句-1" class="headerlink" title="del语句"></a>del语句</h4><p>基本语法</p><p><code>del 列表[下标]</code></p><p>可以根据位置和值来删除列表中的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br></pre></td></tr></table></figure><h4 id="使用pop-删除元素"><a href="#使用pop-删除元素" class="headerlink" title="使用pop()删除元素"></a>使用pop()删除元素</h4><p><code>列表.pop(下标)</code></p><p>删除列表末尾的元素，<strong>并能够接着使用</strong></p><p>本质上就是 <strong>将这个元素从列表中移除，并作为返回值进行输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;popped_motorcycle = motorcycles.pop() </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(popped_motorcycle) </span><br><span class="line">suzuki</span><br></pre></td></tr></table></figure><p><code>popped_motorcycle</code>作用：可以打印出最后一条消息</p><h4 id="弹出列表中的任何位置处的元素"><a href="#弹出列表中的任何位置处的元素" class="headerlink" title="弹出列表中的任何位置处的元素"></a>弹出列表中的任何位置处的元素</h4><p>使用<code>pop()</code>并在<code>()</code>中指定删除的元素索引即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;first_owned = motorcycles.pop(<span class="number">0</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;The first motorcycle I owned was a &#x27;</span> + first_owned.title() + <span class="string">&#x27;.&#x27;</span>) </span><br><span class="line">The first motorcycle I owned was a Honda. </span><br></pre></td></tr></table></figure><p>PS：</p><ul><li>当你想删除元素，并且<strong>不想使用时</strong>，使用<strong>del语句</strong></li><li>当你想删除元素，但是<strong>以后想使用时</strong>，使用<strong>pop()</strong></li></ul><h4 id="根据值删除元素remove"><a href="#根据值删除元素remove" class="headerlink" title="根据值删除元素remove()"></a>根据值删除元素remove()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles)</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>remove()</code><strong>从列表中删除元素时，也可接着使用它的值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;too_expensive = <span class="string">&#x27;ducati&#x27;</span> </span><br><span class="line">&gt;&gt;&gt;motorcycles.remove(too_expensive) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(motorcycles) </span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;\nA &quot;</span> + too_expensive.title() + <span class="string">&quot; is too expensive for me.&quot;</span>) </span><br><span class="line">A Ducati <span class="keyword">is</span> too expensive <span class="keyword">for</span> me. </span><br></pre></td></tr></table></figure><p><strong>值得注意的是：使用的时候remove()只会删除第一个出现的元素，后续出现的重复元素不会删除。</strong></p><h4 id="清空列表-clear"><a href="#清空列表-clear" class="headerlink" title="清空列表.clear()"></a>清空列表.clear()</h4><p>基本语法</p><p><code>列表.clear()</code></p><p>清空列表内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles.clear()</span><br><span class="line">[]<span class="comment">#结果</span></span><br></pre></td></tr></table></figure><h2 id="查询列表元素"><a href="#查询列表元素" class="headerlink" title="查询列表元素"></a>查询列表元素</h2><h3 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h3><p><code>列表名称.index(元素)</code></p><p>功能：查找指定元素在列表的下标，找不到报错<code>ValueError</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles.index(<span class="string">&quot;suzuki&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>index()</code>就是<strong>变量这个函数中的方法</strong></p><p><em>没有学过C++面向对象思想的人，可能会问什么是方法呢？</em></p><p><strong>其实很简单，方法和函数本质是一样的，函数不过是散装在外面的，而方法是封装在一个类里的函数。</strong></p><p><strong>同时使用方法也会有一些不同。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = x + y</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:<span class="comment">#这里的用法会在后续的类的用法再次提到，并深入阐述</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add2</span>(<span class="params">self,x, y</span>):</span><br><span class="line">        result = x + y</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">a=Student()</span><br><span class="line">a.add2(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="查询元素在列表中的数量"><a href="#查询元素在列表中的数量" class="headerlink" title="查询元素在列表中的数量"></a>查询元素在列表中的数量</h2><h3 id="查询某元素的数量-count"><a href="#查询某元素的数量-count" class="headerlink" title="查询某元素的数量.count()"></a>查询某元素的数量.count()</h3><p>基本语法</p><p><code>列表.cont(元素)</code></p><p>可以查询某个元素在列表中的具体数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;motorcycles.cont(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="查询所有的元素数量len"><a href="#查询所有的元素数量len" class="headerlink" title="查询所有的元素数量len()"></a>查询所有的元素数量len()</h3><p>基本语法</p><p><code>len(列表)</code></p><p>可以查询列表中一共有多少个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(motorcycles)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h2><h3 id="使用sort-对列表进行永久性的排序"><a href="#使用sort-对列表进行永久性的排序" class="headerlink" title="使用sort()对列表进行永久性的排序"></a>使用sort()对列表进行永久性的排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;cars[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subru&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;cars.sort()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars)</span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line"><span class="comment">#以上是根据首字母进行排序</span></span><br></pre></td></tr></table></figure><p>如果想要以相反的方向输出可以选择使用<code>reverse=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;cars[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subru&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars)</span><br><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br><span class="line"><span class="comment">#以上是根据首字母进行反向排序</span></span><br></pre></td></tr></table></figure><h3 id="使用sorted-对列表进行临时性排序"><a href="#使用sorted-对列表进行临时性排序" class="headerlink" title="使用sorted()对列表进行临时性排序"></a>使用sorted()对列表进行临时性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars) </span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the original <span class="built_in">list</span>: </span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">sorted</span>(cars)) </span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the <span class="built_in">sorted</span> <span class="built_in">list</span>: </span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>] </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>) </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars) </span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the original <span class="built_in">list</span> again: </span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure><p>使用<code>sorted()</code>后，列表元素顺序并没有发生<strong>永久性改变</strong>，而是按照临时需求进行了改变，和上面说的一样，也可以通过传递<code>reverse=True</code>来反向输出</p><h3 id="倒着打印列表reverse"><a href="#倒着打印列表reverse" class="headerlink" title="倒着打印列表reverse()"></a>倒着打印列表reverse()</h3><p>使用<code>reverse()</code>可以逆向输出一开始所设定的列表顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars) </span><br><span class="line">&gt;&gt;&gt;cars.reverse() </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(cars) </span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">[<span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>] </span><br></pre></td></tr></table></figure><p>但是由于这种改变是<strong>永久性的</strong>因此，可以通过再次调用<code>reverse()</code>来进行恢复顺序。</p><h3 id="确定列表长度len"><a href="#确定列表长度len" class="headerlink" title="确定列表长度len()"></a>确定列表长度len()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(cars)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="使用列表时避免索引错误"><a href="#使用列表时避免索引错误" class="headerlink" title="使用列表时避免索引错误"></a>使用列表时避免索引错误</h3><p>即与数组一直从<code>0</code>开始数数，所以是一定不要超过<code>n-1</code>个数的调用。但<code>python</code>有趣的地方在于，可以使用负数索引即<code>-1</code>就是倒数第一个元素</p><p>PS:当出现索引错误而不知所措时，可以通过<code>len()</code>来确定列表长度</p><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="while循环遍历列表"><a href="#while循环遍历列表" class="headerlink" title="while循环遍历列表"></a>while循环遍历列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list_while_func</span></span><br><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>] </span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index&lt;<span class="built_in">len</span>(magicians):</span><br><span class="line">    element = magicians[index]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;列表的元素:<span class="subst">&#123;element&#125;</span>&quot;</span>)</span><br><span class="line">    index +=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="for循环遍历列表"><a href="#for循环遍历列表" class="headerlink" title="for循环遍历列表"></a>for循环遍历列表</h3><p>当想要进行遍历列表时，可以选择使用<code>for</code>循环，值得注意的是，python的for循环与C/C++的并不相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: </span><br><span class="line">    <span class="comment"># magcian -&gt;新建的变量名称，之后每次循环时，该存储的值都会发生改变</span></span><br><span class="line">    <span class="comment"># magcians -&gt;列表名称，需要遍历的内容</span></span><br><span class="line"><span class="built_in">print</span>(magician) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice </span><br><span class="line">david </span><br><span class="line">carolina</span><br></pre></td></tr></table></figure><h4 id="for循环代码风格小贴士"><a href="#for循环代码风格小贴士" class="headerlink" title="for循环代码风格小贴士"></a>for循环代码风格小贴士</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for cat in cats: </span><br><span class="line">for dog in dogs: </span><br><span class="line">for item in list_of_items:</span><br></pre></td></tr></table></figure><h4 id="在for循环中执行更多操作"><a href="#在for循环中执行更多操作" class="headerlink" title="在for循环中执行更多操作"></a>在for循环中执行更多操作</h4><p>当for循环的缩进下没有语句时会自动停止for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line"><span class="built_in">print</span>(magician.title() + <span class="string">&quot;, that was a great trick!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I can&#x27;t wait to see your next trick, &quot;</span> + magician.title() + <span class="string">&quot;.\n&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Alice, that was a great trick! </span><br><span class="line">I can<span class="string">&#x27;t wait to see your next trick, Alice. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">David, that was a great trick! </span></span><br><span class="line"><span class="string">I can&#x27;</span>t wait to see your <span class="built_in">next</span> trick, David. </span><br><span class="line"></span><br><span class="line">Carolina, that was a great trick! </span><br><span class="line">I can<span class="string">&#x27;t wait to see your next trick, Carolina. </span></span><br></pre></td></tr></table></figure><h3 id="避免缩进错误"><a href="#避免缩进错误" class="headerlink" title="避免缩进错误"></a>避免缩进错误</h3><p>Python中的<strong>缩进</strong>所及是极其重要的，就如同C/C++中的括号，它们是用来<strong>判断代码与前一行代码之间的关系</strong></p><h4 id="忘记缩进"><a href="#忘记缩进" class="headerlink" title="忘记缩进"></a>忘记缩进</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;carolina&#x27;</span>] </span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians: </span><br><span class="line"><span class="built_in">print</span>(magician) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;magicians.py&quot;</span>, line <span class="number">3</span> </span><br><span class="line"><span class="built_in">print</span>(magician) </span><br><span class="line"> ^ </span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure><p>通常出现这种错误可以将紧跟在for语句后的代码进行缩进，就可消除这种缩进错误。</p><h4 id="不必要的缩进"><a href="#不必要的缩进" class="headerlink" title="不必要的缩进"></a>不必要的缩进</h4><p>当你多输入了一个缩进时，python会进行如下报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;Hello Python world!&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;hello_world.py&quot;</span>, line <span class="number">2</span> </span><br><span class="line"><span class="built_in">print</span>(message) </span><br><span class="line">^ </span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><h3 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h3><h4 id="使用range"><a href="#使用range" class="headerlink" title="使用range()"></a>使用range()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>会发现并没有5，这是就是编程中经常出现的<strong>差一行为</strong>，因为Python是在第一个值开始数，当达到你指定的第N个值后停止，因此不包含第N个值</p><p>因此当输出结果不符合预期时，可以进行<strong>±1</strong></p><p><code>range()</code>可以和<code>list()</code>进行搭配使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)) </span><br><span class="line"><span class="built_in">print</span>(numbers) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] </span><br></pre></td></tr></table></figure><p>同时 <code>range()</code>还可以指定打印出步长<code>step</code>，例如打印1~10的偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_number = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>)) <span class="comment"># 从2开始 到10结束 相差为2的数字列表</span></span><br><span class="line"><span class="built_in">print</span>(even_number)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>使用<code>range()</code>几乎能够创建任何需要的数字集，例如我们需要一个1~10的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = [] </span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line">squares.append(value**<span class="number">2</span>) </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(squares) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>] </span><br></pre></td></tr></table></figure><h4 id="对数字列表执行简单的统计计算"><a href="#对数字列表执行简单的统计计算" class="headerlink" title="对数字列表执行简单的统计计算"></a>对数字列表执行简单的统计计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">min</span>(digits)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(digits)</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(digits)</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure><h4 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)] </span><br><span class="line"><span class="built_in">print</span>(squares) </span><br><span class="line"><span class="comment">#注意这里的for没有冒号</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] </span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>值得注意的是，这里的索引可以通过<code>:</code>的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>]) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>] </span><br></pre></td></tr></table></figure><p>这个和之前提到的<code>range()</code>的数数一致，<code>x:N</code>==<code>x~N-1</code></p><p>而当没有第一个索引即<code>:N</code>则自动从<strong>列表开头开始</strong>即<code>0~N-1</code></p><p>同时当美哟最后一个索引时即<code>x:</code>会自动从N开始知道末尾即<code>x~N</code></p><p>而且这种索引也支持使用负数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>]) </span><br><span class="line">[<span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(players[:<span class="number">4</span>]) </span><br><span class="line">[<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>] </span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(players[<span class="number">2</span>:]) </span><br><span class="line">[<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:]) </span><br><span class="line">[<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br></pre></td></tr></table></figure><p>遍历切片</p><p>加入要遍历前三个人 就可以使用<strong>for循环</strong>进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;martina&#x27;</span>, <span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;florence&#x27;</span>, <span class="string">&#x27;eli&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]: </span><br><span class="line">    <span class="built_in">print</span>(player.title()) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Charles </span><br><span class="line">Martina </span><br><span class="line">Michael </span><br></pre></td></tr></table></figure><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>可以使用<code>[:]</code>这样可以让python创建一个始于第一个元素，终止于最后一个元素的切片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line">friend_foods = my_foods[:] </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(my_foods) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(friend_foods) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">My favorite foods are: </span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line">My friend<span class="string">&#x27;s favorite foods are: </span></span><br><span class="line"><span class="string">[&#x27;</span>pizza<span class="string">&#x27;, &#x27;</span>falafel<span class="string">&#x27;, &#x27;</span>carrot cake<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure><p>这样得到的是两个不同的列表</p><p>而直接通过赋值，不加<code>[:]</code>不过是一个列表但是有两个名称罢了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>] </span><br><span class="line">friend_foods = my_foods </span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line">friend_foods.append(<span class="string">&#x27;ice cream&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nMy friend&#x27;s favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">My favorite foods are: </span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;falafel&#x27;</span>, <span class="string">&#x27;carrot cake&#x27;</span>, <span class="string">&#x27;cannoli&#x27;</span>, <span class="string">&#x27;ice cream&#x27;</span>] </span><br><span class="line"></span><br><span class="line">My friend<span class="string">&#x27;s favorite foods are: </span></span><br><span class="line"><span class="string">[&#x27;</span>pizza<span class="string">&#x27;, &#x27;</span>falafel<span class="string">&#x27;, &#x27;</span>carrot cake<span class="string">&#x27;, &#x27;</span>cannoli<span class="string">&#x27;, &#x27;</span>ice cream<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure><p>因此事实证明<strong>直接</strong>以<code>=</code>相连是同一个列表，而加上<code>[:]</code>才是真正的<strong>又</strong>创建了一个，一摸一样的列表</p><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p><strong>元组即不可变的列表</strong></p><h2 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200.50</span>)</span><br><span class="line">dimensions = <span class="built_in">tuple</span>(<span class="number">200.50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> </span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><p>当然吐过想尝试修改元组的元素，当然是被禁止，且会报错的</p><h2 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h2><p>遍历元组的方式与遍历列表的方式一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200.50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions</span><br><span class="line"><span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> </span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><p>就如上所说，修改元组变量是不可行的，但是我们可以给代表这个元组的变量，重新赋值。</p><p>说人话就是<strong><del>“解决不了问题，就解决发现问题的人”</del></strong></p><p>从根本上把元组覆盖就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br><span class="line">    </span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions: </span><br><span class="line"><span class="built_in">print</span>(dimension) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Original dimensions: </span><br><span class="line"><span class="number">200</span> </span><br><span class="line"><span class="number">50</span> </span><br><span class="line"></span><br><span class="line">Modified dimensions: </span><br><span class="line"><span class="number">400</span> </span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;points&#x27;</span>]) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">green </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p>python的字典，就是一系列的键-值对</p><p>格式：<code>字典名称 = &#123;&#39;键&#39;:&#39;值&#39;&#125;</code></p><h3 id="访问字典的值"><a href="#访问字典的值" class="headerlink" title="访问字典的值"></a>访问字典的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0[<span class="string">&#x27;color&#x27;</span>]) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">green</span><br></pre></td></tr></table></figure><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>可以通过<code>字典名称[&#39;键&#39;]=值</code>来直接创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span> </span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span> </span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;y_position&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;x_position&#x27;</span>: <span class="number">0</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><p>修改字典的值可以直接进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>) </span><br><span class="line">alien_0[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The alien is now &quot;</span> + alien_0[<span class="string">&#x27;color&#x27;</span>] + <span class="string">&quot;.&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The alien <span class="keyword">is</span> green. </span><br><span class="line">The alien <span class="keyword">is</span> now yellow. </span><br></pre></td></tr></table></figure><h3 id="删除键-值对"><a href="#删除键-值对" class="headerlink" title="删除键-值对"></a>删除键-值对</h3><p>可以使用<code>del语句</code>将对应键值对删除，删除时必须指明所需要删除的键与字典名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;points&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(alien_0) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="创建字典小提示"><a href="#创建字典小提示" class="headerlink" title="创建字典小提示"></a>创建字典小提示</h3><p>当遇到大量类似对象时，可以选择使用<strong>换行缩进</strong>的方式，进行赋值，从而提高可读性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"><span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="遍历所有的键-值对"><a href="#遍历所有的键-值对" class="headerlink" title="遍历所有的键-值对"></a>遍历所有的键-值对</h3><p>同样与其他遍历一样，可以利用<code>for循环</code>来遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user_0 = &#123; </span><br><span class="line"><span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;efermi&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;enrico&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;fermi&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> user_0.items(): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nKey: &quot;</span> + key) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Value: &quot;</span> + value) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Key: last </span><br><span class="line">Value: fermi </span><br><span class="line"></span><br><span class="line">Key: first </span><br><span class="line">Value: enrico </span><br><span class="line"></span><br><span class="line">Key: username </span><br><span class="line">Value: efermi </span><br></pre></td></tr></table></figure><p>会发现，<strong>输出顺序</strong>与设定顺序<strong>并不一致</strong>，因为Python并<strong>不关心</strong>键-值对存储的顺序，仅仅是<strong>跟踪键和值的关联关系</strong></p><h3 id="遍历字典中的所有键"><a href="#遍历字典中的所有键" class="headerlink" title="遍历字典中的所有键"></a>遍历字典中的所有键</h3><p>可以使用<code>key()</code>来进行遍历所有键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"><span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages:</span><br><span class="line">    <span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Jen </span><br><span class="line">Sarah </span><br><span class="line">Phil </span><br><span class="line">Edward </span><br><span class="line"></span><br><span class="line">Jen </span><br><span class="line">Sarah </span><br><span class="line">Phil </span><br><span class="line">Edward </span><br></pre></td></tr></table></figure><p>而我们即使不用<code>Keys()</code>也可以进行遍历所有的键，因为Python在遍历字典是默认遍历所有的键</p><p>我们也可以<strong>按照顺序</strong>遍历字典中的所有键，可以使用<code>sorted()</code>来按特定顺序进行排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"><span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;, thank you for taking the poll.&quot;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edward, thank you <span class="keyword">for</span> taking the poll. </span><br><span class="line">Jen, thank you <span class="keyword">for</span> taking the poll. </span><br><span class="line">Phil, thank you <span class="keyword">for</span> taking the poll. </span><br><span class="line">Sarah, thank you <span class="keyword">for</span> taking the poll. </span><br></pre></td></tr></table></figure><h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3><p>遍历字典中的所有值可以利用方法<code>values()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"><span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favorite_languages.values(): </span><br><span class="line"><span class="built_in">print</span>(language.title()) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python </span><br><span class="line">C </span><br><span class="line">Python </span><br><span class="line">Ruby </span><br></pre></td></tr></table></figure><p>而当我们只想要具体的种类，<strong>需要去重时</strong>，可以使用集合<code>set()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123; </span><br><span class="line"><span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>, </span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()): </span><br><span class="line"><span class="built_in">print</span>(language.title()) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python </span><br><span class="line">C </span><br><span class="line">Ruby </span><br></pre></td></tr></table></figure><h2 id="嵌套（俄罗斯套娃）"><a href="#嵌套（俄罗斯套娃）" class="headerlink" title="嵌套（俄罗斯套娃）"></a>嵌套<del>（俄罗斯套娃）</del></h2><p>即列表套字典，字典套列表，字典套字典。</p><p>本质上很简单，<strong>只需要注意调用字典内容时要主意好对应键就可以了</strong></p><h3 id="列表存字典"><a href="#列表存字典" class="headerlink" title="列表存字典"></a>列表存字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125; </span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125; </span><br><span class="line"></span><br><span class="line">aliens = [alien_0, alien_1, alien_2] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens: </span><br><span class="line"><span class="built_in">print</span>(alien) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125; </span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125; </span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125; </span><br></pre></td></tr></table></figure><h3 id="字典存列表"><a href="#字典存列表" class="headerlink" title="字典存列表"></a>字典存列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pizza = &#123; </span><br><span class="line"><span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>, </span><br><span class="line"><span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>], </span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You ordered a &quot;</span> + pizza[<span class="string">&#x27;crust&#x27;</span>] + <span class="string">&quot;-crust pizza &quot;</span> + <span class="string">&quot;with the following toppings:&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]: <span class="comment">#遍历字典中的列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You ordered a thick-crust pizza <span class="keyword">with</span> the following toppings: </span><br><span class="line">mushrooms </span><br><span class="line">extra cheese</span><br></pre></td></tr></table></figure><h3 id="字典存字典"><a href="#字典存字典" class="headerlink" title="字典存字典"></a>字典存字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">users = &#123; </span><br><span class="line"> <span class="string">&#x27;aeinstein&#x27;</span>: &#123; </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>, </span><br><span class="line">    &#125;, </span><br><span class="line"> <span class="string">&#x27;mcurie&#x27;</span>: &#123; </span><br><span class="line"> <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>, </span><br><span class="line"> <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>, </span><br><span class="line">    &#125;, </span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items(): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username) </span><br><span class="line">full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>] </span><br><span class="line">location = user_info[<span class="string">&#x27;location&#x27;</span>] </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title()) </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title()) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Username: aeinstein </span><br><span class="line"> Full name: Albert Einstein </span><br><span class="line"> Location: Princeton </span><br><span class="line">Username: mcurie </span><br><span class="line"> Full name: Marie Curie </span><br><span class="line"> Location: Paris </span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的意义"><a href="#函数的意义" class="headerlink" title="函数的意义"></a>函数的意义</h2><p>函数的意义很显然就是为了增加代码的复用率，减少写重复代码的麻烦</p><h2 id="自定义函数的基础语法"><a href="#自定义函数的基础语法" class="headerlink" title="自定义函数的基础语法"></a>自定义函数的基础语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">自定义函数名称</span> (传入参数):</span><br><span class="line">执行的语句</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><p>和C/C++不同的是，Python的自定义函数不用给函数的返回值设定函数类型，因此在Python中，<strong>返回值是可以忽略不写的</strong></p><p>甚至可以<strong>不传参</strong>，直接执行里面的语句</p><p>同C/C++一样，在开始深入函数之前，不妨来实现以下<code>len()</code>(求字符串长度)的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_len</span>(<span class="params">str_</span>):</span><br><span class="line">    cont = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_:</span><br><span class="line">        cont += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str_&#125;</span>的个数为<span class="subst">&#123;cont&#125;</span>个&quot;</span>)</span><br><span class="line">str1 = <span class="string">&quot;asd4as56d4as65&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;asd4a5654655&quot;</span></span><br><span class="line">my_len(str1)</span><br><span class="line">my_len(str2)</span><br></pre></td></tr></table></figure><h2 id="函数的传入参数"><a href="#函数的传入参数" class="headerlink" title="函数的传入参数"></a>函数的传入参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">自定义函数名称</span> (传入参数):</span><br><span class="line">执行的语句</span><br><span class="line">    <span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>在Python的函数中，实参和形参使用的方式是一样的</p><p>调用函数时，使用的是实际参数（实参）</p><p>函数定义中，使用的是形式参数（形参）</p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>Python函数的返回值极其简单，就是根据最后的结果，来判断返回值的数据类型</p><h2 id="None类型"><a href="#None类型" class="headerlink" title="None类型"></a>None类型</h2><p>Python定义函数时，如果没有return语句，那么函数有返回值吗？</p><p>答案是：<strong>有的</strong></p><p>Python中有一个特殊的量：<code>None</code>，它的类型是<code>&lt;class &#39;NoneType&#39;&gt;</code></p><p>因此当<strong>没有返回值</strong>的时候，实际是返回了<code>None</code>（即空的，无实际意义）</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="1-函数无返回值时"><a href="#1-函数无返回值时" class="headerlink" title="1.函数无返回值时"></a>1.函数无返回值时</h4><p>就如刚才说的那样</p><h4 id="2-if判断"><a href="#2-if判断" class="headerlink" title="2.if判断"></a>2.if判断</h4><p><code>None</code>等同于<code>False</code></p><p>一般用于函数中主动返回<code>None</code>去和<code>if判断</code>打配合</p><h4 id="3-声明无内容的变量"><a href="#3-声明无内容的变量" class="headerlink" title="3.声明无内容的变量"></a>3.声明无内容的变量</h4><p>当变量暂时不需要有具体值时，可以用None来代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h2><p>对于C/C++有一定基础的话，对这个想必一定不陌生</p><p>所谓的嵌套使用，就是在一个函数中又去使用了另外一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    fun_b()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">fun_a()</span><br></pre></td></tr></table></figure><h2 id="函数的变量作用域"><a href="#函数的变量作用域" class="headerlink" title="函数的变量作用域"></a>函数的变量作用域</h2><p> 变量作用域指的是变量的作用范围，也是分为两类(局部变量和全局变量)</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p><strong>只能</strong>在<strong>函数体</strong>内使用的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    </span><br><span class="line">test_a()</span><br><span class="line"><span class="built_in">print</span>(num)<span class="comment">#报错</span></span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p><strong>函数体内外</strong>都可以使用的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义全局变量a</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_b</span>():</span><br><span class="line">    num=<span class="number">500</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">test_a()</span><br><span class="line">test_b()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">500</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>在Python中如果函数体修改了全局变量的值，那么这个<strong>全局变量就会变成局部变量</strong>，因此函数体内修改全局变量，只会在<strong>函数体内发生改变</strong>不会对函数体外产生改变</p><p>那么我想要在函数体内修改全局变量呢？</p><p>这时候就可以引出我们的<code>global</code></p><h3 id="global-关键字"><a href="#global-关键字" class="headerlink" title="global 关键字"></a>global 关键字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义全局变量a</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_b</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num=<span class="number">500</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">test_a()</span><br><span class="line">test_b()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">500</span></span><br><span class="line"><span class="string">500</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="函数的说明文档"><a href="#函数的说明文档" class="headerlink" title="函数的说明文档"></a>函数的说明文档</h1><p>为什么要给说明文档单起一个大标题呢？</p><p>原因跟简单，说明文档十分的重要，为了以后的自己和工作后接手的同事<del>不去骂现在的自己</del>，在书写函数时，在函数里，加一些注释时很有必要的，接下来就是函数注释时需要提及的东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span> (x,y):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">add 函数 可以接收两个参数，进行两个参数相加的功能</span></span><br><span class="line"><span class="string">:param x:形参x表示相加的其中一个数字</span></span><br><span class="line"><span class="string">:param y:形参y表示相加的另外一个数字</span></span><br><span class="line"><span class="string">:return:返回值为x 与 y 相加的结果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    其中 </span></span><br><span class="line"><span class="string">    ：param：用于解释参数</span></span><br><span class="line"><span class="string">    ：return：返回值的说明</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = x+y</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>因此不难看出，重点需要写的东西就是 <strong>函数实现的功能</strong> <strong>调用的参数意义</strong> 和 <strong>返回值表达的意思</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心_2</title>
      <link href="/2023/01/13/C++-Day2/"/>
      <url>/2023/01/13/C++-Day2/</url>
      
        <content type="html"><![CDATA[<h1 id="C-的继承和多态"><a href="#C-的继承和多态" class="headerlink" title="C++的继承和多态"></a>C++的继承和多态</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>继承是面向对象的三大特征之一</p><p>有些类与类之间存在特殊的关系，例如界门纲目科属种</p><p>他们都是下级有上级的共性，还有自己的特性</p><p>而通过继承可以<strong>减少重复代码</strong></p><p>基本语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类(派生类) : 继承方式 父类(基类)    </span><br></pre></td></tr></table></figure><p>子类的成员中包含两大部分</p><p>一类是从父类继承过来的，一类是自己增加的成员</p><p>从基类继承过来的表现其共性，而新增的成员体现了其个性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//继承实现页面</span></span><br><span class="line"><span class="comment">//公共页面类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">head</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cot&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">3</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">3</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;etc&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C#页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span># : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">contnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;C#学习&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//python页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">contnt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;Python学习&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;C#页面&quot;</span>&lt;&lt;endl;</span><br><span class="line">    C# c1;</span><br><span class="line">    c1.<span class="built_in">head</span>();</span><br><span class="line">    c1.<span class="built_in">foot</span>();</span><br><span class="line">    c1.<span class="built_in">left</span>();</span><br><span class="line">    c1.<span class="built_in">content</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Python页面&quot;</span>&lt;&lt;endl;</span><br><span class="line">    Python py;</span><br><span class="line">    py.<span class="built_in">head</span>();</span><br><span class="line">    py.<span class="built_in">foot</span>();</span><br><span class="line">    py.<span class="built_in">left</span>();</span><br><span class="line">    py.<span class="built_in">content</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><p><strong>继承方式一共有三种</strong></p><ul><li>公共继承：父类中的公共权限在子类中<strong>依然是</strong>公共权限，保护权限<strong>依然是</strong>保护权限，但父类的私有权限<strong>不可访问</strong>。</li><li>保护继承：父类中的公共权限在子类中<strong>改变为</strong>保护权限，保护权限<strong>依然是</strong>保护权限，但父类的私有权限<strong>不可访问</strong>。</li><li>私有继承：父类中的公共权限在子类中<strong>改变为</strong>私有权限，保护权限<strong>改变为</strong>私有权限，但父类的私有权限<strong>不可访问</strong>。</li></ul><h3 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//父类中所有的非静态成员属性都会被子类继承</span></span><br><span class="line">    <span class="comment">//父类中私有成员属性是被编译器给隐藏了</span></span><br><span class="line">    <span class="comment">//因为访问不到，但是被继承下去了</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;size of son =&quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(son);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小技巧</strong></p><ol><li>利用开发人员命令提示工具查看查看对象模型</li><li>跳转盘符<code>D;</code></li><li>跳转文件路径<code>cd 具体路径</code></li><li>查看文件命名</li><li><code>cd /dl reportSingleClassLayout类名 文件名</code></li></ol><h3 id="继承中的构造和析构的顺序"><a href="#继承中的构造和析构的顺序" class="headerlink" title="继承中的构造和析构的顺序"></a>继承中的构造和析构的顺序</h3><p>子类继承父类后，当创建子类对象时，也会调用父类对象</p><p><strong>Question：父类和子类的构造和析构顺序是谁先谁后呢？</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base的构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base的析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son的构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son的析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><p>继承中构造和析构的顺序如下</p><p><strong>先构造父类再构造子类，先析构子类再析构父亲</strong></p><h3 id="继承同名成员处理方式"><a href="#继承同名成员处理方式" class="headerlink" title="继承同名成员处理方式"></a>继承同名成员处理方式</h3><ul><li>访问子类同名成员 直接访问(<strong>也就是说程序默认访问的是子类的同名成员</strong>)</li><li>访问父类同名成员 加作用域</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_a=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base=func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base=func(int a)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_a=<span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Son=func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员属性处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;s.m_a&lt;&lt;endl;<span class="comment">//默认访问子类</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;s.Base::m_a&lt;&lt;endl;<span class="comment">//添加作用域后访问父类成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员函数处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    s.<span class="built_in">func</span>();</span><br><span class="line">    s,Base::<span class="built_in">func</span>();</span><br><span class="line">    s.Base::<span class="built_in">func</span>(<span class="number">100</span>);<span class="comment">//不能写成 s.func(100)即使子类没有</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong></p><ul><li>如果子类中出现和父类同名的成员函数，子类的同名函数会隐藏掉父类中所有的同名函数(有参，无参)</li><li>而如果想要访问到父类中被隐藏的同名成员函数，需要加作用域 </li></ul><h3 id="继承同名静态成员的处理方式"><a href="#继承同名静态成员的处理方式" class="headerlink" title="继承同名静态成员的处理方式"></a>继承同名静态成员的处理方式</h3><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_a; </span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base=func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base=func(int a)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Base::m_a= <span class="number">100</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_a;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Base=func&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> Son::m_a</span>= <span class="number">200</span>;</span><br><span class="line"><span class="comment">//同名静态成员属性处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象访问数据</span></span><br><span class="line">Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;s.m_a&lt;&lt;endl;<span class="comment">//默认访问子类</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;s.Base::m_a&lt;&lt;endl;<span class="comment">//添加作用域后访问父类成员</span></span><br><span class="line">    <span class="comment">//2.通过类名访问数据</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;Son::m_a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;Base::m_a&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//第一个::通过类名的方法访问</span></span><br><span class="line">    <span class="comment">//第二个::代表访问父类的作用域</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a=&quot;</span>&lt;&lt;Son::Base::m_a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员函数处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象访问数据</span></span><br><span class="line">    Son s;</span><br><span class="line">    s.<span class="built_in">func</span>();<span class="comment">//默认子类</span></span><br><span class="line">    s,Base::<span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//2.通过类名访问数据</span></span><br><span class="line">    Son::<span class="built_in">func</span>();</span><br><span class="line">    Son::Base::<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点与上节一致，会进行隐藏父类的同名静态成员函数。</p><p>同名静态成员和同名非静态成员的处理方式一样，只不过有两种访问的方式（通过对象和通过类名）</p><h3 id="多继承和语法"><a href="#多继承和语法" class="headerlink" title="多继承和语法"></a>多继承和语法</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><p><code>class 子类 :继承方式 父类1,继承方式父类2....</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议使用多继承</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base1</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_a  =<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base2</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_b  =<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_c=<span class="number">100</span>;</span><br><span class="line">        m_d=<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名静态成员属性处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sizeof Son = &quot;</span>&lt;&lt;<span class="built_in">sizeof</span>(s)&lt;&lt;endl;<span class="comment">//16</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base1::m_a= &quot;</span>&lt;&lt;s.Base1::m_a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Base2::m_a= &quot;</span>&lt;&lt;s.Base2::m_a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同名成员函数处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.通过对象访问数据</span></span><br><span class="line">    Son s;</span><br><span class="line">    s.<span class="built_in">func</span>();<span class="comment">//默认子类</span></span><br><span class="line">    s,Base::<span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">//2.通过类名访问数据</span></span><br><span class="line">    Son::<span class="built_in">func</span>();</span><br><span class="line">    Son::Base::<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><p><strong>概念：</strong></p><p>两个子类继承与同一个父类，</p><p>又有某个类同时继承着两个子类</p><p>这种继承被称为菱形继承，或者钻石继承</p><p>但是这种继承通常会产生二义性的问题</p><p>因此为了解决</p><p>我们通常会利用<strong>虚继承</strong>来解决上述问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">pubilc:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加上 virtual 基类变成虚基类 继承变成虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//发生虚继承之后</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span>:<span class="keyword">public</span> Sheep,<span class="keyword">public</span> Tuo;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SheepTuo st;</span><br><span class="line">    st.Sheep::m_age=<span class="number">18</span>;</span><br><span class="line">    st.TUo::m_age =<span class="number">23</span>;</span><br><span class="line">    cout&lt;&lt;st.Sheep::m_age&lt;&lt;endl;<span class="comment">//28</span></span><br><span class="line">    cout&lt;&lt;st.Tuo::m_age&lt;&lt;endl;<span class="comment">//28</span></span><br><span class="line">    cout&lt;&lt;st.m_age&lt;&lt;endl;<span class="comment">//28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>多态分为两类</p><ul><li>静态多态：函数重载 和 运算符重载 属于静态多态，服用函数名</li><li>动态多态：子类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态的区别：</p><ul><li>静态多态的函数地址早绑定 - 编译阶段</li><li>动态多态的函数地址晚绑定 - 运行阶段</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">pubilc:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;动物在说话&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;羊在叫&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">//地址早绑定，在编译阶段就确定了函数地址</span></span><br><span class="line"><span class="comment">//因此指向了animal里的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSpeak</span><span class="params">(Animal &amp;animal)</span><span class="comment">//Animal &amp;animal = sheep</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    animal.<span class="built_in">spaek</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sheep sheep;</span><br><span class="line">    <span class="built_in">dospeak</span>(sheep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test01;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><p>动物在说话，原因是<strong>地址早绑定，在编译阶段就确定了函数地址。</strong></p><p><strong>解决方法: 加上虚函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">pubilc:</span><br><span class="line">    <span class="comment">//虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;动物在说话&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;羊在叫&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">//地址早绑定，在编译阶段就确定了函数地址</span></span><br><span class="line"><span class="comment">//因此指向了animal里的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSpeak</span><span class="params">(Animal &amp;animal)</span><span class="comment">//Animal &amp;animal = sheep</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    animal.<span class="built_in">spaek</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sheep sheep;</span><br><span class="line">    <span class="built_in">dospeak</span>(sheep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test01;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案就变成了 羊在叫。</p><h4 id="满足条件："><a href="#满足条件：" class="headerlink" title="满足条件："></a>满足条件：</h4><blockquote><p>1.有继承关系</p><p>2.子类重写父类的虚函数</p></blockquote><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>通过对父类的引用 来执行子类对象</p><h4 id="重写："><a href="#重写：" class="headerlink" title="重写："></a>重写：</h4><p>函数的返回值类型 函数名 参数列表 完全一致称为重写</p>]]></content>
      
      
      <categories>
          
          <category> C++语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#核心-封装</title>
      <link href="/2023/01/11/CSharp-Day1/"/>
      <url>/2023/01/11/CSharp-Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心"><a href="#C-核心" class="headerlink" title="C#核心"></a>C#核心</h1><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p>请根据右侧目录进行自助跳转</p><p>类名</p><p>{ </p><p> （写在类中的）</p><p>​    <strong>成员变量</strong></p><p>​    <strong>成员方法</strong></p><p>​    <strong>初始化调用-构造函数</strong></p><p>​    <strong>释放时调用-析构函数</strong></p><p>​    <strong>成员属性</strong></p><p>​    <strong>索引器</strong></p><p>​    <strong>静态成员-类名点出使用</strong></p><p>​    <strong>运算符重载</strong></p><p>}</p><p>（写在类外的）</p><p><strong>静态类和静态构造函数</strong></p><p><strong>拓展方法</strong></p><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p><strong>基本概念：</strong></p><ol><li>具有相同特征</li><li>具有相同行为</li><li>一类事物的抽象</li><li>类是对象的模板</li><li>可以通过类创建出对象</li><li>类的关键词：class</li></ol><h2 id="类声明在哪里"><a href="#类声明在哪里" class="headerlink" title="类声明在哪里"></a>类声明在哪里</h2><p>一般声明在namespace的语句块中</p><h2 id="类声明的语法"><a href="#类声明的语法" class="headerlink" title="类声明的语法"></a>类声明的语法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符(pubic，<span class="keyword">private</span>) <span class="keyword">class</span> 类名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量--特征</span></span><br><span class="line">    <span class="comment">//成员方法--行为</span></span><br><span class="line">    <span class="comment">//成员属性--保护特征</span></span><br><span class="line">    <span class="comment">//构造函数和析构函数</span></span><br><span class="line">    <span class="comment">//索引器</span></span><br><span class="line">    <span class="comment">//运算符重载</span></span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类声明实例"><a href="#类声明实例" class="headerlink" title="类声明实例"></a>类声明实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个类是用来形容人类的</span></span><br><span class="line"><span class="comment">//注意命名：用帕斯卡命名法</span></span><br><span class="line"><span class="comment">//同一个语句块中的不同类 不能重名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量--特征</span></span><br><span class="line">    <span class="comment">//成员方法--行为</span></span><br><span class="line">    <span class="comment">//成员属性--保护特征</span></span><br><span class="line">    <span class="comment">//构造函数和析构函数</span></span><br><span class="line">    <span class="comment">//索引器</span></span><br><span class="line">    <span class="comment">//运算符重载</span></span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是（类）对象"><a href="#什么是（类）对象" class="headerlink" title="什么是（类）对象"></a>什么是（类）对象</h2><p>基本概念：</p><ol><li><strong>类的声明</strong>和<strong>类对象（变量）声明</strong>是<strong>两个</strong>概念</li><li>类的声明类似<strong>枚举</strong>和<strong>结构体</strong>的声明，类的声明相当于声明了一个自定义的变量类型</li><li>而对象是类创建出来的</li><li>相当于声明一个指定类的变量</li><li>类创建对象的过程一般称为实例化对象</li><li>类对象都是<strong>引用类型</strong>的（<strong>数组 string都是引用类型</strong> 而 结构体是值类型）</li></ol><h2 id="实例化对象的基本语法"><a href="#实例化对象的基本语法" class="headerlink" title="实例化对象的基本语法"></a>实例化对象的基本语法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名 变量名; //默认为空</span></span><br><span class="line"><span class="comment">//类名 变量名 = null;（null代表空） //默认为空</span></span><br><span class="line"><span class="comment">//类名 变量名 = new 类名();//初始化</span></span><br></pre></td></tr></table></figure><h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p;</span><br><span class="line">        Person p2 = <span class="literal">null</span>;<span class="comment">//null 代表空 不分配堆内存空间</span></span><br><span class="line">        Person p3 = <span class="keyword">new</span> person();<span class="comment">//一个人的对象</span></span><br><span class="line">        Person p4 = <span class="keyword">new</span> person();<span class="comment">//另一个人的对象</span></span><br><span class="line">        <span class="comment">//虽然是来自一个类的实例化对象</span></span><br><span class="line">        <span class="comment">//但是他们的特征 行为等信息都是他们所独有的</span></span><br><span class="line">        <span class="comment">//千万千万不要觉得他们是共享了数据两个人 你是你 我是我 彼此没有关系</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">class</span> <span class="title">GameObject</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    GameObject A = <span class="keyword">new</span> GameObject();</span><br><span class="line">    GameObject B=A;</span><br><span class="line">    B= <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//A目前等于多少</span></span><br><span class="line">        GameObject A = <span class="keyword">new</span> GameObject();</span><br><span class="line">    GameObject B=A;</span><br><span class="line">    B= <span class="keyword">new</span> GameObject();</span><br><span class="line">        <span class="comment">//A和B有什么关系</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>1.因为类是一个引用类型，所以B=A实际上是在栈中创建了两个不同的空间，但是二者的地址相同因此所指向堆中的空间也相同。但是B=NULL，是将栈中的B所占有的空间替换为空，从而没有影响到堆中的空间。<strong>因此A不受影响，等于原来的值</strong></p><p>2.和上题一样，都是在栈中创建了两个不同的空间，一开始令B=A使B与A都指向了堆中相同的空间，但后来<code>B= new GameObject();</code>使B在堆中又创立了一个不同的空间，因此在堆中指向的空间也不同。<strong>所以A与B没有关系</strong></p><h1 id="成员变量和访问修饰符"><a href="#成员变量和访问修饰符" class="headerlink" title="成员变量和访问修饰符"></a>成员变量和访问修饰符</h1><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ol><li>基本规则：</li><li>声明在类语句块中</li><li>用来描述对象的特征</li><li>可以是任意变量类型</li><li>数量不做限制</li><li>是否赋值根据需求来定</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> E_SexType</span><br><span class="line">&#123;</span><br><span class="line">    Man,</span><br><span class="line">    Woman,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Position</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">pet</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量--特征</span></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&#x27;铅笔沫&#x27;</span>;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="comment">//性别</span></span><br><span class="line">    E_SexType sex;</span><br><span class="line">    <span class="comment">//女朋友</span></span><br><span class="line">    Person grilFriend;</span><br><span class="line">    <span class="comment">//朋友</span></span><br><span class="line">    Person[] boyFriend;</span><br><span class="line">    <span class="comment">//位置</span></span><br><span class="line">    Postion pos;</span><br><span class="line">    <span class="comment">//宠物</span></span><br><span class="line">    Pet pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><blockquote><p>public—公共的</p><p>private—私有的</p><p>protected—保护的</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="built_in">enum</span> E_SexType</span><br><span class="line">&#123;</span><br><span class="line">    Man,</span><br><span class="line">    Woman,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> Position</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">pet</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员变量--特征</span></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&#x27;铅笔沫&#x27;</span>;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">public</span> E_SexType sex;</span><br><span class="line">    <span class="comment">//女朋友</span></span><br><span class="line">    <span class="comment">//如果要在类中声明一个和自己相同类型的成员变量时</span></span><br><span class="line">    <span class="comment">//不能对它进行实例化</span></span><br><span class="line">    <span class="keyword">public</span> Person grilFriend;</span><br><span class="line">    <span class="comment">//朋友</span></span><br><span class="line">    <span class="keyword">public</span> Person[] boyFriend;</span><br><span class="line">    <span class="comment">//位置</span></span><br><span class="line">    <span class="keyword">public</span> Postion pos;</span><br><span class="line">    <span class="comment">//宠物</span></span><br><span class="line">    <span class="keyword">public</span> Pet pet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员变量的使用和初始值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//值类型 默认值是0</span></span><br><span class="line">        <span class="comment">//boll类型 默认值是false</span></span><br><span class="line">        <span class="comment">//引用类型 默认值是NULL</span></span><br><span class="line">        <span class="comment">//看默认值的小技巧 default(变量名称)</span></span><br><span class="line">        Console.WriteLine(<span class="literal">default</span>(<span class="built_in">bool</span>));<span class="comment">//false</span></span><br><span class="line">        Console.WriteLine(<span class="literal">default</span>(<span class="built_in">int</span>)); <span class="comment">//0</span></span><br><span class="line">        Console.WriteLine(<span class="literal">default</span>(Person)); <span class="comment">//打印出来看不到因为是空</span></span><br><span class="line">        p.age = <span class="number">10</span>;</span><br><span class="line">        Console,WriteLine(p.age);<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-3p是什么"><a href="#Q1-3p是什么" class="headerlink" title="Q1:3p是什么"></a>Q1:3p是什么</h3><h3 id="Q2-定义一个人类"><a href="#Q2-定义一个人类" class="headerlink" title="Q2:定义一个人类"></a>Q2:定义一个人类</h3><h3 id="Q3-定义一个学生类-带有同桌"><a href="#Q3-定义一个学生类-带有同桌" class="headerlink" title="Q3:定义一个学生类(带有同桌)"></a>Q3:定义一个学生类(带有同桌)</h3><h3 id="Q4-定义一个班级类-专业名称，教师容量，学生"><a href="#Q4-定义一个班级类-专业名称，教师容量，学生" class="headerlink" title="Q4:定义一个班级类(专业名称，教师容量，学生)"></a>Q4:定义一个班级类(专业名称，教师容量，学生)</h3><h3 id="Q5-请问p-age为多少"><a href="#Q5-请问p-age为多少" class="headerlink" title="Q5:请问p.age为多少"></a>Q5:请问p.age为多少</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.age = <span class="number">10</span>;</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p2.age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="Q6-请问p-age为多少"><a href="#Q6-请问p-age为多少" class="headerlink" title="Q6:请问p.age为多少"></a>Q6:请问p.age为多少</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.age = <span class="number">10</span>;</span><br><span class="line">Person p2 = p;</span><br><span class="line">p2.age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="Q7-请问s-age为多少"><a href="#Q7-请问s-age为多少" class="headerlink" title="Q7:请问s.age为多少"></a>Q7:请问s.age为多少</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s = new Student();</span><br><span class="line">s,age = 10;</span><br><span class="line">int age = s.age;</span><br><span class="line">age = 20;</span><br></pre></td></tr></table></figure><h3 id="Q8-请问s-deskmate-age为多少"><a href="#Q8-请问s-deskmate-age为多少" class="headerlink" title="Q8:请问s.deskmate.age为多少"></a>Q8:请问s.deskmate.age为多少</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.deskmate = <span class="keyword">new</span> Student();</span><br><span class="line">s.deskmate.age = <span class="number">10</span>;</span><br><span class="line">Student s2 = s.deskmate;</span><br><span class="line">s2.age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h2 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h2><h3 id="A1"><a href="#A1" class="headerlink" title="A1:"></a>A1:</h3><p><strong>private,public,protected</strong></p><h3 id="A2"><a href="#A2" class="headerlink" title="A2:"></a>A2:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        p.name =<span class="string">&#x27;铅笔沫&#x27;</span>;</span><br><span class="line">        p.homeAddress = <span class="string">&#x27;佳木斯&#x27;</span>；</span><br><span class="line">        <span class="comment">//etc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A3"><a href="#A3" class="headerlink" title="A3:"></a>A3:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line">    <span class="keyword">public</span> Student deskMate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        p.name =<span class="string">&#x27;铅笔沫&#x27;</span>;</span><br><span class="line">        p.homeAddress = <span class="string">&#x27;佳木斯&#x27;</span>；</span><br><span class="line">        Student p2 = <span class="keyword">new</span> Student();</span><br><span class="line">        p2.age = <span class="number">18</span>;</span><br><span class="line">        p2.name =<span class="string">&#x27;云笙繁华&#x27;</span>;</span><br><span class="line">        p2.homeAddress = <span class="string">&#x27;佳木斯&#x27;</span>；</span><br><span class="line">        p.deskMate = p2;</span><br><span class="line">        p2.deskMate = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A4"><a href="#A4" class="headerlink" title="A4:"></a>A4:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CLass</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> capacity;</span><br><span class="line">    <span class="keyword">public</span> Student[] students;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line">    <span class="keyword">public</span> Student deskMate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        p.name =<span class="string">&#x27;铅笔沫&#x27;</span>;</span><br><span class="line">        p.homeAddress = <span class="string">&#x27;佳木斯&#x27;</span>；</span><br><span class="line">        Student p2 = <span class="keyword">new</span> Student();</span><br><span class="line">        p2.age = <span class="number">18</span>;</span><br><span class="line">        p2.name =<span class="string">&#x27;云笙繁华&#x27;</span>;</span><br><span class="line">        p2.homeAddress = <span class="string">&#x27;佳木斯&#x27;</span>；</span><br><span class="line">        p.deskMate = p2;</span><br><span class="line">        p2.deskMate = p;</span><br><span class="line">        Class c = <span class="keyword">new</span> Class();</span><br><span class="line">        c.name = <span class="string">&quot;Unity&quot;</span>;</span><br><span class="line">        c.capacity = <span class="number">99999</span>;</span><br><span class="line">        c.student = <span class="keyword">new</span> student[] &#123;p,p2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A5"><a href="#A5" class="headerlink" title="A5:"></a>A5:</h3><p><strong>10</strong></p><h3 id="A6"><a href="#A6" class="headerlink" title="A6:"></a>A6:</h3><p><strong>二者指向地址相同，因此 p2,age = 20 与 p.age =20一致，因此p,age=20</strong></p><h3 id="A7"><a href="#A7" class="headerlink" title="A7:"></a>A7:</h3><p><strong>因为age是一个值类型，没有通过地址改变s,age的值所以s,age 仍然等于10</strong></p><h3 id="A8"><a href="#A8" class="headerlink" title="A8:"></a>A8:</h3><p><strong>因为Student s2 = s.deskmate 指向的同一个地址因此s2.age = 20 等价于 s.deskmate.age = 20</strong></p><h1 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h1><h2 id="成员方法的声明"><a href="#成员方法的声明" class="headerlink" title="成员方法的声明"></a>成员方法的声明</h2><p><strong>基本概念：</strong></p><ol><li>成员方法（函数）用来表现对象的行为</li><li>声明在类语句块中</li><li>适应来描述对象的行为</li><li>规则和函数声明规则相同</li><li>受到访问修饰符的规则影响</li><li>返回值函数不做限制</li></ol><p><strong>注意：</strong></p><ol><li>成员方法不要加static关键字</li><li>成员方法 必须实例化出对象 再通过对象来使用 相当于该对象执行了某个行为</li><li>成员方法 收到访问修饰符的影响</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;,&quot;</span>name.str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsAdult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员方法的使用"><a href="#成员方法的使用" class="headerlink" title="成员方法的使用"></a>成员方法的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Person[] friends;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;,&quot;</span>name.str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsAdult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddFriend</span>(<span class="params">Person p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(friends == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            friends = <span class="keyword">new</span> Person[] &#123;p&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//扩容 创建一个房子数组</span></span><br><span class="line">            Person[] newFriends = New Person[friends.Length + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//搬家</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i =<span class="number">0</span>;i&lt;friends.Length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                newFriends[i]=friends[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把新加的朋友放到最后一个</span></span><br><span class="line">            newFriends[newFriends.Length<span class="number">-1</span>]=p;</span><br><span class="line">            <span class="comment">//地址重定向</span></span><br><span class="line">            friends = Newfriends;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成员方法 必须实例化出对象 再通过对象来使用 相当于该对象执行了某个行为</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.name = <span class="string">&quot;铅笔沫&quot;</span>;</span><br><span class="line">        p.age =<span class="number">18</span>;</span><br><span class="line">        p.Speak(<span class="string">&quot;你好呀&quot;</span>);</span><br><span class="line">        p.IsAdult();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        p2.name = <span class="string">&quot;云笙繁华&quot;</span>;</span><br><span class="line">        p2.age =<span class="number">18</span>;</span><br><span class="line">        P.AddFrind(p2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;p.friends.Length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(p.Friends[i],name);<span class="comment">//打印出朋友的名字</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题-2"><a href="#练习题-2" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-为人类定义说话，吃饭，走路等方法"><a href="#Q1-为人类定义说话，吃饭，走路等方法" class="headerlink" title="Q1:为人类定义说话，吃饭，走路等方法"></a>Q1:为人类定义说话，吃饭，走路等方法</h3><h3 id="Q2-定义一个食物类，有名称，热量等特征，并将其与人类和学生类联系起来"><a href="#Q2-定义一个食物类，有名称，热量等特征，并将其与人类和学生类联系起来" class="headerlink" title="Q2:定义一个食物类，有名称，热量等特征，并将其与人类和学生类联系起来"></a>Q2:定义一个食物类，有名称，热量等特征，并将其与人类和学生类联系起来</h3><h2 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h2><h3 id="A1-1"><a href="#A1-1" class="headerlink" title="A1:"></a>A1:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>, name, str);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始走路了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃饭了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p = <span class="keyword">new</span> People();</span><br><span class="line">            p.name = <span class="string">&quot;1111&quot;</span>;</span><br><span class="line">            p.Speak(<span class="string">&quot;222222&quot;</span>);</span><br><span class="line">            p.Walk();</span><br><span class="line">            p.Eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A3-1"><a href="#A3-1" class="headerlink" title="A3:"></a>A3:</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> kaluli;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>, name, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始走路了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name,f.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Learn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;在学习&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name,f.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p = <span class="keyword">new</span> People();</span><br><span class="line">            p.name = <span class="string">&quot;1111&quot;</span>;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.name = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">            food f = <span class="keyword">new</span> food();</span><br><span class="line">            f.name = <span class="string">&quot;3333&quot;</span>;</span><br><span class="line"></span><br><span class="line">            p.Eat(f);</span><br><span class="line">            s.Eat(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h3><ol><li>在实例化对象时 会调用的用于初始化的函数</li><li>如果不写默认存在一个无参构造函数</li></ol><h3 id="构造函数的写法"><a href="#构造函数的写法" class="headerlink" title="构造函数的写法"></a>构造函数的写法</h3><ol><li>没有返回值</li><li>函数名和类名必须相同</li><li>没有特殊需求是 一般都是public的</li><li>构造函数可以被重载</li><li>this代表当前调用该函数的对象自己</li></ol><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>如果声明了有参构造而没有声明无参构造，则不能使用无参构造去实例化对象</p><p><code>参考C++</code></p><h3 id="this-的用法"><a href="#this-的用法" class="headerlink" title="this.的用法"></a>this.的用法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//this代表当前调用的该函数的对象的自己</span></span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数的特殊写法"><a href="#构造函数的特殊写法" class="headerlink" title="构造函数的特殊写法"></a>构造函数的特殊写法</h2><p>可以通过this 重用构造函数代码</p><p>访问修饰符 构造函数名（参数列表）:this(参数1，参数2…..)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;云笙繁华&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">int</span> age,<span class="built_in">string</span> name</span>):<span class="title">this</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;两个参数构造函数调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">&quot;铅笔沫&quot;</span>);</span><br><span class="line">        Console.WriteLine(p.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种特殊写法，会先调用this()（无则无参，有则对应到this里对应内容的函数），之后再调用该函数中的内容，并且this中的内容可以写死，或者进行默认的增减调整，会自动根据类型转到对应的函数</p><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><h3 id="基本概念：-1"><a href="#基本概念：-1" class="headerlink" title="基本概念："></a><strong>基本概念：</strong></h3><ol><li>当引用类型的堆内存被回收时，会调用该函数</li><li>对于需要手动管理内存的语言（比如C++），需要在析构函数中做一些内存回收处理</li><li>但是C#中存在自动垃圾回收机制GC</li><li>所以我们几乎不会怎么使用析构函数，除非你想在某一个对象被垃圾回收时，做一些特殊处理</li><li>在垃圾真正被回收的时候，才会调用的函数</li></ol><h3 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h3><p>在Unity开发中析构函数几乎不会使用</p><h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a><strong>基本语法：</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~类名()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><h3 id="垃圾回收，英文简写GC-Garbage-Collector"><a href="#垃圾回收，英文简写GC-Garbage-Collector" class="headerlink" title="垃圾回收，英文简写GC(Garbage Collector)"></a>垃圾回收，英文简写GC(Garbage Collector)</h3><p>垃圾回收的过程是在遍历堆(Heap)上动态分配的所有对象</p><p>通过识别它们是否被引用来确定哪些对象是垃圾，哪些对象仍要被引用</p><p>所谓的垃圾就是没有被任何变量，对象引用的内容</p><p>垃圾就需要被回收释放</p><h3 id="垃圾回收有很多种算法，比如"><a href="#垃圾回收有很多种算法，比如" class="headerlink" title="垃圾回收有很多种算法，比如"></a>垃圾回收有很多种算法，比如</h3><p>引用计数(Reference Counting)</p><p>标记清楚(Mark Sweep)</p><p>标记整理(Mark Compact)</p><p>复制整合(Copy Collection)</p><h3 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h3><p><strong>GC只负责堆(Heap)内存的垃圾回收</strong></p><p>引用类型都是存在堆(Heap)中的，所以它的分配和释放都通过垃圾回收机制来管理</p><p>栈(Stack)上的内存是由系统自动管理的</p><p>值类型在栈(Stack)中分配内存的，他们有自己的生命周期，不用对他们进行管理，会自动分配和释放</p><h3 id="C-中内存回收机制的大概原理"><a href="#C-中内存回收机制的大概原理" class="headerlink" title="C#中内存回收机制的大概原理"></a>C#中内存回收机制的大概原理</h3><p>0代内存 1代内存 2代内存</p><p>代的概念:</p><p>代是垃圾回收机制使用的一种算法(分代算法)</p><p>新分配的对象都会被配置在第0代内存中</p><p>每次分配都可能会进行垃圾回收以释放内存(0代内存满时)</p><p>在一次内存回收过程开始时，垃圾回收器会认为堆中全是垃圾，会进行以下两步</p><p>1.标记对象从根（静态字段、方法参数）开始检查引用对象，标记后为可达对象，未标记为不可达对象//不可达对象就认为是垃圾</p><p>2.搬迁对象压缩堆―(挂起执行托管代码线程)释放未标记的对象搬迁可达对象修改引用地址</p><p>大对象总被认为是第二代内存目的是减少性能损耗，提高性能</p><p>不会对大对象进行搬迁压缩8500o字节(83kb）以上的对象为大对象</p><p>简而言之，<strong>0代内存满时，触发GC将不可达对象清除，将可达对象转移至1代内存，当1代内存满时，再次触发GC，将可达对象转移至2代内存，并且将0、1代内存同时清空。</strong></p><h3 id="手动触发GC"><a href="#手动触发GC" class="headerlink" title="手动触发GC"></a>手动触发GC</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GC.collect();</span><br></pre></td></tr></table></figure><p>一般情况下 我们不会频繁调用</p><p>都是在 Loading过场景时 才调用</p><h2 id="练习题-3"><a href="#练习题-3" class="headerlink" title="练习题"></a>练习题</h2><h4 id="Q1-基于成员方法，对人类的构造函数进行重载，用人类创建若干个对象"><a href="#Q1-基于成员方法，对人类的构造函数进行重载，用人类创建若干个对象" class="headerlink" title="Q1:基于成员方法，对人类的构造函数进行重载，用人类创建若干个对象"></a>Q1:基于成员方法，对人类的构造函数进行重载，用人类创建若干个对象</h4><h4 id="Q2-基于成员变量，对班级类的构造函数进行重载，用班级类创建若干个对象"><a href="#Q2-基于成员变量，对班级类的构造函数进行重载，用班级类创建若干个对象" class="headerlink" title="Q2:基于成员变量，对班级类的构造函数进行重载，用班级类创建若干个对象"></a>Q2:基于成员变量，对班级类的构造函数进行重载，用班级类创建若干个对象</h4><h4 id="Q3-写一个Ticket类"><a href="#Q3-写一个Ticket类" class="headerlink" title="Q3:写一个Ticket类"></a>Q3:写一个Ticket类</h4><p>写一个Ticket类，有一个距离变量(在构造对象时赋值，不能为负数)，有一个价格特征，有一个方法GetPrice可以读取到价格，并且根据距离distance计算价格price ( 1元/公里)</p><p>0~100公里不打折</p><p>101~200公里打9.5折</p><p>201~300公里打9折</p><p>300公里以上打8折</p><p>有一个显示方法，可以显示这张票的信息。</p><p>例如:100公里100块钱</p><h3 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h3><h4 id="A1-2"><a href="#A1-2" class="headerlink" title="A1:"></a><strong>A1:</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> kaluli;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>, name, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始走路了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">Food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name,f.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height,<span class="built_in">int</span> age,<span class="built_in">string</span> homeAddress</span>) :<span class="title">this</span>(<span class="params">name,height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.homeAddress = homeAddress;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p1 = <span class="keyword">new</span> People(<span class="string">&quot;铅笔沫&quot;</span>, <span class="number">177</span>, <span class="number">19</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">            People p2 = <span class="keyword">new</span> People(<span class="string">&quot;云&quot;</span>,<span class="number">165</span>, <span class="number">18</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="A2-1"><a href="#A2-1" class="headerlink" title="A2:"></a><strong>A2:</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> kaluli;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> capacity;</span><br><span class="line">        <span class="keyword">public</span> Student[] students;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> capacity ,Student[] students</span>):<span class="title">this</span>(<span class="params">name,capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.students = students;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Learn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;在学习&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">Food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name, f.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>, name, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始走路了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">Food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name,f.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height,<span class="built_in">int</span> age,<span class="built_in">string</span> homeAddress</span>) :<span class="title">this</span>(<span class="params">name,height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.homeAddress = homeAddress;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p1 = <span class="keyword">new</span> People(<span class="string">&quot;铅笔沫&quot;</span>, <span class="number">177</span>, <span class="number">19</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">            People p2 = <span class="keyword">new</span> People(<span class="string">&quot;云&quot;</span>,<span class="number">165</span>, <span class="number">18</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">            Class c1 = <span class="keyword">new</span> Class(<span class="string">&quot;Unity&quot;</span>, <span class="number">999999</span>);</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">            Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">            Class c2 = <span class="keyword">new</span> Class(<span class="string">&quot;C#&quot;</span>, <span class="number">999999</span>,<span class="keyword">new</span> Student[] &#123;<span class="keyword">new</span> Student(),<span class="keyword">new</span> Student()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="A3-2"><a href="#A3-2" class="headerlink" title="A3:"></a><strong>A3:</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Food</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> kaluli;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> capacity;</span><br><span class="line">        <span class="keyword">public</span> Student[] students;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">int</span> capacity ,Student[] students</span>):<span class="title">this</span>(<span class="params">name,capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.students = students;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Learn</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;在学习&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">Food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name, f.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> height;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> homeAddress;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>, name, str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Walk</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始走路了&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params">Food f</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;开始吃&#123;1&#125;&quot;</span>, name,f.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height,<span class="built_in">int</span> age,<span class="built_in">string</span> homeAddress</span>) :<span class="title">this</span>(<span class="params">name,height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.homeAddress = homeAddress;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">float</span> height</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.height = height;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Ticket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">uint</span> distance;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> price;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Ticket</span>(<span class="params"><span class="built_in">uint</span> distance</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.distance = distance;</span><br><span class="line">            price = GetPrice();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">GetPrice</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(distance &gt;<span class="number">300</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> distance * <span class="number">0.8f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(distance&gt;=<span class="number">201</span>&amp;&amp;distance&lt;=<span class="number">300</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> distance * <span class="number">0.9f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(distance&gt;=<span class="number">101</span>&amp;&amp;distance&lt;=<span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> distance * <span class="number">0.95f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> distance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;&#123;0&#125;公里&#123;1&#125;块钱&quot;</span>,distance,price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            People p1 = <span class="keyword">new</span> People(<span class="string">&quot;铅笔沫&quot;</span>, <span class="number">177</span>, <span class="number">19</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">            People p2 = <span class="keyword">new</span> People(<span class="string">&quot;云&quot;</span>,<span class="number">165</span>, <span class="number">18</span>, <span class="string">&quot;佳木斯&quot;</span>);</span><br><span class="line">            Class c1 = <span class="keyword">new</span> Class(<span class="string">&quot;Unity&quot;</span>, <span class="number">999999</span>);</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">            Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">            Class c2 = <span class="keyword">new</span> Class(<span class="string">&quot;C#&quot;</span>, <span class="number">999999</span>,<span class="keyword">new</span> Student[] &#123;<span class="keyword">new</span> Student(),<span class="keyword">new</span> Student()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>与c++类似</p><p>public—公共</p><p>private—私有</p><p>protected—保护</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问修饰符 属性类型 属性名</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//get&#123;&#125;//要有返回值</span></span><br><span class="line"><span class="comment">//set&#123;&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> money;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//解密处理</span></span><br><span class="line">            <span class="comment">//可以在返回之前添加一些逻辑规则</span></span><br><span class="line">            <span class="comment">//意味这个属性可以获取的内容</span></span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//可以进行加密处理</span></span><br><span class="line">            <span class="comment">//可以在设置之前添加一些逻辑规则</span></span><br><span class="line">            <span class="comment">//value 关键字 用于表示外部传入的值</span></span><br><span class="line">            name = <span class="keyword">value</span>;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Money</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//解密</span></span><br><span class="line">            <span class="keyword">return</span> monet<span class="number">-5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//加密</span></span><br><span class="line">            money=<span class="keyword">value</span>+<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Progarm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.<span class="built_in">WriteLine</span>(<span class="string">&quot;成员属性&quot;</span>);</span><br><span class="line">        Person p = <span class="built_in">newPerson</span>();</span><br><span class="line">        p.Name = <span class="string">&quot;qianbimo&quot;</span>;<span class="comment">//执行set</span></span><br><span class="line">        Console.<span class="built_in">WriteLine</span>(p.name);<span class="comment">//执行get</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问修饰符-1"><a href="#访问修饰符-1" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>PS：</p><p>1.默认不加 会使用属性中声明的访问权限</p><p>2.加的访问修饰符要低于属性的访问权限</p><p>3.不能让get和set的访问权限都低于属性的权限</p><p><strong>Public&gt;Private&gt;Protected</strong></p><p>可以解决3P的局限性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Money</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> money - <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        money = <span class="keyword">value</span> + <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    private get</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        return money - 5;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    private set   //报错</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    money = value +5;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get-和-set-可以只有一个"><a href="#get-和-set-可以只有一个" class="headerlink" title="get  和 set 可以只有一个"></a>get  和 set 可以只有一个</h2><p>意思是，在一个成员中 可以只有get或set其中一个。</p><p>一般用在 只希望得到数据 但是不希望让他人获得数据的时候</p><p>而且因为只有一个 get 或者 set  所以<strong>完全不需要</strong>在前面加上访问修饰符。</p><p>其实说人话，就是在于，<strong>只读与只写</strong>的不同罢了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pubilc <span class="built_in">bool</span> Sex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动属性"><a href="#自动属性" class="headerlink" title="自动属性"></a>自动属性</h2><p>作用就在于，外部能得但是不能改的特征</p><p>如果类中有一个特征是只希望外部<strong>能得</strong>，<strong>不能改</strong>的，又没什么特殊处理</p><p>那么可以直接使用自动属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> Height</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//没有在get 和 set 中写逻辑需求的想法</span></span><br><span class="line">    <span class="keyword">get</span>;</span><br><span class="line">    <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里 会自动设定一个 <strong>变量</strong> 将获取到的值蕴含在里面</p><h2 id="练习题-4"><a href="#练习题-4" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h3><p>定义一个学生类，有五种属性，分别为姓名，性别，年龄，Csharp成绩，Unity 成绩</p><p>有两个方法：</p><p>一个打招呼，介绍自己叫xxx，今年几岁了，性别是什么，计算自己的总分数和平均分并显示的方法</p><p>使用属性完成：年龄必须是0~150 岁之间，成绩必须是 0~100</p><p>性别只能是男女</p><p>实例化两个对象并测试。</p><h3 id="A1："><a href="#A1：" class="headerlink" title="A1："></a>A1：</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Homework</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> csharp;       </span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> unity;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> sex;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>; </span><br><span class="line">            <span class="keyword">set</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Sex</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> sex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">value</span> !=<span class="string">&quot;男&quot;</span>&amp;&amp;<span class="keyword">value</span>!=<span class="string">&quot;女&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sex = <span class="string">&quot;不男不女&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sex = <span class="keyword">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">value</span> &gt; <span class="number">150</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age = <span class="number">150</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    age = <span class="keyword">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Csharp</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> csharp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    csharp = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">value</span> &gt; <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    csharp = <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    csharp = <span class="keyword">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Unity</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> unity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">value</span> &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    unity = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">value</span> &gt; <span class="number">100</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    unity = <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    unity = <span class="keyword">value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我叫&#123;0&#125;,今年&#123;1&#125;岁了，是&#123;2&#125;同学&quot;</span>,Name,Age,Sex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> sum = Csharp+Unity;</span><br><span class="line">            <span class="built_in">float</span> avg = sum / <span class="number">2f</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;总分&#123;0&#125;，平均分&#123;1&#125;&quot;</span>, sum, avg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student s1 =<span class="keyword">new</span> Student();</span><br><span class="line">            s1.Name = <span class="string">&quot;铅笔沫&quot;</span>;</span><br><span class="line">            s1.Age = <span class="number">114514</span>;</span><br><span class="line">            s1.Unity = <span class="number">1919810</span>;</span><br><span class="line">            s1.Csharp = <span class="number">1545454</span>;</span><br><span class="line">            s1.Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">            s1.SayHello();</span><br><span class="line">            s1.ShowInfo();</span><br><span class="line">            </span><br><span class="line">            Student s2 =<span class="keyword">new</span> Student();</span><br><span class="line">            s2.Name = <span class="string">&quot;云笙繁华&quot;</span>;</span><br><span class="line">            s2.Age = <span class="number">18</span>;</span><br><span class="line">            s2.Unity = <span class="number">-100</span>;</span><br><span class="line">            s2.Csharp = <span class="number">100</span>;</span><br><span class="line">            s2.Sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">            s2.SayHello();</span><br><span class="line">            s2.ShowInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>让对象可以像数组一样通过索引访问其中的元素，使程序看起来更直观，更容易编写</p><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回值 <span class="keyword">this</span>[参数类型 参数名，参数类型 参数名.....]</span><br><span class="line">&#123;</span><br><span class="line">    内部的写法和规则和索引器相同</span><br><span class="line">    <span class="keyword">get</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">set</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Person[] friends;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Person <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">return</span> friends[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//value代表传入的值</span></span><br><span class="line">            friends[index] = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[]args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引器&quot;</span>);</span><br><span class="line">        Person P = <span class="keyword">new</span> Person();</span><br><span class="line">        p[<span class="number">0</span>] = <span class="keyword">new</span> Person();</span><br><span class="line">        Console.WriteLine(p[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引器中可以写逻辑"><a href="#索引器中可以写逻辑" class="headerlink" title="索引器中可以写逻辑"></a>索引器中可以写逻辑</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Person <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//可以写逻辑的 根据需求来处理这里面的内容</span></span><br><span class="line">        <span class="keyword">if</span>(friends == <span class="literal">null</span> || friends.Length - <span class="number">1</span>&lt;index)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//解决月结报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(friends == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            friends = <span class="keyword">new</span> Person[]&#123;<span class="keyword">value</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        friends[index] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引器可以重载"><a href="#索引器可以重载" class="headerlink" title="索引器可以重载"></a>索引器可以重载</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Person[] friends;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[,] array;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//索引器的重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">int</span> i,<span class="built_in">int</span> j]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> array[i,j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">array[i,j]=<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> <span class="keyword">this</span>[<span class="built_in">string</span> str]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(str)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;name&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;age&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> age.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Person <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">return</span> friends[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//value代表传入的值</span></span><br><span class="line">            friends[index] = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[]args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;索引器&quot;</span>);</span><br><span class="line">        Person P = <span class="keyword">new</span> Person();</span><br><span class="line">        p[<span class="number">0</span>] = <span class="keyword">new</span> Person();</span><br><span class="line">        Console.WriteLine(p[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        p[<span class="number">0</span>,<span class="number">0</span>] =<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题-5"><a href="#练习题-5" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1："><a href="#Q1：" class="headerlink" title="Q1："></a>Q1：</h3><p>自定义一个整型数组类，该类中有一个整型数组变量为它封装增删查改的办法</p><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><h2 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h2><p>静态关键字 static </p><p>用 static 修饰的 成员变量、方法、属性等</p><p>特点 <code>类名.变量名称</code>就是静态变量</p><h2 id="自定义静态成员"><a href="#自定义静态成员" class="headerlink" title="自定义静态成员"></a>自定义静态成员</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TestInt = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">CalcCircle</span>(<span class="params"><span class="built_in">float</span> r</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(Test.PI);</span><br><span class="line">        Console.WriteLine(Test.CalcCricle(<span class="number">2</span>));</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Console.WriteLine(t.testInt);</span><br><span class="line">        t.Testfun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么静态变量可以直接进行使用"><a href="#为什么静态变量可以直接进行使用" class="headerlink" title="为什么静态变量可以直接进行使用"></a>为什么静态变量可以直接进行使用</h2><p>众所周知，程序不能无中生有，实例化对象的目的就是为对象等进行分配空间。那为什么静态变量就可以直接使用呢？</p><p>静态成员的特点：</p><p><strong>静态变量有一个属于自己的大空间叫做静态存储区</strong></p><p>1.程序开始运行时 就会分配内存空间，所以就可以直接使用</p><p>2.静态成员和程序同生共死</p><p>3.只有使用静态变量，程序结束时内存空间才会释放，所以一个静态成员就会有自己唯一的一个”内存小房间”，这就让<strong>静态成员有了自己的唯一性</strong>。</p><p>4.在任何地方使用都是用小房间的内容，改变的也是房间内的内容。</p><h2 id="静态函数中不能使用非静态成员"><a href="#静态函数中不能使用非静态成员" class="headerlink" title="静态函数中不能使用非静态成员"></a>静态函数中不能使用非静态成员</h2><p>成员变量只能将对象实例化出来后 <strong>才能点出来使用</strong> 不能无中生有</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TestInt = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">CalcCircle</span>(<span class="params"><span class="built_in">float</span> r</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">        <span class="comment">//下行会进行报错</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(testInt);</span></span><br><span class="line">        <span class="comment">//如果想要使用的话 必须先实例化对象后才能使用</span></span><br><span class="line">        <span class="comment">//如下</span></span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Console.WriteLine(t.testInt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非静态函数可以使用静态成员"><a href="#非静态函数可以使用静态成员" class="headerlink" title="非静态函数可以使用静态成员"></a>非静态函数可以使用静态成员</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> TestInt = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">CalcCircle</span>(<span class="params"><span class="built_in">float</span> r</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        Console.WriteLine(PI);</span><br><span class="line">        Console.WriteLine(CalcCricle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常量和静态变量"><a href="#常量和静态变量" class="headerlink" title="常量和静态变量"></a>常量和静态变量</h2><p>const(常量)可以理解为<strong>特殊</strong>的static(静态)</p><p>相同点：</p><p>都可以通过类名<code>.</code>出</p><p>不同点：</p><blockquote><p>1.const必须初始化不能修改，static没有这种限制</p><p>2.const只能修饰变量，static可以修修很多</p><p>3.const一定是卸载访问修饰符后面的，static没有这个要求</p></blockquote><h2 id="练习题-6"><a href="#练习题-6" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1:"></a>Q1:</h3><p>请说出const与static的区别</p><h3 id="Q2"><a href="#Q2" class="headerlink" title="Q2:"></a>Q2:</h3><p>请用静态成员来实现</p><p>一个类对象在整个应用程的生命周期中，有且仅会有一个该对象不存在，不能再外部实例化，直接通过该类类名就能得到唯一的对象</p><h1 id="静态类和构造函数"><a href="#静态类和构造函数" class="headerlink" title="静态类和构造函数"></a>静态类和构造函数</h1><h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>用static修饰的类</strong></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>只能包含静态成员，不能被实例化 更适合被当作<strong>工具类</strong></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.将常用的静态成员写在静态类中 方便使用</p><p>2.静态类不能被实例化，更能体现工具类的 <strong>唯一性</strong></p><p>比如 <code>Console</code>就是一个静态类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">std</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">value</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// public int value</span></span><br><span class="line">        <span class="comment">//报错 因为只能声明静态成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> testIndex =<span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestFun</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> TestIndex</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WhiteLine(”铅笔沫“);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h2><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><p>在构造函数之前加上 static 修饰</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>1.静态类和普通类都可以有</p><p>2.不能使用访问修饰符</p><p>3.不能有参数</p><p>4.只会自动调用一次</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>在静态构造函数中初始化 静态变量</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="静态类中的静态构造函数"><a href="#静态类中的静态构造函数" class="headerlink" title="静态类中的静态构造函数"></a>静态类中的静态构造函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StaticClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> testInt = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> testInt2 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> StaticClass</span><br><span class="line">    &#123;</span><br><span class="line">Console.WhiteLine(<span class="string">&quot;调用静态构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h4><p><strong>在第一次使用静态类时，就会自动调用一次静态构造函数</strong></p><h3 id="普通类中的静态构造函数"><a href="#普通类中的静态构造函数" class="headerlink" title="普通类中的静态构造函数"></a>普通类中的静态构造函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> testInt =<span class="number">200</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;静态构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;普通构造&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用顺序-1"><a href="#调用顺序-1" class="headerlink" title="调用顺序"></a>调用顺序</h4><p><strong>在第一次使用普通类时，就会自动优先调用一次静态构造函数</strong></p><h2 id="练习题-7"><a href="#练习题-7" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1:"></a>Q1:</h3><p>写一个用于数学计算的静态类</p><p>对类中提供计算圆面积，圆周长，矩形面积，矩形周长，取个数的绝对值方法等</p><h1 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h1><h2 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h2><p>为现有的非静态 变脸类型 添加 新方法</p><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><p>1.提升程序的拓展性</p><p>2.不需要在对象中重新写方法</p><p>3.不需要继承来添加方法</p><p>4.为别人封装的类型写额外的方法</p><h2 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h2><p>1.一定写在静态类当中的</p><p>2.一定是个静态函数</p><p>3.第一个参数为拓展目标</p><p>4.第一个参数用this修饰</p><h2 id="基本语法及其使用"><a href="#基本语法及其使用" class="headerlink" title="基本语法及其使用"></a>基本语法及其使用</h2><p><code>3P访问修饰符 static 返回值 函数名(this 拓展类名 参数名,参数类型 参数名,参数类型 参数名........)</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Tools</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为int拓展了一个成员方法</span></span><br><span class="line">        <span class="comment">//成员方法是需要 实例化对象才能使用的</span></span><br><span class="line">        <span class="comment">//value 代表使用该方法的实例化对象</span></span><br><span class="line">        <span class="comment">//没有参数的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SpeakValue</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//拓展方法的逻辑</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;int的拓展方法&quot;</span>+<span class="keyword">value</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//带参数的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SpeakStringInfo</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str, <span class="built_in">string</span> str2,<span class="built_in">string</span> str3</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;string的拓展方法&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;调用的对象&quot;</span>+str);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;传的参数&quot;</span>+str2+str3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">10</span>;</span><br><span class="line">            <span class="comment">//使用方法</span></span><br><span class="line">            i.SpeakValue();</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;000&quot;</span>;</span><br><span class="line">            str.SpeakStringInfo(<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义类型的拓展方法"><a href="#自定义类型的拓展方法" class="headerlink" title="自定义类型的拓展方法"></a>自定义类型的拓展方法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> i =<span class="number">10</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fun1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fun2</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console,WriteLine(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Fun3</span> (<span class="params"><span class="keyword">this</span> Test t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WhiteLine(<span class="string">&quot;为test拓展的方法&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Test t = <span class="keyword">new</span> Test();</span><br><span class="line">            t,Fun3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：如果新加入的方法和原有的方法重名，则会优先调用原有的方法！</strong></p><h2 id="练习题-8"><a href="#练习题-8" class="headerlink" title="练习题"></a>练习题</h2><h2 id="Q1-3"><a href="#Q1-3" class="headerlink" title="Q1:"></a>Q1:</h2><p>为整形拓展一个求平方的方法</p><h2 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2:"></a>Q2:</h2><p>写一个玩家类，包含姓名，血量，攻击力，防御力等特征，攻击，移动，受伤等方法<br>为玩家类拓展一个自杀的方法</p><h1 id="运算符重载operator"><a href="#运算符重载operator" class="headerlink" title="运算符重载operator"></a>运算符重载operator</h1><h2 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h2><p>让自定义的类与结构体，能够使用运算符</p><h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><ol><li>一定是一个公共的静态方法</li><li>返回值写在<code>operator</code>之前</li><li>逻辑处理自定义</li><li>返回值自定义</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>条件运算符需要成对实现</li><li>一个符号可以多个重载</li><li>不能使用<code>ref</code>和<code>out</code></li></ol><h2 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>public static 返回类型 operator 运算符(参数列表)</code></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> x;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point <span class="keyword">operator</span> +(Point p1,Point p2)</span><br><span class="line">    &#123;</span><br><span class="line">Point p = <span class="keyword">new</span> point();</span><br><span class="line">        p.x=p1.x+p2.x;</span><br><span class="line">        p.y=p1.y+p2.y;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Point <span class="keyword">operator</span> +(Point p1,<span class="built_in">int</span> a)</span><br><span class="line">    &#123;</span><br><span class="line">Point p = <span class="keyword">new</span> point();</span><br><span class="line">        p.x=p1.x+a;</span><br><span class="line">        p.y=p1.y+a;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Point p = <span class="keyword">new</span> Point();</span><br><span class="line">p.x = <span class="number">1</span>;</span><br><span class="line">p.y = <span class="number">1</span>;</span><br><span class="line">Point p1 =<span class="keyword">new</span> Ponit();</span><br><span class="line">P1.x = <span class="number">2</span>;</span><br><span class="line">p1.y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">Point p3 = p+p1;</span><br><span class="line">Point p4 = p+<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="可重载和不可重载的运算符"><a href="#可重载和不可重载的运算符" class="headerlink" title="可重载和不可重载的运算符"></a>可重载和不可重载的运算符</h2><h3 id="可重载的运算符"><a href="#可重载的运算符" class="headerlink" title="可重载的运算符"></a>可重载的运算符</h3><p><code>()</code>内部写的是需要传几个参数</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+(2) -(2) *(2) /(2) %(2) ++(1) --(1)</code></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>!(1)</code></p><p>看到这里，你可能会疑惑，我要怎么去重载<code>!</code>这个运算符呢？</p><p>其实没有必要去纠结，运算符重载是很自由的，你可以自定义返回，它是<strong>布尔类型</strong>还是<strong>整形</strong>，抑或是<strong>浮点数</strong></p><p>举个例子</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="keyword">operator</span> !(Point p1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static int operator !(Point p1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">这两者都是可以的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>那么与(&amp;&amp;)或(||)这两个运算符呢，很遗憾的是，他们两个并不支持去重载。</p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><code>|(2) &amp;(2) ^(2) ~(1) &lt;&lt;(2) &gt;&gt;(2)</code></p><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p><code>&gt;(2) &lt;(2) &gt;=(2) &lt;=(2)</code></p><p>值得注意的是，刚才在上方我们也说了，条件运算符要成对出现。这代表着什么意思呢？</p><p><strong>是说明，当存在<code>&gt;</code>重载时，<code>&lt;</code>也必须跟着重载</strong></p><h3 id="不可重载的运算符"><a href="#不可重载的运算符" class="headerlink" title="不可重载的运算符"></a>不可重载的运算符</h3><ul><li>逻辑与(<code>&amp;&amp;</code>) 逻辑或(<code>||</code>)</li><li>索引符(<code>[]</code>)</li><li>强转运算符(<code>()</code>)</li><li>特殊运算符(点<code>.</code>三目运算符<code>? :</code>赋值符号 <code>=</code>)</li></ul><h2 id="练习题-9"><a href="#练习题-9" class="headerlink" title="练习题"></a>练习题</h2><h3 id="Q1：-1"><a href="#Q1：-1" class="headerlink" title="Q1："></a>Q1：</h3><p>定义一个位置结构体或类，为其重载判断是否相等的运算符<code>(x1,y1)==(x2,y2)</code>两个值相同时才为<code>true</code></p><h3 id="Q2："><a href="#Q2：" class="headerlink" title="Q2："></a>Q2：</h3><p>定义一个<code>Vector3</code>类<code>(x,y,z)</code>通过重载运算符实现以下运算</p><p><code>(x1,y1,z1)+(x2,y2,z2)=(x1+x2,y1+y2,z1+z2)</code></p><p><code>(x1,y1,z1)-(x2,y2,z2)=(x1-x2,y1-y2,z1-z2)</code></p><p><code>(x1,y1,z1)*num1=(x1*num1,y1*num1,z1*num1)</code></p><h2 id="答案-4"><a href="#答案-4" class="headerlink" title="答案"></a>答案</h2><h3 id="A1-3"><a href="#A1-3" class="headerlink" title="A1:"></a>A1:</h3><h3 id="A2-2"><a href="#A2-2" class="headerlink" title="A2:"></a>A2:</h3><h1 id="内部类和分部类"><a href="#内部类和分部类" class="headerlink" title="内部类和分部类"></a>内部类和分部类</h1><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在一个类中再申明一个类</p><h3 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h3><p>使用时要包裹者点出自己</p><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>亲密关系的变现</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>访问修饰符作用很大</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> Body body;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Body</span></span><br><span class="line">    &#123;</span><br><span class="line">     Arm leftArm;</span><br><span class="line">        Arm rightArm;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Arm</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><strong>使用时要包裹者点出自己</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Person.Body = <span class="keyword">new</span> Person.Body();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>其实意义不大，分开写也无伤大雅</del></p><h2 id="分部类"><a href="#分部类" class="headerlink" title="分部类"></a>分部类</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>把一个类分成几部分申明</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><code>partial</code></p><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>分部描述一个类</p><p>增加程序的拓展性</p><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul><li>分部类可以写在多个脚本文件中</li><li>分部类的访问修饰符要一直</li><li>分部类中不能有重复成员</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Speak</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分部方法"><a href="#分部方法" class="headerlink" title="分部方法"></a>分部方法</h2><p>该方法局限性太大，了解即可</p><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>将方法的申明和实现分离</p><h3 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h3><ol><li>不能加访问修饰符，默认私有</li><li>只能在分部类中申明</li><li>返回值只能是void</li><li>可以有参数但不用，out关键字</li></ol>]]></content>
      
      
      <categories>
          
          <category> C#语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心_1</title>
      <link href="/2023/01/05/C++-Day1/"/>
      <url>/2023/01/05/C++-Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><h2 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h2><p>c++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放，存放函数的参数值，局部变量等</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li></ul><p><strong>意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期，给我们强大的灵活编程</p><h3 id="程序运行前"><a href="#程序运行前" class="headerlink" title="程序运行前"></a>程序运行前</h3><p>在程序编译后，生成了exe可执行程序，未执行该程序前分为<strong>两个区域</strong></p><p><strong>代码区：</strong></p><p>存放cpu执行的机器指令</p><p>代码区是共享且只读的</p><p><strong>全局区：</strong></p><p>全局变量和静态变量存放至此</p><p>全局区还包含了常量区，字符串常量和其他常量也存放至此</p><p>该区域的数据在程序结束后由操作系统释放</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>C++面向对象的三大特征：封继承、多态</p><p>C++认为万事万物皆为对象，对象有其属性和行为</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p><strong>语法：</strong><code>class类名&#123;访问权限：属性 / 行为&#125;</code></p><p><strong>示例一：</strong>设计一个园类求圆的周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//访问权限</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公共权限</span></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="type">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line"> <span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span><span class="comment">//获取圆的周长</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*PI*m_r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化（通过一个类 创建一个对象的过程）</span></span><br><span class="line">    circle c1;<span class="comment">//通过园类 创建具体的圆</span></span><br><span class="line">    c1.m_r=<span class="number">10</span>;<span class="comment">//给圆对象的属性进行赋值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;圆的周长为：&quot;</span>&lt;&lt;c1.<span class="built_in">calculateZC</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例二：</strong>设计一个学生类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    string m_Name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> m_ID;<span class="comment">//学号</span></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="type">void</span> showstudent<span class="comment">//显示姓名和学号</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;姓名：&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="string">&quot;学号：&quot;</span>&lt;&lt;m_ID&lt;&lt;endl</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给姓名赋值</span></span><br><span class="line">    <span class="function">viod <span class="title">setname</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    student s1;<span class="comment">//s1赋值</span></span><br><span class="line">    s1,m_name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s1.m_ID = <span class="number">1</span>;</span><br><span class="line">    s1.<span class="built_in">showstudent</span>();<span class="comment">//显示学生信息</span></span><br><span class="line">    student s2;</span><br><span class="line">    s2.m_name =<span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    s2.m_ID=<span class="number">2</span>;</span><br><span class="line">    s2.<span class="built_in">showstudent</span>();</span><br><span class="line">    s3.<span class="built_in">setname</span>(<span class="string">&quot;王五&quot;</span>);<span class="comment">//另外一种赋值方式</span></span><br><span class="line">    s.m_ID=;</span><br><span class="line">    s3.<span class="built_in">showstudent</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问权限：</strong></p><p>1.public    <strong>公共权限  </strong>   类内可以访问 类外可以访问</p><p>2.protected <strong>保护权限</strong> 类内可以访问 类外不可以访问 儿子可以访问父亲中的保护内容</p><p>3.privet     <strong>私有权限</strong>    类内可以访问 类外不可以访问 儿子不可以访问父亲的私有内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公共权限</span></span><br><span class="line">    string m_name;<span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">//保护权限</span></span><br><span class="line">    string car;</span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//私有权限</span></span><br><span class="line">    <span class="type">int</span> m_password;<span class="comment">//银行卡密码</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        m_car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">        m_password = <span class="number">123456</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    person p1;<span class="comment">//实例化具体对象</span></span><br><span class="line">    p1.m_name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    <span class="comment">//p1.m_car = &quot;奔驰&quot;;//报错 保护权限内容类外访问不到</span></span><br><span class="line">    <span class="comment">//p1.m_password = 123;//报错 私有权限内容类外不可以访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct和class的区别"><a href="#struct和class的区别" class="headerlink" title="struct和class的区别"></a>struct和class的区别</h3><p>c++中二者默认的访问权限不同</p><ul><li>struct 的默认权限是 public</li><li>class 的默认权限是 private</li></ul><h3 id="成员属性设置为私有"><a href="#成员属性设置为私有" class="headerlink" title="成员属性设置为私有"></a>成员属性设置为私有</h3><p>优点:</p><p>1.将所有成员属性设置为私有，可以控制读写权限</p><p>2.对于写权限，我们可以检验数据的有效性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//写(设置)姓名</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setname</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读(获取)姓名</span></span><br><span class="line">    <span class="function">string <span class="title">getname</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_name;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//读(获取)年龄</span></span><br><span class="line">    <span class="function">string <span class="title">getage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_age = <span class="number">0</span>;<span class="comment">//初始化年龄</span></span><br><span class="line">        <span class="keyword">return</span> m_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//年龄 想要可读可写 想要修改设置范围（0~150）</span></span><br><span class="line">    <span class="function">string <span class="title">getage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> m_age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置年龄</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">set_age</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age&lt;<span class="number">0</span>||age&gt;<span class="number">150</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;输入有误&quot;</span> &lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置情人</span></span><br><span class="line">    <span class="function">viod <span class="title">setlover</span><span class="params">(string lover)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_lover = lover;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_name;<span class="comment">//姓名 可读可写</span></span><br><span class="line">    <span class="type">int</span> m_age;<span class="comment">//年龄 只读</span></span><br><span class="line">    string lover;<span class="comment">//情人 只写</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    person p;</span><br><span class="line">    p.m_name = <span class="string">&quot;张三&quot;</span>;<span class="comment">//报错</span></span><br><span class="line">    p.<span class="built_in">setname</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;姓名为：&quot;</span>&lt;&lt; p.<span class="built_in">getname</span>() &lt;&lt; endl;</span><br><span class="line">    p.m_age =<span class="number">18</span>;<span class="comment">//报错</span></span><br><span class="line">    p.<span class="built_in">setage</span>(<span class="number">18</span>);<span class="comment">//报错 无函数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;年龄为：&quot;</span>&lt;&lt; p.<span class="built_in">getage</span>() &lt;&lt; endl;</span><br><span class="line">    p.<span class="built_in">setlover</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;情人为：&quot;</span>&lt;&lt; p.m_lover &lt;&lt; endl;<span class="comment">//报错</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;情人为：&quot;</span>&lt;&lt; p.<span class="built_in">getlover</span>() &lt;&lt; endl;<span class="comment">//报错 无函数</span></span><br><span class="line">    p.<span class="built_in">set_age</span>(<span class="number">1000</span>);<span class="comment">//进行有效性验证//返回错误</span></span><br><span class="line">    p.<span class="built_in">set_age</span>(<span class="number">18</span>);<span class="comment">//正常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h3><p>每个对象的初始设置以及对象销毁前的清理数据的设置    </p><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>c++利用以上两者解决上述问题，并且会被编译器自动调用，完成上述的工作</p><p>但是<strong>编译器提供的构造函数和析构函数是空实现</strong></p><ul><li>构造函数：创造对象时为其成员属性赋值</li><li>析构函数：令对象进行销毁，执行一些清理工作</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><p>1.构造函数，没有返回值也不写void</p><p>2.函数名称与类名相同</p><p>3.构造函数可以有参数，因此可以发生重载</p><p>4.程序在调用对象的时候会自动调用构造，无需手动调用，并且只会调用一次</p><p><strong>析构函数语法：</strong><code>~类名()&#123;&#125;</code></p><p>1.析构函数，没有返回值也不写void</p><p>2.函数名称与类名相同，在名称前加上~</p><p>3.析构函数不可以有参数，因此不可以发生重载</p><p>4.程序在对象销毁前会自动调用析构，无需手动调用，并且只会调用一次 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//对象的初始化和清理</span></span><br><span class="line"><span class="comment">//1.构造函数进行初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//1.1构造函数</span></span><br><span class="line">    <span class="comment">//没有返回值 不用写void</span></span><br><span class="line">    <span class="comment">//函数名 与类名相同</span></span><br><span class="line">    <span class="comment">//有参数 可以进行重载</span></span><br><span class="line">    <span class="comment">//创建对象的时候会自动调用，且调用一次</span></span><br><span class="line">    <span class="built_in">person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;person 构造函数的调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.析构函数进行清理</span></span><br><span class="line">    ~<span class="built_in">person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Person的析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">viod <span class="title">tset01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    person p;<span class="comment">//在栈上的数据，test01执行完毕后，释放这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">    person p;<span class="comment">//只够构造没有析构 因为有下行代码</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数的分类及调用"><a href="#构造函数的分类及调用" class="headerlink" title="构造函数的分类及调用"></a>构造函数的分类及调用</h3><p>两种分类方式：</p><p>​    按参数分为：有参构造和无参构造</p><p>​    按类型分为：普通构造和拷贝构造</p><p>三中调用方式：</p><p>​    括号法</p><p>​    显示法</p><p>​    隐式转换法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">person</span>()<span class="comment">//无参构造（默认构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        age = a;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;person的无参构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">person</span>(<span class="type">int</span> a)<span class="comment">//有参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        age = a;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;person的有参构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">person</span>(<span class="type">const</span> person &amp;p)<span class="comment">//拷贝构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        age = p.age;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;person的拷贝构造函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;person的析构函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.括号法</span></span><br><span class="line">    person p;<span class="comment">//默认构造函数调用</span></span><br><span class="line">    <span class="function">person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//调用有参构造函数</span></span><br><span class="line">    <span class="function">person <span class="title">p3</span><span class="params">(p2)</span></span>;<span class="comment">//拷贝构造函数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p2的年龄为：&quot;</span>&lt;&lt;p2.age&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;p3的年龄为：&quot;</span>&lt;&lt;p3.age&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//注意事项</span></span><br><span class="line">    <span class="comment">//调用默认构造函数时，不要加()</span></span><br><span class="line">    <span class="comment">//因为编译器会认为这是一个函数声明,不会认为是在创造对象</span></span><br><span class="line">    <span class="comment">//2.显示法</span></span><br><span class="line">    person p1;</span><br><span class="line">    person p2 =<span class="built_in">person</span>(<span class="number">10</span>);<span class="comment">//有参构造</span></span><br><span class="line">    person p3 =<span class="built_in">person</span>(p2);<span class="comment">//拷贝构造</span></span><br><span class="line">    <span class="built_in">person</span>(<span class="number">10</span>);<span class="comment">//匿名对象 特点：当前行执行结束后，系统会立即回收匿名对象（马上进行析构）</span></span><br><span class="line">    <span class="comment">//注意事项</span></span><br><span class="line">    <span class="comment">//不要用拷贝构造函数 初始化匿名对象 编译器会认为person p3 == person (p3),会认为是对象声明</span></span><br><span class="line">    <span class="comment">//3.隐式转换法</span></span><br><span class="line">    person p4 = <span class="number">10</span>;<span class="comment">//相当于写了 person p4 = person(10);//有参构造</span></span><br><span class="line">    person p5 =p4;<span class="comment">//拷贝构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day13</title>
      <link href="/2022/11/15/C-Day13/"/>
      <url>/2022/11/15/C-Day13/</url>
      
        <content type="html"><![CDATA[<h1 id="指针初阶"><a href="#指针初阶" class="headerlink" title="指针初阶"></a>指针初阶</h1><h2 id="指针是什么"><a href="#指针是什么" class="headerlink" title="指针是什么"></a>指针是什么</h2><blockquote><p>在计算机科学中，<strong>指针</strong>（Pointer）是编程语言中的一个对象，利用地址，它的值直接指向存在电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，<strong>地址指向该变量单</strong>元。因此，将地址形象化的称为“指针”。意思hi是通过它能找到以它为内存的内存单元。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;<span class="comment">//a占4个字节</span></span><br><span class="line">    <span class="type">int</span> *pa = &amp;a;<span class="comment">//拿到的是4个字节中的第一个字节</span></span><br><span class="line">    *pa = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放地址的变量被叫做指针变量，地址就是指针。</p><h2 id="指针和指针类型"><a href="#指针和指针类型" class="headerlink" title="指针和指针类型"></a>指针和指针类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* pa;</span><br><span class="line">    <span class="type">char</span>* pc;</span><br><span class="line">    <span class="type">float</span>* pf;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pa));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pc));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(pf));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是一样的，虽然所占空间是一致的，但是没有万用指针类型，因此指针类型还是有实际意义的。</p><h2 id="指针类型的意义"><a href="#指针类型的意义" class="headerlink" title="指针类型的意义"></a>指针类型的意义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个十六进制位表示4个二进制位//f=1111=15</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x11223344</span>;<span class="comment">//两两为一个字节，正好4个人字节</span></span><br><span class="line">    <span class="type">int</span>*pa =&amp;a;</span><br><span class="line">    *pa=<span class="number">0</span>;<span class="comment">//改变了4个字节</span></span><br><span class="line">    <span class="type">char</span>*pc =&amp;a;</span><br><span class="line">    *pc=<span class="number">0</span>;<span class="comment">//只改变了1个字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p=arr;</span><br><span class="line">    <span class="type">char</span>*pc=arr;<span class="comment">//无论什么类型的指针都能存放地址、</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,pc+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果发现，字符指针+1相当于跳过一个字符，因此地址增加一个字节，而整形指针+1相当于跳过一个整型，因此地址增加4个字节</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.指针类型决定了：指针解引用有的权限有多大</p><p>2.指针类型决定了：指针走一步，能走多远（步长）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p=arr;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>；i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//p+i 其实是下标为i的地址</span></span><br><span class="line">        *(p+i)=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><blockquote><p>概念：野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p></blockquote><h3 id="野指针的成因"><a href="#野指针的成因" class="headerlink" title="野指针的成因"></a>野指针的成因</h3><h4 id="指针未初始化"><a href="#指针未初始化" class="headerlink" title="指针未初始化"></a>指针未初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p;<span class="comment">//p是一个局部的指针变量，局部变量不初始化的话，默认是随机值</span></span><br><span class="line">    *p =<span class="number">20</span>;<span class="comment">//非法访问内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针越界访问"><a href="#指针越界访问" class="headerlink" title="指针越界访问"></a>指针越界访问</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p=a;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *p=i;<span class="comment">//第十次的指针p变成了野指针</span></span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针指向的空间释放"><a href="#指针指向的空间释放" class="headerlink" title="指针指向的空间释放"></a>指针指向的空间释放</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p=test();</span><br><span class="line">     <span class="number">8</span>p=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何规避野指针"><a href="#如何规避野指针" class="headerlink" title="如何规避野指针"></a>如何规避野指针</h3><p>1.指针初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当不知道p应该初始化为，什么地址的时候，直接初始化为NULL</span></span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//当明确知道初始化的值时</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> *ptr =&amp;a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.避免指针越界(C语言本身是不会检查数数据的越界行为的)</p><p>3.指针指向的空间释放之后及时指向为空指针(NULL)</p><p>4.使用指针之前，要检查其有效性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p =<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(p!=NUll)</span><br><span class="line">&#123;</span><br><span class="line">    *p=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个指针变量当你不知道会指向什么地方的时候，初始化为空指针，当它指向的空间被释放掉之后，也指向到空指针，当它指向一个有效空间时，就给它一个有效的地址。因此指针就要么是一个空指针，要么就是一个有效的指针。</p><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><ul><li>指针+-整数</li><li>指针-指针</li><li>指针的关系运算</li></ul><h3 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N_VALUES 5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> values [N_VALUES];</span><br><span class="line">    <span class="type">float</span>*p;</span><br><span class="line">    <span class="keyword">for</span>(vp=&amp;values[<span class="number">0</span>];vp&lt;&amp;values[N_VALUES];)<span class="comment">//指针的关系运算</span></span><br><span class="line">    &#123;</span><br><span class="line">*vp++;<span class="comment">//指针+整数</span></span><br><span class="line">    &#125;<span class="comment">//地址由低到高变化 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p =a;</span><br><span class="line">    <span class="type">int</span> *pend =a+<span class="number">9</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&lt;=pend)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针-指针"></a>指针-指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Int <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[<span class="number">9</span>]-arr[<span class="number">10</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是9。</p><p>因此我们发现指针-指针得到的是两个指针中间相差的元素个数</p><p>但是指针相减有个前提是两个指针指向同一块空间</p><h2 id="strlen-求字符串"><a href="#strlen-求字符串" class="headerlink" title="strlen()求字符串"></a>strlen()求字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手搓strlen()的三种形式</p><h3 id="指针-指针-1"><a href="#指针-指针-1" class="headerlink" title="指针-指针"></a>指针-指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>*str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *start = str;</span><br><span class="line">    <span class="keyword">while</span>(str!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start-str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立临时变量"><a href="#建立临时变量" class="headerlink" title="建立临时变量"></a>建立临时变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_strlrn</span><span class="params">(<span class="type">char</span>*str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cont=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str!-<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cont++;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">char</span>* str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+(my_strlen&#123;str+<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的关系运算"><a href="#指针的关系运算" class="headerlink" title="指针的关系运算"></a>指针的关系运算</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N_VALUES 5</span></span><br><span class="line"><span class="keyword">for</span>(vp = &amp;values[N_VALUES];vp&gt; &amp;values[<span class="number">0</span>];)</span><br><span class="line">&#123;</span><br><span class="line">    *--vp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(vp=&amp;values[N_VALUES<span class="number">-1</span>];vp&gt;&amp;values;vp--)</span><br><span class="line">&#123;</span><br><span class="line">    *vp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种关系运算，虽然都可以达到目的，但还是要尽可能的避免使用后一种写法，因为标准并不保证其的可行性。</p><p>标准规定</p><blockquote><p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。</p></blockquote><h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><h2 id="数组名是什么？"><a href="#数组名是什么？" class="headerlink" title="数组名是什么？"></a>数组名是什么？</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,arr);<span class="comment">//数组名是数组首元素地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* p = arr;<span class="comment">//数组名</span></span><br><span class="line">    <span class="comment">//arr[2] &lt;==&gt; *(p+2) &lt;==&gt; *(2+p) &lt;==&gt; *(2+arr) &lt;==&gt;*(arr+2) == 2[arr]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能写成2[arr]是因为[]是一个操作符，而2和arr是两个操作数，而当计算机识别时</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">2</span>] --&gt; *(arr+<span class="number">2</span>)</span><br><span class="line"><span class="number">2</span>[arr] --&gt; *(<span class="number">2</span>+arr)</span><br></pre></td></tr></table></figure><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* pa =&amp;a;<span class="comment">//pa是指针变量,一级指针</span></span><br><span class="line">    pa;<span class="comment">//pa有变量，&amp;pa取出pa再内存中的地址</span></span><br><span class="line">    <span class="comment">//ppa就是一个二级指针变量</span></span><br><span class="line">    <span class="type">int</span>* *ppa =&amp;pa;<span class="comment">//*ppa是告诉你ppa是个指针，int*是说明 *ppa的字符类型</span></span><br><span class="line">    <span class="comment">//*ppa == pa,**ppa == a</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>存放指针的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];<span class="comment">//整型数组 = 存放整形的数组</span></span><br><span class="line">    <span class="type">char</span> ch[<span class="number">10</span>];<span class="comment">//字符数组 = 存放字符的数组</span></span><br><span class="line">    <span class="type">int</span>* parr[<span class="number">10</span>];<span class="comment">//整型指针数组 = 存放整型类型指针的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homework-Lesson-3</title>
      <link href="/2022/09/17/hemework-Lesson-3/"/>
      <url>/2022/09/17/hemework-Lesson-3/</url>
      
        <content type="html"><![CDATA[<h5 id="写代码将三个整数数按从大到小输出"><a href="#写代码将三个整数数按从大到小输出" class="headerlink" title="写代码将三个整数数按从大到小输出"></a><strong>写代码将三个整数数按从大到小输出</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; c)</span><br><span class="line">&#123;</span><br><span class="line">t = a;</span><br><span class="line">a = c;</span><br><span class="line">c = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b &lt; c)</span><br><span class="line">&#123;</span><br><span class="line">t = b;</span><br><span class="line">b = c;</span><br><span class="line">c = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, b, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印3的倍数的数"><a href="#打印3的倍数的数" class="headerlink" title="打印3的倍数的数"></a><strong>打印3的倍数的数</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a><strong>最大公约数</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">if</span>(a &lt; b)<span class="comment">//确保 a&lt;=b</span></span><br><span class="line">    &#123;</span><br><span class="line">        c = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        c = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印闰年</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">1000</span>; a &lt;= <span class="number">2000</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; a % <span class="number">100</span> != <span class="number">0</span> || a % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印素数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">100</span>; a &lt;= <span class="number">200</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; a; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数9的个数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">100</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">10</span> == <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a / <span class="number">10</span> == <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分数求和</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> a = <span class="number">0.0</span>, b = <span class="number">0.0</span>,c = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = a + (<span class="number">1.0</span>) / i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">b = b + (<span class="number">1.0</span>) / i;</span><br><span class="line">&#125;</span><br><span class="line">c = a - b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>求最大值</strong></p><p><strong>乘法口诀表</strong></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day12</title>
      <link href="/2022/09/17/C-Day12/"/>
      <url>/2022/09/17/C-Day12/</url>
      
        <content type="html"><![CDATA[<h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h2><p>数组是一组相同类型元素的集合。</p><p>创建方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type_arr_name[const_n];</span><br><span class="line"><span class="comment">//type_t 是指数组的元素类型</span></span><br><span class="line"><span class="comment">//const_n 是一个常量表达式，用来指定数组的大小</span></span><br></pre></td></tr></table></figure><h2 id="整型数组的初始化"><a href="#整型数组的初始化" class="headerlink" title="整型数组的初始化"></a>整型数组的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a =<span class="number">10</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;<span class="comment">//完全初始化</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//不完全初始化，没有被初始化的自动用0代替</span></span><br><span class="line"><span class="type">int</span> arr2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;<span class="comment">//根据初始化的内容来确定数组元素个数</span></span><br></pre></td></tr></table></figure><h2 id="字符数组的初始化"><a href="#字符数组的初始化" class="headerlink" title="字符数组的初始化"></a>字符数组的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch[<span class="number">5</span>] = &#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;<span class="comment">//用单引号依次存放</span></span><br><span class="line"><span class="type">char</span> ch2[] = &#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> ch3[<span class="number">5</span>] = <span class="string">&quot;bit&quot;</span>;<span class="comment">//元素 b i t \0</span></span><br><span class="line"><span class="type">char</span> ch4[] = <span class="string">&quot;bit&quot;</span>;<span class="comment">//b i t \0</span></span><br><span class="line"><span class="type">char</span> ch5[] = <span class="string">&quot;bit&quot;</span>;</span><br><span class="line"><span class="comment">//b i t \0 四个元素</span></span><br><span class="line"><span class="type">char</span> ch6[] = &#123;<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//b i t 三个元素 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,ch5);<span class="comment">//bit//有\0终止符</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s\n&quot;</span>,ch6);<span class="comment">//bit烫烫烫it //没有\0，直到在内存中找到下一个\0才会停止</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(ch5));<span class="comment">//3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(ch6));<span class="comment">//随机值</span></span><br></pre></td></tr></table></figure><h2 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h2><p>对于数组的使用，之前介绍了一个操作符：[],下标引用操作符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="number">5</span>;<span class="comment">//[]-下标引用操作符 //给第五个元素赋值为5</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//整个数组的大小/第一个元素的大小=数组的个数</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;sz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,<span class="number">0x12</span>);<span class="comment">//12</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,<span class="number">0x12</span>);<span class="comment">//00000012</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n&quot;</span>,i,&amp;arr[i]);<span class="comment">//%p是按地址的格式打印-十六进制的打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;arr[<span class="number">0</span>] = <span class="number">012F</span>FDA8</span><br><span class="line">&amp;arr[<span class="number">1</span>] = <span class="number">012F</span>FDAC</span><br><span class="line">&amp;arr[<span class="number">2</span>] = <span class="number">012F</span>FDB0</span><br><span class="line">&amp;arr[<span class="number">3</span>] = <span class="number">012F</span>FDB4</span><br><span class="line">&amp;arr[<span class="number">4</span>] = <span class="number">012F</span>FDB8</span><br><span class="line">&amp;arr[<span class="number">5</span>] = <span class="number">012F</span>FDBC</span><br><span class="line">&amp;arr[<span class="number">6</span>] = <span class="number">012F</span>FDC0</span><br><span class="line">&amp;arr[<span class="number">7</span>] = <span class="number">012F</span>FDC4</span><br><span class="line">&amp;arr[<span class="number">8</span>] = <span class="number">012F</span>FDC8</span><br><span class="line">&amp;arr[<span class="number">9</span>] = <span class="number">012F</span>FDCC</span><br></pre></td></tr></table></figure><p>每个都相差4，是因为每个整形元素的大小是4字节因此每个元素相差4个地址编号</p><p>因此我们可以得知，一维数组是在内存中连续存放的！并且随着数组下标的增长，地址是由低到高变化的！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>o&#125;;</span><br><span class="line">    <span class="type">int</span>*p = arr;<span class="comment">//数组名是数组首元素的地址</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);</span><br><span class="line">       p++;<span class="comment">//逐渐打印之后的元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="二维数组的创建和初始化"><a href="#二维数组的创建和初始化" class="headerlink" title="二维数组的创建和初始化"></a>二维数组的创建和初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> ch[<span class="number">3</span>][<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="二维数组可以看作成一个个表格形成的矩阵-大中方确信"><a href="#二维数组可以看作成一个个表格形成的矩阵-大中方确信" class="headerlink" title="二维数组可以看作成一个个表格形成的矩阵(大中方确信)"></a>二维数组可以看作成一个个表格形成的矩阵(大中方确信)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的初始化-创建的同时给与赋值</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;<span class="comment">//给每个数组都赋值</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;<span class="comment">//不完全初始化，后面补0，字符数组补充&#x27;\0&#x27;</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="二维数组的省略"><a href="#二维数组的省略" class="headerlink" title="二维数组的省略"></a>二维数组的省略</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//err</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//err</span></span><br><span class="line"><span class="type">int</span> arr[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;<span class="comment">//成功运行</span></span><br></pre></td></tr></table></figure><p>上面的例子可以说明，二维数组，行数可以省略但是列不能省略。</p><h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组在内存中的存储"><a href="#二维数组在内存中的存储" class="headerlink" title="二维数组在内存中的存储"></a>二维数组在内存中的存储</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d]=%p\n&quot;</span>,i,j,&amp;arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过二维数组的地址可以知道，相邻两个二维数组相差4个字节（一个整型），并且二维数组在内存中是连续存放的，换行业是连续存放的。</p><p>因此通过地址也可以解释之前的，为什么列可以省略但是行不行，原因行是确定一行当中有几个元素，但是当其不确定时，就不知道应从何开始，又从何结束。</p><p>而当我们知道了一个数组的地址我们就可以随意调用其他数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> arr[][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> *p = &amp;arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day11</title>
      <link href="/2022/09/13/C-Day11/"/>
      <url>/2022/09/13/C-Day11/</url>
      
        <content type="html"><![CDATA[<h1 id="分支语句和循环语句"><a href="#分支语句和循环语句" class="headerlink" title="分支语句和循环语句"></a>分支语句和循环语句</h1><p>C语言是结构化的程序设计语言有<strong>顺序结构，选择结构，循环结构</strong>三种结构</p><blockquote><p>分支语句</p></blockquote><ul><li>if</li><li>switch</li></ul><blockquote><p>循环语句</p></blockquote><ul><li>while</li><li>for</li><li>do while</li></ul><blockquote><p>goto语句</p></blockquote><p><strong>什么是语句？</strong></p><p>C语言中由一个分号隔开的句子，就是一个语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ;<span class="comment">//空语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">语法结构:</span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">    语句; <span class="comment">//一个语句不用大括号，多个语句需要大括号，形成一个代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">else</span>(表达式)</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(表达式)</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(表达式)</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line"><span class="keyword">else</span>(表达式)</span><br><span class="line">    语句<span class="number">3</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (age&gt;=<span class="number">18</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个例子，看看会暑促和什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;少年n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">18</span>&lt;= age &lt; <span class="number">26</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果输出是<code>青年</code>，那么为什么呢？因为这个写法是<strong>错误</strong>的</p><p>来看一下<code>else if</code>的表达式，已经设定<code>age</code>的值为<code>60</code>，因此<code>18&lt;=age</code> 为真，变成<code>1</code>，接着又是<code>&lt;26</code>这个表达式，<code>1&lt;26</code>为真，所以输出<code>else if</code>的语句，所以输出的是<code>青年</code>，而不为<strong>空</strong></p><p>正确的写法应该是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;少年n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span> &amp;&amp; age &lt; <span class="number">26</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;青年\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此if语句的操作逻辑是：<strong>如果表达式的结果为真，则语句执行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>)；</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是不打印，那么是为什么呢？</p><p>乍一看以为第一个<code>if</code>和<code>else</code>对上，表达式不成立，直接看<code>else</code>，应该是<code>haha</code>啊，但是<strong>else是与它最近的if配对</strong>的，第一个if不成立，导致它管理的语句也不会执行，因此不会进行打印</p><p>当你遇到这种写代码的人，就可以拉出去<strong><del>枪毙</del></strong>了</p><p>优化后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>)；</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);、</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以<strong>代码风格</strong>很重要</p><p>来点小练习</p><h3 id="判断一个数是不是奇数"><a href="#判断一个数是不是奇数" class="headerlink" title="判断一个数是不是奇数"></a>判断一个数是不是奇数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">15</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( num %<span class="number">2</span> ==<span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;奇数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;偶数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出1-100之间的奇数"><a href="#输出1-100之间的奇数" class="headerlink" title="输出1-100之间的奇数"></a>输出1-100之间的奇数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p><code>switch</code>语句也是一种分支语句，常常用于多分支的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(整型表达式)</span><br><span class="line">&#123;</span><br><span class="line">        语句项;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是语句项是什么呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是一些case语句</span></span><br><span class="line"><span class="comment">//如下:</span></span><br><span class="line"><span class="keyword">case</span> 整型常量表达式：</span><br><span class="line">    语句;</span><br></pre></td></tr></table></figure><p>来个例子感受一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期一\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//break 跳出循环</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期二\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期三\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期四\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期五\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期六\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;星期日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是1-5工作日，67休息日呢？就可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>实际效果是把语句列表划分为不同的部分</p><p>但是上述的例子输入别的值时没有反馈，应该怎么办呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> day = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;day);</span><br><span class="line">    <span class="keyword">switch</span> (day)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;工作日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;休息日\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//default 没有顺序，可以穿插在case语句中  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>与if语句十分相似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while的用法呢</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//while 语法结构</span></span><br><span class="line"><span class="keyword">while</span>(表达式) <span class="comment">//非0会一直进入循环</span></span><br><span class="line">    循环语句:</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好你现在进入了无限死循环</p><h3 id="试着用while语句打印出1-10的数字"><a href="#试着用while语句打印出1-10的数字" class="headerlink" title="试着用while语句打印出1-10的数字"></a>试着用while语句打印出1-10的数字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>while循环</code>中，<code>break</code>只要被<strong>触发</strong>就会<strong>永久的终止循环</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是 1 2 3 4</p><p>那么我想让代码继续跑下去呢？那首先想到的肯定是<code>continue</code>，那写一个试试看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果很奇怪，只有1 2 3 4 并且后面的光标还在闪烁，说明程序还在运行，也就是进入了死循环</p><p>因为在<code>while循环</code>中，<code>continue</code>的作用是跳过<strong>本次循环<code>continue</code>后边的代码</strong>，直接去判断部分，看是否进行下一次循环</p><p>来看一下别的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> ((ch = getchar()) != EOF)</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来分析一下</p><h3 id="getchar"><a href="#getchar" class="headerlink" title="getchar()"></a>getchar()</h3><p><img src="https://img1.imgtp.com/2022/09/15/WE7AVJaE.png" alt=""></p><p><img src="https://img1.imgtp.com/2022/09/15/COoZ1Lik.png" alt=""></p><p>当<code>putchar()</code>被执行时的过程</p><p><img src="https://img1.imgtp.com/2022/09/15/8nrFElPo.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = getchar();</span><br><span class="line">    <span class="comment">//printf(&quot;%c\n&quot;, ch);</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">//输出一个字符，可以完全替代上面的语句</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入一个大写的A就会输出一个大写的A</p><p>已经知道了<code>putchar()</code>输出错误时会返回<code>EOF</code>（<code>end of file</code> -文件的结束标志）</p><p>那么回到原语句</p><p>跑起来之后，就可以一直输入一个字符，输出一个相同的字符，如果想要停止的话可以输入<code>ctrl + z</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);<span class="comment">//这里没有取地址的原因是，数组本身存储的就是地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认密码(Y/N):&gt;&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ch = getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是运行之后发现，还没确认就接着确认失败是为什么呢？</p><p>因为不管getchat还是scanf都是输入函数，他们都需要去中间的缓冲区读取数据，而我们通过键盘来给缓冲区以信息而我们输入一个密码后需要回车进行确认。因此缓冲区的数据是xxxxx\n，而scanf拿走的只有xxxxx，剩下的\n就会在缓冲区等待，而getchar就会直接进行读取\n，因此就会直接显示结果。所以这就为我们修改代码提供了思路。我们应该进行清理缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);<span class="comment">//这里没有取地址的原因是，数组本身存储的就是地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认密码(Y/N):&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">//清理缓冲区</span></span><br><span class="line">    getchar();<span class="comment">//处理\n</span></span><br><span class="line">    <span class="type">int</span> ch = getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样刚才的问题就解决了，但是当我输入密码的时候是xxxxx xxxxx，它又变成了刚才的样子又是为什么呢？</p><p>因为此时的缓冲区是xxxxx xxxxx\n，而scanf之拿走了空格之前的字符，剩下的字符就又被剩下了，因此现在就需要使用while循环不团的清理缓存区剩下的字符，直到把\n也清理完</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> password[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,password);<span class="comment">//这里没有取地址的原因是，数组本身存储的就是地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请确认密码(Y/N):&gt;&quot;</span>);</span><br><span class="line">    <span class="comment">//清理缓冲区</span></span><br><span class="line">    <span class="comment">//getchar();//处理\n</span></span><br><span class="line">    <span class="comment">//清理缓冲区的多个内容</span></span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((tmp = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ；<span class="comment">//空语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ch = getchar();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;确认失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着用getchat来只进行打印数字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch=getchar()) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)<span class="comment">//在ASCII中代表的是除了48~57的字符，即除了0~9执行if语句 </span></span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//跳出本次循环继续打印</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p> 进入for循环之前再看一遍之前打印1~10的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)<span class="comment">//判断部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        i++；<span class="comment">//调整部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现影响这个代码的地方有三个地方，分别是初始化，判断部分，调整部分。但是由于后期会在这三者中间加入越来越多的代码，后期会变得很难调整，而for循环就可以解决这个痛点</p><p>语法结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>;)<span class="comment">//初始化 ； 判断 ； 调整</span></span><br><span class="line">    循环语法；</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码与上方效果一致</p><p><code>if</code>中的<code>continue</code>是会从调整再次开始的</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就不会出现像是while语句会出现的死循环，而是从调整再次开始</p><p>结果就是</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>同时建议for语句的循环控制变量的取值采取“前闭后开区间”写法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="comment">//前闭后开 i&lt;=9就是前闭后闭区间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环的三个部分都可以被省略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当判断部分被省略时 - 判断恒为真</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来判断一下下列循环会循环几次</p><figure class="highlight v"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span><span class="variable">.k</span>=<span class="number">0</span>; k=<span class="number">0</span>; i++,k++)</span><br><span class="line">    k++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do while()循环</p><p>do语句的语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    循环语句;</span><br><span class="line"><span class="keyword">while</span>(表达式)；</span><br></pre></td></tr></table></figure><p>执行流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>先执行再进行判断！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>练习</p><p>n的阶乘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">    <span class="type">int</span> sum =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum *i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算1!+2!+3!+4!+…+10!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;n&lt;=<span class="number">3</span>;n++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret *=n;</span><br><span class="line">        sum +=ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个有序数组中查找具体的某个数字n(二分查找)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k =<span class="number">7</span>;<span class="comment">//要查找的数字</span></span><br><span class="line">    <span class="type">int</span> sz=<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//数组的元素个数</span></span><br><span class="line">    <span class="type">int</span> left =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = sz<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&lt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&gt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;找到了,下标是：%d\n&quot;</span>,mid);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没找到\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写代码，演示多个字符从两端移动，向中间汇聚</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day10</title>
      <link href="/2022/08/26/C-Day10/"/>
      <url>/2022/08/26/C-Day10/</url>
      
        <content type="html"><![CDATA[<h1 id="初始指针"><a href="#初始指针" class="headerlink" title="初始指针"></a>初始指针</h1><blockquote><p>内存</p></blockquote><p>内存是电脑上特别重要的存储器，计算机中所有程序的运行都是在内存中进行的</p><p>所以为了有效地使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小是<strong>1个字节</strong></p><p>为了能够有效的访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该<strong>内存单元的地址</strong></p><p> 内存可以类比成现实生活中的空间，如果想要找到一个地方，我们就需要知道对应的地址 </p><p> 此时有两个问题</p><blockquote><p>1.内存是怎么编号的</p><p>2.一个这样的内存单元会占用多大的空间 </p></blockquote><h2 id="1-内存是怎么编号的"><a href="#1-内存是怎么编号的" class="headerlink" title="1.内存是怎么编号的"></a>1.内存是怎么编号的</h2><p>在讨论计算机是会考虑计算机时32位还是64位</p><p>二者指的是什么意思</p><p><strong>32位 - 32根地址线 - 物理线 - 通电 - 1/0</strong></p><p><strong>64位 - 64根地址线 - 物理线 - 通电 - 1/0</strong></p><p>再通过电信号转换成数字信息：1和0组成的二进制序列</p><p>如果是32位</p><p><img src="https://img1.imgtp.com/2022/09/13/9jWwpLuh.png" alt=""></p><p>经过排列组合会有2^32次方个序列，这些序列都可以<strong>作为内存编号</strong>，而这些编号就可以被<strong>称为内存单元的地址</strong></p><h2 id="2-一个内存单元会占用多大的空间"><a href="#2-一个内存单元会占用多大的空间" class="headerlink" title="2.一个内存单元会占用多大的空间"></a>2.一个内存单元会占用多大的空间</h2><p>我们可以通过假设法来猜测下</p><p>在32位操作系统下，已知可以有<code>2的32次方</code>个内存单元 ，也就是<code>4,294,967,296</code>个，假设每个单元占用<code>1bit</code>，那么经过转换，就会占用0.5GB的内存，管理的空间就会很小，而且一个bit就给一个地址，那么占用1个byte的char就会有8个bit也就是8个地址，太过于详细</p><p>经过研究讨论后，发现一个内存单元占用<strong>1个Byte</strong>是最好不过的</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//a在内存中分配空间需要占用4个字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要知道a存储的地址时，可以选择 F10 - 调试 - 窗口 - 内存/监视，为了方便观察可以将列改成4</p><p><img src="https://img1.imgtp.com/2022/09/13/J54xGVAr.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//a在内存中分配空间需要占用4个字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;a);<span class="comment">//%p 专门用来打印地址的//但是发现每次的打印结果都不同</span></span><br><span class="line">    <span class="type">int</span> * pa = &amp;a;<span class="comment">//pa是用来存放地址的，在C语言中pa就叫做指针变量</span></span><br><span class="line">    <span class="comment">// * 说明 pa是指针变量</span></span><br><span class="line">    <span class="comment">// int 说明pa执行的对象是int类型的</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> * pc = &amp;ch;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们知道<code>a</code>的地址之后，也是为了方便以后能够快速的找到<code>a</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span>* pa = &amp;a;</span><br><span class="line">    *pa = <span class="number">20</span>;<span class="comment">//* 解引用操作符 *pa就是通过pa里面的地址，找到a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是20</p><p>指针变量的空间大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>*));</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现结果都是一样的</p><p><strong>为什么呢？</strong></p><p>因为指针是用来存放地址的，所以指针的空间大小取决于地址的存储需要多大空间</p><p>但是这个结果会因为计算机的位数<strong>不同而不同</strong></p><p>32位 32bit - 4byte - 一个地址</p><p>64位 64bit - 8byte - 一个地址</p><h1 id="初识结构体"><a href="#初识结构体" class="headerlink" title="初识结构体"></a>初识结构体</h1><p>结构体是C语言中特别重要的知识点，结构体是的C语言有能力描述复杂类型</p><p>几条狗提也可以让C语言创建新的类型出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个学生</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name [<span class="number">20</span>];<span class="comment">//成员变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个书的类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name [<span class="number">20</span>]:</span><br><span class="line">    <span class="type">int</span> age ;</span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">20</span> ,<span class="number">85.5</span>&#125;;<span class="comment">//结构体的创建和初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1: %s %d %lf\n&quot;</span>, s.name , s.age , s.score);<span class="comment">//结构体变量.成员变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> * <span class="title">ps</span> =</span> &amp;s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2: %s %d %lf\n&quot;</span>, (*ps).name , (*ps).age , (*ps).score);<span class="comment">//费劲</span></span><br><span class="line">           </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3: %s %d %lf\n&quot;</span>, ps-&gt;name, ps-&gt;age, ps-&gt;score);</span><br><span class="line">    <span class="comment">//-&gt;作用: 结构体指针-&gt;成员变量名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day9</title>
      <link href="/2022/08/25/C-Day9/"/>
      <url>/2022/08/25/C-Day9/</url>
      
        <content type="html"><![CDATA[<h1 id="初识C语言关键字"><a href="#初识C语言关键字" class="headerlink" title="初识C语言关键字"></a>初识C语言关键字</h1><h2 id="C关键字注意事项"><a href="#C关键字注意事项" class="headerlink" title="C关键字注意事项"></a>C关键字注意事项</h2><p>1.只能使用C语言提供的关键字，<strong>不能自己创造关键字</strong></p><p>2.设置变量名时，不能是关键字</p><p>常见关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>  <span class="keyword">break</span>   <span class="keyword">case</span>  <span class="type">char</span>  <span class="type">const</span>   <span class="keyword">continue</span>  <span class="keyword">default</span>  <span class="keyword">do</span>   <span class="type">double</span> <span class="keyword">else</span>  <span class="keyword">enum</span>   <span class="keyword">extern</span>  <span class="type">float</span>  <span class="keyword">for</span>   <span class="keyword">goto</span>  <span class="keyword">if</span>   <span class="type">int</span>   <span class="type">long</span>  <span class="keyword">register</span>    <span class="keyword">return</span>   <span class="type">short</span>  <span class="type">signed</span> <span class="keyword">sizeof</span>   <span class="type">static</span> <span class="keyword">struct</span>  <span class="keyword">switch</span>  <span class="keyword">typedef</span> <span class="keyword">union</span>  <span class="type">unsigned</span>   <span class="type">void</span>  <span class="keyword">volatile</span>  <span class="keyword">while</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> 自动</span><br><span class="line"><span class="keyword">break</span> 满足条件时跳出循环</span><br><span class="line"><span class="type">char</span>字符类型</span><br><span class="line"><span class="type">const</span>常变量</span><br><span class="line"><span class="keyword">continue</span>继续</span><br><span class="line"><span class="keyword">default</span>默认</span><br><span class="line"><span class="class"><span class="keyword">enum</span>枚举</span></span><br><span class="line"><span class="class"><span class="title">extern</span>用来申明外部符号</span></span><br><span class="line"><span class="class"><span class="title">register</span>寄存器关键字</span></span><br><span class="line"><span class="class"><span class="title">signed</span>有符号的</span></span><br><span class="line"><span class="class"><span class="title">unsigned</span>无符号的</span></span><br><span class="line"><span class="class"><span class="title">sizeof</span>大小</span></span><br><span class="line"><span class="class"><span class="title">static</span>静态修饰</span></span><br><span class="line"><span class="class"><span class="title">union</span>联合体（共用体）</span></span><br><span class="line"><span class="class"><span class="title">void</span>无 空</span></span><br><span class="line"><span class="class"><span class="title">while</span><span class="title">while</span>循环</span></span><br><span class="line"><span class="class"><span class="title">typedef</span>类型重命名</span></span><br></pre></td></tr></table></figure><h5 id="define-include-都不是关键字，他们是预处理指令"><a href="#define-include-都不是关键字，他们是预处理指令" class="headerlink" title="define include 都不是关键字，他们是预处理指令"></a><code>define</code> <code>include</code> 都不是<strong>关键字</strong>，他们是<strong>预处理指令</strong></h5><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>auto 自动 每个局部变动都是auto修饰的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> a = <span class="number">10</span>;<span class="comment">//主动创建-自动销毁 auto可省略</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="register"><a href="#register" class="headerlink" title="register"></a>register</h2><p>寄存器关键字</p><p>作用是可以将大量频繁需要使用的数据放在<strong>寄存器</strong>中，进而提升效率</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> num = <span class="number">100</span>; <span class="comment">//建议将num的值存放到寄存器中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来介绍一下计算机中关于数据的存储</p><p><img src="https://img1.imgtp.com/2022/09/13/KExXfKQz.jpg" alt=""></p><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p>定义类型，更准确的说应该是<strong>类型重命名</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> u_int;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">    u_int num2 = <span class="number">100</span>; <span class="comment">//上下两行意思完全一致</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="static-修饰局部变量"><a href="#static-修饰局部变量" class="headerlink" title="static 修饰局部变量"></a>static 修饰局部变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码的结果是什么呢</p><p>来分析一下</p><p><img src="https://img1.imgtp.com/2022/09/13/tz6JIUam.png" alt=""></p><p>因此结果是2 2 2 2 2 2 2 2 2 2</p><p>再看用static修饰的局部变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">1</span>; <span class="comment">//a会被保留，出范围不会被销毁</span></span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        test();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是2 3 4 5 6 7 8 9 10 11</p><p>因此我们可以得知</p><p><strong>static 修饰局部变量，会改变该局部变量的生命周期</strong></p><p><img src="https://img1.imgtp.com/2022/09/13/dn2AyAgS.jpg" alt="()"></p><p>所以，static修饰的局部变量本质上是<strong>改变了变量的存储类型</strong>，进而改变了局部变量的生命周期</p><h3 id="static-修饰全局变量"><a href="#static-修饰全局变量" class="headerlink" title="static 修饰全局变量"></a>static 修饰全局变量</h3><p>再新建一个.c文件</p><p>之前提到过全局变量在整个工程中都可以被调用，那试一下在别的源文件中进行调用</p><p><img src="https://img1.imgtp.com/2022/09/13/RG0oRthm.png" alt=""></p><p>但是发生了<strong>报错</strong>，是为什么呢？</p><p>因为static修饰的全局变量，使得这个全局变量<strong>只能</strong>在自己的所在的源文件(.c)内部可以使用，<strong>其他源文件不可用</strong></p><p><strong>那为什么只有static修饰的变量不能被调用呢？</strong></p><p>首先说一下全局变量的属性</p><p>全局变量，在其他源文件内部可以被使用，是因为全局变量具有<strong>外部链接的属性</strong></p><p>但是被static修饰之后，<strong>就变成了内部连接的属性</strong>，其他源文件就不能连接到这个静态的全局变量了</p><h3 id="static修饰函数"><a href="#static修饰函数" class="headerlink" title="static修饰函数"></a>static修饰函数</h3><p><strong>static修饰的函数也和全局变量一样</strong></p><p>static修饰函数，使得函数只能在自己所在的源文件内部使用，不能在其他源文件内部使用</p><p>本质上：<strong>static是将函数的外部连接属性变成了内部连接属性，与static修饰的全局变量一样</strong></p><h3 id="define-定义常量和宏"><a href="#define-定义常量和宏" class="headerlink" title="#define 定义常量和宏"></a>#define 定义常量和宏</h3><h1 id="define也是一种预处理指令"><a href="#define也是一种预处理指令" class="headerlink" title="define也是一种预处理指令"></a>define也是一种<strong>预处理指令</strong></h1><p>define定义符号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br></pre></td></tr></table></figure><p>define定义宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x,y) x+y</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">4</span>*ADD(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果并不是4x5=20，而是11</p><p><strong>那是为什么呢？</strong></p><p>是因为 <strong>define定义的宏是直接进行替换的</strong>，因此这个式子不是<code>4*(2+3)</code>，而是<code>4*2+3</code></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day8</title>
      <link href="/2022/08/22/C-Day8/"/>
      <url>/2022/08/22/C-Day8/</url>
      
        <content type="html"><![CDATA[<h1 id="初始操作符2"><a href="#初始操作符2" class="headerlink" title="初始操作符2"></a>初始操作符2</h1><h2 id=""><a href="#" class="headerlink" title="~"></a>~</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~           对一个数的二进制按位取反</span><br></pre></td></tr></table></figure><p>对一个数的二进制<strong>按位取反</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ~a);<span class="comment">//按位取反</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是-1</p><p>原因是<strong>按位取反</strong>是指将把内存中的<code>0</code>和<code>1</code><strong>全部取反</strong>，并且整数在内存中储存的是<code>补码</code></p><p>拿<code>a=0</code>举例子</p><p>首先介绍一个整数的二进制表示的<code>3</code>种情况</p><p>原码：是将二进制的<strong>最高位变成符号位</strong>，最高位为0则为正，反之为负</p><p>反码：就是将原码<strong>除符号位</strong>（最高位）<strong>剩下的</strong>的0和1<strong>全部反转</strong></p><p>补码：在<strong>反码</strong>的基础上<strong>+1</strong></p><p>回到例子</p><p><img src="https://img1.imgtp.com/2022/08/22/NAQkCTup.jpg" alt=""></p><p><strong>PS：正整数”三码合一“</strong></p><h2 id="—-和"><a href="#—-和" class="headerlink" title="— 和 ++"></a>— 和 ++</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--          前置、后置--</span><br><span class="line">++          前置、后置++</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = ++a;<span class="comment">//前置++，先赋值后使用 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是11 11</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = a++;<span class="comment">//后置++，先使用后赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是10 11</p><p><strong>—与++同理</strong></p><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3.14</span>；</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式虽然可以出结果但会报错，因为<code>a</code>原来是浮点数，强制转换会丢失浮点数之后数据</p><p><img src="https://img1.imgtp.com/2022/08/22/wMGvvwKf.png" alt=""></p><p>如果想要消除报错<strong>可以选择</strong>进行强制类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">//强制类型转换</span></span><br><span class="line">    <span class="comment">//int a = 3.14；</span></span><br><span class="line">    <span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//可以用但不推荐</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;=小于等于</span><br><span class="line">&gt;=大于等于</span><br><span class="line">==等于</span><br><span class="line">!=不等于</span><br></pre></td></tr></table></figure><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;逻辑与</span><br><span class="line">||逻辑或</span><br></pre></td></tr></table></figure><p>计算机的逻辑用语，与高中数学的<strong>且、或</strong>的用法一致</p><p>逻辑与 <strong>都真为真，一假全假</strong></p><p>逻辑或 <strong>都假为假，一真全真</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> c = a&amp;&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为1</p><p>若</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = a&amp;&amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则结果为0</p><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p>条件操作符也是一种<strong>三目操作符</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp1 ? exp2 : exp3</span><br></pre></td></tr></table></figure><p>使用逻辑是</p><p>当exp1<strong>成立</strong>时，exp2 进行计算，整个表达式的结果是<strong>exp2的结果</strong></p><p>当exp1<strong>不成立</strong>时，exp3进行计算，整个表达式的结果是<strong>exp3的结果</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">        max = a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        max = b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用条件操作符就可以<strong>简化</strong>成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    max = a&gt;b ? a : b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两者在表达效果上<strong>完全一致</strong></p><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h2><p>顾名思义，逗号隔开的一串表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> d = (a=b+<span class="number">2</span>,c=a<span class="number">-4</span>,b=c+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是3</p><p>因为逗号表达式的执行逻辑是，<strong>从左向右依次计算</strong>，整个表达式的<strong>结果</strong>就是<strong>最后一个表达式的结果</strong></p><h2 id="下引用标操作符"><a href="#下引用标操作符" class="headerlink" title="下引用标操作符"></a>下引用标操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[ ]中的[ ]就是下标引用操作符</p><h2 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="函数调用操作符"></a>函数调用操作符</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printf后的( )就是函数调用操作符</p><p>不同的是，函数调用操作符<strong>可以存在多个操作数</strong></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homework-Lesson-2</title>
      <link href="/2022/08/07/homework-Lesson-2/"/>
      <url>/2022/08/07/homework-Lesson-2/</url>
      
        <content type="html"><![CDATA[<h1 id="求两个数的较大值"><a href="#求两个数的较大值" class="headerlink" title="求两个数的较大值"></a>求两个数的较大值</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">MAX</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y)</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1, &amp;num2);</span><br><span class="line"><span class="type">int</span> max = MAX(num1, num2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, max);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BC41-你是天才吗？"><a href="#BC41-你是天才吗？" class="headerlink" title="BC41-你是天才吗？"></a><a href="https://www.nowcoder.com/practice/557cc54704bb4d56b73b62d1a5455331?tpId=107&amp;&amp;tqId=33322&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC41-你是天才吗？</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> IQ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;IQ) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IQ &gt;= <span class="number">140</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Genius\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BC32-输出学生信息"><a href="#BC32-输出学生信息" class="headerlink" title="BC32-输出学生信息"></a><a href="https://www.nowcoder.com/practice/8e94458049eb4e838f711bbd1be0045e?tpId=107&amp;&amp;tqId=33313&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC32-输出学生信息</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name    Age    Gender\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------\n&quot;</span>);   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Jack    18     man\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BC18-计算带余除法"><a href="#BC18-计算带余除法" class="headerlink" title="BC18-计算带余除法"></a><a href="">BC18-计算带余除法</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a / b, a % b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BC17-计算表达式的值"><a href="#BC17-计算表达式的值" class="headerlink" title="BC17-计算表达式的值"></a><a href="https://www.nowcoder.com/practice/58457d27f91043edaf95b6591bb64fd6?tpId=107&amp;&amp;tqId=33298&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC17-计算表达式的值</a></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, a / b, a % b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day7</title>
      <link href="/2022/08/05/C-Day7/"/>
      <url>/2022/08/05/C-Day7/</url>
      
        <content type="html"><![CDATA[<h1 id="初识操作符"><a href="#初识操作符" class="headerlink" title="初识操作符"></a>初识操作符</h1><blockquote><p>算术操作符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+  -  *  /  %(取余)</span><br></pre></td></tr></table></figure><blockquote><p>位移操作符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; &lt;&lt;</span><br></pre></td></tr></table></figure><blockquote><p>位操作符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;  ^  |</span><br></pre></td></tr></table></figure><blockquote><p>赋值操作符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">= += -= *= /= &amp;= ^=  |=   &gt;&gt;=  &lt;&lt;=</span><br></pre></td></tr></table></figure><blockquote><p>单目操作符</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!           逻辑反操作</span><br><span class="line">-           负值</span><br><span class="line">+           正值</span><br><span class="line">&amp;           取地址</span><br><span class="line"><span class="keyword">sizeof</span>      操作数的类型长度（以字节为单位）</span><br><span class="line">~           对一个数的二进制按位取反</span><br><span class="line">--          前置、后置--</span><br><span class="line">++          前置、后置++</span><br><span class="line">*           间接访问操作符(解引用操作符)</span><br><span class="line">(类型)       强制类型转换</span><br></pre></td></tr></table></figure><h2 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h2><p>算术操作符没什么好说的，就是简单的四则运算，但会有一些初学时的误区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">9</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<code>4</code></p><p>为什么不是4.5呢？是因为用的整型<code>int</code>吗？试着改成<code>float</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">9</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<code>4.0000</code></p><p>已经都换成了浮点数，为什么还是不行呢？</p><p>是因为<code>/</code>两边都是整数，就会进行整数除法，而两边任意一侧是小数，就会进行小数除法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">9</span>/<span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<code>4.5</code></p><h2 id="位移操作符"><a href="#位移操作符" class="headerlink" title="位移操作符"></a>位移操作符</h2><p>位移操作符就是将数字转化成二进制位，在进行左移右移的操作符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> b = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是<code>4</code></p><p>为什么呢？</p><p>是因为，1个整形，相当于4个字节，而每个字节又相当于8bit，因此<code>2</code>这个整形相当于占用了32个字节，因此2在整形中二进制位的表示是，<code>00000000000000000000000000000010</code></p><p><img src="https://img1.imgtp.com/2022/08/06/Qm1AUcBn.jpg" alt=""></p><p>如图所示，所以结果是<code>4</code></p><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h2><p>理解起来很简单，可以进行复合赋值，直接展示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    a = <span class="number">1</span> + <span class="number">1</span> <span class="comment">//完全等于 a += 1</span></span><br><span class="line">    <span class="comment">//以此类推</span></span><br></pre></td></tr></table></figure><p>单目操作符</p><p>单目操作符就是只需要有1个操作数的操作符，因此我们之前看到的那些就可以称为，双目操作符</p><h3 id="！逻辑反操作"><a href="#！逻辑反操作" class="headerlink" title="！逻辑反操作"></a>！逻辑反操作</h3><p><code>真变假，假变真</code></p><p>在C语言中，<code>0为假，非0为真</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，输出结果是<code>0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为<code>1</code></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day6</title>
      <link href="/2022/07/29/C-Day6/"/>
      <url>/2022/07/29/C-Day6/</url>
      
        <content type="html"><![CDATA[<h1 id="初识选择语句"><a href="#初识选择语句" class="headerlink" title="初识选择语句"></a>初识选择语句</h1><p>提供选择的语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;<span class="comment">//输入的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;XD\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;欢迎来到我的blog,想要继续看嘛(1/0)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不给你看哦o(*￣▽￣*)ブ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;那好吧，再见了(T_T)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初识循环语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(money &lt; <span class="number">30000</span>)<span class="comment">//循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;攒钱:%d\n&quot;</span>, money);</span><br><span class="line">        money++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(money == <span class="number">30000</span>)<span class="comment">//选择</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大成功\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初识函数"><a href="#初识函数" class="headerlink" title="初识函数"></a>初识函数</h2><p>C语言的函数感念与所学的数学基本一致，需要有表达式和未知量，从而得出一个结果</p><p>用函数之前</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1,&amp;num2);</span><br><span class="line">    <span class="type">int</span> sum = num1 + num2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用函数后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> x , <span class="type">int</span> y)</span><span class="comment">//创建函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> z= x+y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;num1,&amp;num2);</span><br><span class="line">    <span class="type">int</span> sum = add(num1,num2);<span class="comment">//使用函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day5</title>
      <link href="/2022/07/28/C-Day5/"/>
      <url>/2022/07/28/C-Day5/</url>
      
        <content type="html"><![CDATA[<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p><strong>转义字符就是转变其原来的意思</strong></p><p>这里有一个转义的图表可以参考一下</p><div class="table-container"><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜线字符’’\’</td><td>092</td></tr><tr><td>\’</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\”</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>空字符(NUL)</td><td>000</td></tr><tr><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>十六进制所代表的任意字符</td><td>十六进制</td></tr></tbody></table></div><p>那来举一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;C;\test\test.c&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个输出结果会是什么呢</p><p><img src="https://img1.imgtp.com/2022/07/28/D65LPzf1.png" alt=""></p><p>再来举两个特殊的例子</p><p><code>\ddd</code>和<code>\xhh</code>，一个是<code>八进制</code>转化一个是<code>十六进制</code>转化，在<code>printf</code>指令中<code>%d</code>可以直接打印出其换算的十进制数，<code>%c</code>可以直接打印出ASCII码所对应的字符</p><p><a href="https://zh.wikipedia.org/wiki/ASCII">ASCII码表</a></p><h2 id="小思考"><a href="#小思考" class="headerlink" title="小思考"></a>小思考</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%D\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;C:\test\328\test.c&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的输出结果是多少？<br>答案是 <code>14</code></p><p>解答</p><p>转义字符带上斜杠只会算作<strong>一个字符</strong>，因此<code>\t</code>算作一个字符</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是用来解释复杂代码的，可以让<strong>未来的自己看得懂</strong></p><p>注释在c语言中有两种</p><ul><li><code>//</code>c++的注释风格</li><li><code>/* */</code>c语言的注释风格(缺点是不支持嵌套注释)</li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day4</title>
      <link href="/2022/07/26/c-Day4/"/>
      <url>/2022/07/26/c-Day4/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>字符串即一串字符。</strong>单括号括起来的是<strong>字符</strong>，双括号括起来的就是<strong>字符串</strong>。</p><h2 id="如何描述字符串"><a href="#如何描述字符串" class="headerlink" title="如何描述字符串"></a>如何描述字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;abcdef&quot;</span>; <span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提前需要注意的是，字符串的结束标志是一个<code>\0</code>的转义字符，在计算字符串长度的时候，<code>\0</code>因为是结束的标志，因此不算做字符串的内容</p><h2 id="证明字符串的内容都是字符-与-0算作元素"><a href="#证明字符串的内容都是字符-与-0算作元素" class="headerlink" title="证明字符串的内容都是字符 与 \0算作元素"></a>证明字符串的内容都是字符 与 <code>\0</code>算作元素</h2><p>因为<strong>数组</strong>表示的是一组<strong>相同类型</strong>的<strong>元素</strong>，所以我们在这里可以选择使用字符数组来证明</p><p>首先将字符串存到字符数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr[] = <span class="string">&quot;abcde&quot;</span>;<span class="comment">//[]不填写，会自动根据后续内容进行初始化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按下<code>F10</code>进行调试，之后再监视<code>arr</code></p><p><img src="https://img1.imgtp.com/2022/07/27/6VXPkuMM.png" alt=""></p><p>根据右侧监视的结果我们发现有0~5，一共<strong>6个元素</strong>，是因为字符串在结尾<strong>隐藏了一个<code>\0</code></strong></p><h2 id="0的重要性-与-0是字符串中止的证明"><a href="#0的重要性-与-0是字符串中止的证明" class="headerlink" title="\0的重要性 与 \0是字符串中止的证明"></a><code>\0</code>的重要性 与 <code>\0</code>是字符串中止的证明</h2><p><code>\0</code>的主要作用就是进行一个<strong>终止读取</strong>的作用<del>及时折损</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;<span class="comment">//字符串</span></span><br><span class="line">    <span class="type">char</span> arr2[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;<span class="comment">//字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);<span class="comment">//%s是打印字符串用的</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/27/WjJL6Soi.png" alt=""></p><p>arr1是<strong>正常</strong>的但是arr2出现了乱码是为什么呢？</p><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>通过<strong>画图</strong>可以方便我们对<strong>内存空间</strong>进行理解，如下图所示</p><p><img src="https://img1.imgtp.com/2022/07/27/ZxvYEook.png" alt=""></p><p>而出现乱码的原因就是，<strong>由于没有终止符号就会一直读取未知信息，产生乱码</strong></p><p><strong>如何解决呢？</strong>很简单可以在后面直接手动输入一个<strong><code>\0</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> arr2[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就不会出现乱码了</p><p>现在已经知道了<code>\0</code>会算作一个元素个数，<strong>那么怎么证明其不算作字符长度呢？</strong></p><h2 id="0不算作字符长度"><a href="#0不算作字符长度" class="headerlink" title="\0不算作字符长度"></a><code>\0</code>不算作字符长度</h2><p>证明之前还是来简单介绍一个新的函数，来辅助证明</p><h3 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen()函数"></a><code>strlen()</code>函数</h3><p><code>strlen()</code>函数，全称是<strong>string length</strong>，它直接在<code>()</code>内填写，可以求字符串的长度，但是<strong>求完长度后会直接返回</strong></p><p>因此在使用这个函数的时候可以在<strong>前面</strong>打上<code>int len</code>就可以解决</p><p>但是在使用这个函数是会有<strong>头文件</strong>报错，因此还需要在头文件上加上<strong><code>#include &lt;string.h&gt;</code></strong></p><h3 id="回到证明"><a href="#回到证明" class="headerlink" title="回到证明"></a>回到证明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/27/lLSAlMf0.png" alt=""></p><p><strong>结果显然</strong>是3，因此足以证明<strong><code>\0</code>会算作一个元素个数，但其不算作字符长度</strong></p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>如果要是输入字符会<code>strlen()</code>函数会怎么样？来试验一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> arr2[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/27/MA72C07W.png" alt=""></p><p>结果如图，这个数字很奇怪，是为什么呢？</p><p>因为<code>strlen()</code>在求算字符长度是，得出的结果是<strong>随机值</strong>，多按几次<code>F5</code>就会发现<strong>每次的结果</strong>都是<strong>不一样</strong>的</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day3</title>
      <link href="/2022/07/24/C-Day3/"/>
      <url>/2022/07/24/C-Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量指的是代码中不变的量</p><p><strong>在c语言中常量分为一下几种</strong></p><ul><li>字面常量</li><li>const修饰的常量</li><li><h1 id="define定义的标识符常量"><a href="#define定义的标识符常量" class="headerlink" title="define定义的标识符常量"></a>define定义的标识符常量</h1></li><li>枚举常量</li></ul><h2 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h2><p>字面常量大体包括以下几种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">3.14</span>;<span class="comment">//浮点型常量</span></span><br><span class="line">    <span class="number">10</span>;<span class="comment">//整型常量</span></span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>;<span class="comment">//字符常量</span></span><br><span class="line">    <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//字符串常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const修饰的常变量"><a href="#const修饰的常变量" class="headerlink" title="const修饰的常变量"></a><code>const</code>修饰的常变量</h2><p>在介绍const修饰的常变量之前，先来了解一下<strong>常变量</strong></p><h3 id="常变量"><a href="#常变量" class="headerlink" title="常变量"></a>常变量</h3><p>常变量是一个具有常属性（不可被改变的属性）的变量</p><p>首先看一下变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/24/indcyr4M.png" alt=""></p><p>结果很显然是10</p><p><strong>那么常变量会是怎么样呢？</strong></p><p>在说常变量之前，先引出数组</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>C语言中的数组初始化是有三种形式的，分别是：</p><ol><li>数据类型 数组名称[长度n] = {元素1,元素2…元素n};</li><li>数据类型 数组名称[] = {元素1,元素2…元素n};</li><li>数据类型 数组名称[长度n]; 数组名称[0] = 元素1; 数组名称[1] = 元素2; 数组名称[n-1] = 元素n;</li></ol><p><strong>大括号内进行初始化，方括号内一定为常量</strong></p><p>例如：初始化一个数组 int arr[3] = {1,2,3}; 那么arr[0]就是元素1</p><p>值得注意的是</p><blockquote><ol><li>数组的下标均以0开始；</li><li>数组在初始化的时候，数组内元素的个数不能大于声明的数组长度；</li><li>如果采用第一种初始化方式，元素个数小于数组的长度时，多余的数组元素初始化为0；</li><li>在声明数组后没有进行初始化的时候，静态(static)和外部(extern)类型的数组元素初始化元素为0，自动(auto)类型的数组的元素初始化值不确定。</li></ol></blockquote><h3 id="回到常变量"><a href="#回到常变量" class="headerlink" title="回到常变量"></a>回到常变量</h3><p>先来说明他具有常量的性质</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> num = <span class="number">1</span>;<span class="comment">//num从变量变成常变量</span></span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/24/4gi5iPuW.png" alt=""></p><p>从结果上告诉了我们，常变量是具有常属性的</p><p><strong>如何说明常变量，本质上是变量呢？那么就需要提到刚才说到的数组了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//int arr[n] = &#123;o&#125;;//这行代码不行，因为n是变量而非常量</span></span><br><span class="line">    <span class="comment">//那换成const修饰的常变量呢</span></span><br><span class="line">    <span class="type">const</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> arr2[n] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/24/YhfniXz8.png" alt=""></p><p>因此我们可以得出结论常变量是具有常属性的变量</p><h2 id="define定义的标识符常量-1"><a href="#define定义的标识符常量-1" class="headerlink" title="#define定义的标识符常量"></a><code>#define</code>定义的标识符常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//MAX = 20000 //err 不可更改</span></span><br><span class="line">    <span class="type">int</span> M =MAX;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;M = %d\n&quot;</span>, M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h2><p><strong>枚举常量指的是一一可以列举的常量</strong></p><p>例如：性别，血型等等</p><p>枚举变量需要提前进行定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SEX</span>  //在这里可以列举出枚举变量未来的可能取值</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MALE,</span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SEX</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line">    <span class="comment">//enum SEX s = boy;//err，因为定义时没有给予‘boy’的可能取值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FEMALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SECRET);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/24/RnlZKOAQ.png" alt=""></p><p>因此枚举常量是从0开始的常量，<strong>那么它可以被更改吗？</strong>来试一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SEX</span>  //在这里可以列举出枚举变量未来的可能取值</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MALE = <span class="number">3</span>,<span class="comment">//可以在这里修改</span></span><br><span class="line">    FEMALE,</span><br><span class="line">    SECRET</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">SEX</span> <span class="title">s</span> =</span> MALE;</span><br><span class="line">    <span class="comment">//MALE = 3;//err 不能在这里修改</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, MALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, FEMALE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, SECRET);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/24/srGRpV32.png" alt=""></p><p>好修改成功了，与数组的更改后效果一致</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day2</title>
      <link href="/2022/07/23/C-Day2/"/>
      <url>/2022/07/23/C-Day2/</url>
      
        <content type="html"><![CDATA[<h1 id="初始变量的作用域和生命周期"><a href="#初始变量的作用域和生命周期" class="headerlink" title="初始变量的作用域和生命周期"></a>初始变量的作用域和生命周期</h1><h2 id="作用域-scope"><a href="#作用域-scope" class="headerlink" title="作用域(scope)"></a>作用域(scope)</h2><blockquote><p>作用域是程序设计的概念，通常来说，一般程序的代码中所用到的名字并不总是有效或者可用的。而先动这个名字的可用性的代码范围就是这个名字的作用域。</p></blockquote><p>简而言之，<strong>一个变量在哪里可以使用，则哪里就是它的可用域。（就是自己所在的大括号内）</strong></p><h3 id="局部变量的可用域：即变量所在的局部范围"><a href="#局部变量的可用域：即变量所在的局部范围" class="headerlink" title="局部变量的可用域：即变量所在的局部范围"></a>局部变量的可用域：即变量所在的局部范围</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/23/R2nSVARG.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/23/wWym2Dtv.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/23/y4gtjL2L.png" alt=""></p><p>从上面三个例子可以看到，只有当<code>printf</code>与要打印的<code>变量a</code>同时在一个打括号内，才会起作用。</p><h3 id="全局变量的作用域：是整个工程"><a href="#全局变量的作用域：是整个工程" class="headerlink" title="全局变量的作用域：是整个工程"></a>全局变量的作用域：是整个工程</h3><p>举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> global = <span class="number">2022</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1:%d\n&quot;</span>,global);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mozi\n&quot;</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2:%d\n&quot;</span>,global);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3:%d\n&quot;</span>,global);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/23/UzZpPHGH.png" alt=""></p><p>根据上面的结果我们得知，<code>全局变量</code>可以在该源文件的任意一个位置得以调用</p><p><strong>那么已经说了全局变量的作用域是整个工程，那我再新建一个源文件谁不是也可以调用出来？</strong></p><p>那就来试验一下</p><p><img src="https://img1.imgtp.com/2022/07/23/3WEymrea.png" alt=""></p><p><strong>结果告诉我们不可以直接调用，那有没有什么方法可以调用出来呢？</strong></p><p>答案是用的，在调用另一个源文件的全局变量之前，我们要<strong>声明</strong>一下所需要调用的<code>全局变量</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> global</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/07/23/xKEWsA6a.png" alt=""></p><p>好现在就成功了</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>一个生物的生命周期是其从出生到死亡的时间段</p><p>而<strong>一个变量的生命周期是其从创建到销毁的时间段</strong></p><h3 id="局部变量的生命周期"><a href="#局部变量的生命周期" class="headerlink" title="局部变量的生命周期"></a>局部变量的生命周期</h3><p><strong>局部变量的生命周期是进入局部范围开始，离开局部范围结束</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">10</span>;       <span class="comment">//创建</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    &#125;                     <span class="comment">//销毁</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局变量的生命周期"><a href="#全局变量的生命周期" class="headerlink" title="全局变量的生命周期"></a>全局变量的生命周期</h3><p><strong>全局变量的生命周期是整个程序的生命周期9</strong></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言作业-第一课</title>
      <link href="/2022/07/21/homework-Lesson-1/"/>
      <url>/2022/07/21/homework-Lesson-1/</url>
      
        <content type="html"><![CDATA[<h1 id="BC6-小飞机"><a href="#BC6-小飞机" class="headerlink" title="BC6-小飞机"></a><a href="https://www.nowcoder.com/practice/5cd9598f28f74521805d2069ce4a108a?tpId=107&amp;&amp;tqId=33287&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC6-小飞机</a></h1><p>输入代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     **\n     **\n************\n************\n    *  *\n    *  *\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://img1.imgtp.com/2022/07/21/NakQI11s.png" alt=""></p><h1 id="BC84-计算Y的值"><a href="#BC84-计算Y的值" class="headerlink" title="BC84-计算Y的值"></a><a href="https://www.nowcoder.com/practice/61a0f16117484d219b59c62224b33b1c?tpId=107&amp;&amp;tqId=33365&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC84-计算Y的值</a></h1><p>输入代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x , y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">0</span>) y=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x==<span class="number">0</span>) y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> y=<span class="number">1</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BC83-被5整除的问题"><a href="#BC83-被5整除的问题" class="headerlink" title="BC83-被5整除的问题"></a><a href="https://www.nowcoder.com/practice/a4f527b043c04551bf4b80b4275a53bd?tpId=107&amp;&amp;tqId=33364&amp;rp=1&amp;ru=/ta/beginner-programmers&amp;qru=/ta/beginner-programmers/question-ranking">BC83-被5整除的问题</a></h1><p>输入代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">    <span class="keyword">if</span>(M%<span class="number">5</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言 Day1</title>
      <link href="/2022/07/15/C-Day1/"/>
      <url>/2022/07/15/C-Day1/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个C语言项目"><a href="#第一个C语言项目" class="headerlink" title="第一个C语言项目"></a>第一个C语言项目</h2><h3 id="使用工具：VS2022社区版"><a href="#使用工具：VS2022社区版" class="headerlink" title="使用工具：VS2022社区版"></a>使用工具：VS2022社区版</h3><h4 id="printf-打印与-mian-函数"><a href="#printf-打印与-mian-函数" class="headerlink" title="printf  打印与 mian() 函数"></a>printf  打印与 mian() 函数</h4><p><strong>小试牛刀</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">100</span>);<span class="comment">//%d-打印出一个整数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Ctrl+F5 运行</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="有关main-函数"><a href="#有关main-函数" class="headerlink" title="有关main()函数"></a>有关main()函数</h4><p><code>main()</code>函数是程序的入口，有且只有一个</p><p>一个工程中可以有多个<code>.c</code>文件，但是多个<code>.c</code>文件中只能有一个<code>main</code>函数。</p><h2 id="初识数据类型"><a href="#初识数据类型" class="headerlink" title="初识数据类型"></a>初识数据类型</h2><p><strong>那么何为数据类型？又分为几种？意义是什么？大小又是多少呢？</strong></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型，其实在我们生活中经常被使用，但是在编程语言中被重新定义了一下，并且加入了一些新的知识</p><p><strong>数据类型 = 一类数 + 这类数可以执行的操作</strong></p><p>其中的一类数：指的就是我们数学中的整数，小数等，但是在C语言中分别叫做整型数据，浮点数</p><p><strong>当然，C语言不是全部使用数学中的数据类型</strong> </p><p>这类数可以执行的操作：指的是一个类型的数据可以执行哪些操作，比如：整形数据我们可以进行加减乘除，字符型数据却不可以。当然可以通过某种方法实现 </p><h3 id="C语言中有哪些数据类型？"><a href="#C语言中有哪些数据类型？" class="headerlink" title="C语言中有哪些数据类型？"></a>C语言中有哪些数据类型？</h3><div class="table-container"><table><thead><tr><th>实际代码</th><th>表示内容</th></tr></thead><tbody><tr><td>char</td><td>字符数据类型</td></tr><tr><td>short</td><td>短整型</td></tr><tr><td>int</td><td>整型</td></tr><tr><td>long</td><td>长整型</td></tr><tr><td>long long</td><td>更长的整型</td></tr><tr><td>float</td><td>单精度浮点数</td></tr><tr><td>double</td><td>双精度浮点数</td></tr></tbody></table></div><h4 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符类型</span></span><br><span class="line"><span class="type">char</span> name =<span class="string">&quot;qianbimo&quot;</span>;</span><br><span class="line"><span class="comment">//整型</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">18</span>；</span><br><span class="line"><span class="comment">//短整型</span></span><br><span class="line"><span class="type">short</span> num = <span class="number">10</span>；</span><br><span class="line"><span class="comment">//长整型</span></span><br><span class="line"><span class="type">long</span> road = <span class="number">114514</span></span><br><span class="line"><span class="comment">//更长的整形</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">123456</span></span><br><span class="line"><span class="comment">//单精度浮点数</span></span><br><span class="line"> <span class="type">float</span> weight = <span class="number">55.5</span></span><br><span class="line"><span class="comment">//双精度浮点数</span></span><br><span class="line"> <span class="type">double</span> d = <span class="number">0.0</span></span><br></pre></td></tr></table></figure><h3 id="分这么多类型的意义是什么呢？"><a href="#分这么多类型的意义是什么呢？" class="headerlink" title="分这么多类型的意义是什么呢？"></a>分这么多类型的意义是什么呢？</h3><p>因为对于编程语言来说，许多数据都是人为设定的，我们输入这些数据到计算机中之后，如果我们事先不让计算机知道某一个数据的长度是多少，那么计算机就不知道应该如何处理长度，所以就会产生错误</p><p><strong>因此，用不同数据类型在内存中占用的存储长度不同，将数据类型进行分类</strong></p><p>这样的好处就是，我们事先让计算机知道了这个数据是什么类型，并且由于每一个数据类型的长度，都是固定好的，这样计算机处理的时候就会按照一定的长度去选数据</p><h3 id="不同数据类型的空间大小是多少？"><a href="#不同数据类型的空间大小是多少？" class="headerlink" title="不同数据类型的空间大小是多少？"></a>不同数据类型的空间大小是多少？</h3><h4 id="操作符-sizeof"><a href="#操作符-sizeof" class="headerlink" title="操作符 sizeof"></a>操作符 sizeof</h4><h5 id="sizeof的使用"><a href="#sizeof的使用" class="headerlink" title="sizeof的使用"></a>sizeof的使用</h5><p>在实现展示数据类型大小之前，首先我们先来引进一个新的操作符——<code>sizeof</code></p><p><code>sizeof</code>是一个操作符，其主要功能是计算<code>类型</code>或者<code>变量</code>所占空间的大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">double</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后的输出结果</p><p><img src="https://img1.imgtp.com/2022/07/15/PHEhVQwS.png"  /></p><p>但是结果并没有单位，不能让我们直观的感受到它的大小，那么问题来了，结果所隐含的单位是什么呢？</p><h5 id="sizeof-的单位"><a href="#sizeof-的单位" class="headerlink" title="sizeof 的单位"></a>sizeof 的单位</h5><p>sizeof 的单位是计算机中常见的单位——字节<code>Byte</code></p><h5 id="计算机中最小的单位"><a href="#计算机中最小的单位" class="headerlink" title="计算机中最小的单位"></a>计算机中最小的单位</h5><p>作为常识我们知道计算机识别的是二进制即<code>1,0</code></p><p>而<code>1</code>所占用的空间大小为1Bit，<code>0</code>所占用的空间大小为0Bit</p><p>所以我们得知<code>Bit</code>就是计算机中最小的单位</p><h5 id="常见的计算机单位的换算"><a href="#常见的计算机单位的换算" class="headerlink" title="常见的计算机单位的换算"></a>常见的计算机单位的换算</h5><blockquote><p>1Byte=8Bit</p><p>1Kb=1024Byte</p><p>1Mb=1024Kb</p><p>1Gb=1024Mb</p><p>1Tb=1024Gb</p><p>1Pb=1024Tb</p></blockquote><h4 id="不同数据类型的空间大小"><a href="#不同数据类型的空间大小" class="headerlink" title="不同数据类型的空间大小"></a>不同数据类型的空间大小</h4><p>根据上面知识的学习我们已经可以了解到，输出结果的单位为<code>Byte</code></p><p>那么数据类型的实际大小为：</p><div class="table-container"><table><thead><tr><th>实际代码</th><th>实际大小/Btye</th></tr></thead><tbody><tr><td>char</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>4</td></tr><tr><td>long long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr></tbody></table></div><p>产生大小的概念之后，我们发现<code>short</code>短整型的大小为2<code>Bit</code>可以理解，<strong>但是<code>long</code>长整型为什么没有<code>int</code>整型长呢？</strong></p><blockquote><p>那是因为在C语言的标准中 sizeof(long)&gt;=sizeof(int)</p></blockquote><h2 id="初识常量变量"><a href="#初识常量变量" class="headerlink" title="初识常量变量"></a>初识常量变量</h2><p>在上面的学习中已经了解到，不同的数字类型可以表示不同的东西，例如：字符用<code>char</code>，数据可以选择用<code>int</code></p><p>在我们的日常生活中也有许多的数据，他们大体可以分为两类：一种是<code>不可变的数据</code>，另一种是<code>一定可变的数据</code>。前者像，血型，性别等等，后者例如，工资，年龄体重，而在c语言当中这两种数据分别被称为：<code>常量和变量</code></p><blockquote><p><strong>常量=不可改变的量</strong></p><p><strong>变量=能被改变的量</strong></p></blockquote><h3 id="定义变量的方法"><a href="#定义变量的方法" class="headerlink" title="定义变量的方法"></a>定义变量的方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个变量</span></span><br><span class="line">  <span class="comment">//类型 变量 = 赋值 或者 类型 变量（不推荐）</span></span><br><span class="line">    <span class="type">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="type">double</span> weight = <span class="number">55.5</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的初步应用"><a href="#变量的初步应用" class="headerlink" title="变量的初步应用"></a>变量的初步应用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="type">double</span> weight = <span class="number">55.5</span>;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, age);</span><br><span class="line">    weight = weight - <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, weight);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：不同的数据类型打印用不同的<code>%</code>来表示</p><blockquote><p>int-%d</p><p>float-%lf</p><p>double-%f</p></blockquote><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h3><ul><li>局部变量</li><li>全局变量</li></ul><p>局部变量：在大括号内定义的变量</p><p>全局变量：在大括号外定义的变量 </p><p>为了更好的理解举个例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局变量 - &#123;&#125;外部定义的变量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//局部变量 - &#123;&#125;内部定义的变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是此时输出的结果会是什么呢？10or100？</strong></p><p><strong><img src="https://img1.imgtp.com/2022/07/15/bkhzS6TV.png" alt=""></strong></p><p> 很显然结果是<strong>10</strong>但是为什么呢？</p><p>是因为在C语言中：<strong>当全局变量与局部变量名称冲突时，局部变量优先。</strong>因此我们不建议把全局变量和局部变量名字写成一样</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><h4 id="scanf-函数"><a href="#scanf-函数" class="headerlink" title="scanf() 函数"></a>scanf() 函数</h4><p>在使用变量的时候，我们又要引进一个新的函数——<code>scanf()</code> 函数</p><p><code>scanf()</code>函数是一个输入函数</p><h5 id="scanf-函数的使用"><a href="#scanf-函数的使用" class="headerlink" title="scanf()函数的使用"></a>scanf()函数的使用</h5><p>我们可以来写一个代码求两个整数的和，来具体感受一下<code>scanf()</code>函数的具体表达</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a, &amp;b);</span><br><span class="line">    sum = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是当我们直接运行时可能会出现报错</p><h5 id="scanf-函数报错的解决办法"><a href="#scanf-函数报错的解决办法" class="headerlink" title="scanf()函数报错的解决办法"></a>scanf()函数报错的解决办法</h5><p><img src="https://img1.imgtp.com/2022/07/15/owP18ZMm.png" alt=""></p><p>当我们使用VS编译器的时候，<code>scanf()</code>函数报错是正常现象。官方已经给了我们解决方式</p><ul><li>在源文件的第一行中添加<code>#define CRT_SECURE_NO_WARNINGS 1</code> <strong>(推荐)</strong></li><li>使用<code>scanf_s()</code>函数来替换<code>scanf()</code>函数 <strong>(不推荐)</strong></li></ul><h5 id="那么为什么不推荐scanf-s-函数呢？"><a href="#那么为什么不推荐scanf-s-函数呢？" class="headerlink" title="那么为什么不推荐scanf_s()函数呢？"></a>那么为什么不推荐<code>scanf_s()</code>函数呢？</h5><p>是因为<code>scanf_s()</code>函数并不是c语言中所规定的标准，而是由VS编译器自己提供创造的。使用<code>scanf_s()</code>函数可能会导致在分享代码时，他人使用的是非VS编译器就会导致整个函数报错。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个博客</title>
      <link href="/2022/07/11/hello-world/"/>
      <url>/2022/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>正如标题所见，这是我梦开始的地方。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
